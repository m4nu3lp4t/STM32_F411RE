
F411_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000798c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08007b30  08007b30  00008b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed0  08007ed0  00008ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed8  08007ed8  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007ee0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001e8  080080c8  000091e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080080c8  000094c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d57c  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f07  00000000  00000000  00016794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000186a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  000193c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017276  00000000  00000000  00019dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec64  00000000  00000000  00031074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900a8  00000000  00000000  0003fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfd80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b4  00000000  00000000  000cfdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d4578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b14 	.word	0x08007b14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08007b14 	.word	0x08007b14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fead 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 fa0d 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 fb47 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9a:	f000 fb25 	bl	80015e8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f9e:	f000 fa6f 	bl	8001480 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000fa2:	f000 facd 	bl	8001540 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 faf5 	bl	8001594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, buffer, 16);
 8000faa:	2210      	movs	r2, #16
 8000fac:	49c8      	ldr	r1, [pc, #800]	@ (80012d0 <main+0x348>)
 8000fae:	48c9      	ldr	r0, [pc, #804]	@ (80012d4 <main+0x34c>)
 8000fb0:	f003 f811 	bl	8003fd6 <HAL_UART_Receive_DMA>
  uint16_t duty_cycle = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t interval = 100;		// el ciclo dura 100 ms
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	80bb      	strh	r3, [r7, #4]
   //kp = 1.0; ki = 1.0; kd = 0.01; set_point = 70.00;
   kp = 0.0; ki = 0.0; kd = 0.00; set_point = 0.00;
 8000fbc:	4bc6      	ldr	r3, [pc, #792]	@ (80012d8 <main+0x350>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4bc5      	ldr	r3, [pc, #788]	@ (80012dc <main+0x354>)
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	4bc4      	ldr	r3, [pc, #784]	@ (80012e0 <main+0x358>)
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	4bc3      	ldr	r3, [pc, #780]	@ (80012e4 <main+0x35c>)
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
  while (1)
  {
	uint32_t current_time = HAL_GetTick();
 8000fdc:	f000 feec 	bl	8001db8 <HAL_GetTick>
 8000fe0:	6038      	str	r0, [r7, #0]
	if((current_time - start) >= interval){
 8000fe2:	4bc1      	ldr	r3, [pc, #772]	@ (80012e8 <main+0x360>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	1a9a      	subs	r2, r3, r2
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d32a      	bcc.n	8001048 <main+0xc0>
		start = current_time;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4bbc      	ldr	r3, [pc, #752]	@ (80012e8 <main+0x360>)
 8000ff8:	801a      	strh	r2, [r3, #0]
		proc_var = ((float)counter*10)*60/(495.0); 		//RPM del eje final, 11 ranuras y reduccion de 45
 8000ffa:	4bbc      	ldr	r3, [pc, #752]	@ (80012ec <main+0x364>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001006:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800100a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100e:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 80012f0 <main+0x368>
 8001012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001016:	ee17 0a90 	vmov	r0, s15
 800101a:	f7ff fa9d 	bl	8000558 <__aeabi_f2d>
 800101e:	a3a6      	add	r3, pc, #664	@ (adr r3, 80012b8 <main+0x330>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fc1a 	bl	800085c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fde2 	bl	8000bf8 <__aeabi_d2f>
 8001034:	4603      	mov	r3, r0
 8001036:	4aaf      	ldr	r2, [pc, #700]	@ (80012f4 <main+0x36c>)
 8001038:	6013      	str	r3, [r2, #0]
		contador = counter;
 800103a:	4bac      	ldr	r3, [pc, #688]	@ (80012ec <main+0x364>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4aae      	ldr	r2, [pc, #696]	@ (80012f8 <main+0x370>)
 8001040:	6013      	str	r3, [r2, #0]
		  counter = 0;
 8001042:	4baa      	ldr	r3, [pc, #680]	@ (80012ec <main+0x364>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	  }
	//printf("Received %s \n\r ", buffer);

	if (IsReceived == 1){
 8001048:	4bac      	ldr	r3, [pc, #688]	@ (80012fc <main+0x374>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 80d3 	bne.w	80011f8 <main+0x270>
	 set_point = ((buffer[0]-48)*100.0 + (buffer[1]-48)*10.0  + (buffer[2]-48)*1.0 + (buffer[3]-48)*0.1);
 8001052:	4b9f      	ldr	r3, [pc, #636]	@ (80012d0 <main+0x348>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	3b30      	subs	r3, #48	@ 0x30
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa6b 	bl	8000534 <__aeabi_i2d>
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4ba7      	ldr	r3, [pc, #668]	@ (8001300 <main+0x378>)
 8001064:	f7ff fad0 	bl	8000608 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4614      	mov	r4, r2
 800106e:	461d      	mov	r5, r3
 8001070:	4b97      	ldr	r3, [pc, #604]	@ (80012d0 <main+0x348>)
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	3b30      	subs	r3, #48	@ 0x30
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa5c 	bl	8000534 <__aeabi_i2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4ba0      	ldr	r3, [pc, #640]	@ (8001304 <main+0x37c>)
 8001082:	f7ff fac1 	bl	8000608 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff f905 	bl	800029c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4614      	mov	r4, r2
 8001098:	461d      	mov	r5, r3
 800109a:	4b8d      	ldr	r3, [pc, #564]	@ (80012d0 <main+0x348>)
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	3b30      	subs	r3, #48	@ 0x30
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa47 	bl	8000534 <__aeabi_i2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff f8f5 	bl	800029c <__adddf3>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4614      	mov	r4, r2
 80010b8:	461d      	mov	r5, r3
 80010ba:	4b85      	ldr	r3, [pc, #532]	@ (80012d0 <main+0x348>)
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	3b30      	subs	r3, #48	@ 0x30
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa37 	bl	8000534 <__aeabi_i2d>
 80010c6:	a37e      	add	r3, pc, #504	@ (adr r3, 80012c0 <main+0x338>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fa9c 	bl	8000608 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f8e0 	bl	800029c <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd88 	bl	8000bf8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a7e      	ldr	r2, [pc, #504]	@ (80012e4 <main+0x35c>)
 80010ec:	6013      	str	r3, [r2, #0]
     kp = (buffer[4]-48)*10 + (buffer[5]-48) + (buffer[6]-48)*0.1 + (buffer[7]-48)*0.01;
 80010ee:	4b78      	ldr	r3, [pc, #480]	@ (80012d0 <main+0x348>)
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	461a      	mov	r2, r3
 8001100:	4b73      	ldr	r3, [pc, #460]	@ (80012d0 <main+0x348>)
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	3b30      	subs	r3, #48	@ 0x30
 8001106:	4413      	add	r3, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa13 	bl	8000534 <__aeabi_i2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	4b6f      	ldr	r3, [pc, #444]	@ (80012d0 <main+0x348>)
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	3b30      	subs	r3, #48	@ 0x30
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa0b 	bl	8000534 <__aeabi_i2d>
 800111e:	a368      	add	r3, pc, #416	@ (adr r3, 80012c0 <main+0x338>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa70 	bl	8000608 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff f8b4 	bl	800029c <__adddf3>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	461d      	mov	r5, r3
 800113c:	4b64      	ldr	r3, [pc, #400]	@ (80012d0 <main+0x348>)
 800113e:	79db      	ldrb	r3, [r3, #7]
 8001140:	3b30      	subs	r3, #48	@ 0x30
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9f6 	bl	8000534 <__aeabi_i2d>
 8001148:	a35f      	add	r3, pc, #380	@ (adr r3, 80012c8 <main+0x340>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff f89f 	bl	800029c <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd47 	bl	8000bf8 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a5a      	ldr	r2, [pc, #360]	@ (80012d8 <main+0x350>)
 800116e:	6013      	str	r3, [r2, #0]
     ki = (buffer[8]-48)*10 + (buffer[9]-48) + (buffer[10]-48)*0.1 + (buffer[11]-48)*0.01;
 8001170:	4b57      	ldr	r3, [pc, #348]	@ (80012d0 <main+0x348>)
 8001172:	7a1b      	ldrb	r3, [r3, #8]
 8001174:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	461a      	mov	r2, r3
 8001182:	4b53      	ldr	r3, [pc, #332]	@ (80012d0 <main+0x348>)
 8001184:	7a5b      	ldrb	r3, [r3, #9]
 8001186:	3b30      	subs	r3, #48	@ 0x30
 8001188:	4413      	add	r3, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9d2 	bl	8000534 <__aeabi_i2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	4b4e      	ldr	r3, [pc, #312]	@ (80012d0 <main+0x348>)
 8001196:	7a9b      	ldrb	r3, [r3, #10]
 8001198:	3b30      	subs	r3, #48	@ 0x30
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9ca 	bl	8000534 <__aeabi_i2d>
 80011a0:	a347      	add	r3, pc, #284	@ (adr r3, 80012c0 <main+0x338>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fa2f 	bl	8000608 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f873 	bl	800029c <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4614      	mov	r4, r2
 80011bc:	461d      	mov	r5, r3
 80011be:	4b44      	ldr	r3, [pc, #272]	@ (80012d0 <main+0x348>)
 80011c0:	7adb      	ldrb	r3, [r3, #11]
 80011c2:	3b30      	subs	r3, #48	@ 0x30
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9b5 	bl	8000534 <__aeabi_i2d>
 80011ca:	a33f      	add	r3, pc, #252	@ (adr r3, 80012c8 <main+0x340>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa1a 	bl	8000608 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f85e 	bl	800029c <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fd06 	bl	8000bf8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a3b      	ldr	r2, [pc, #236]	@ (80012dc <main+0x354>)
 80011f0:	6013      	str	r3, [r2, #0]
     //kd = (buffer[12]-48)*10 + (buffer[13]-48) + (buffer[14]-48)*0.1 + (buffer[15]-48)*0.01;
     IsReceived = 0;
 80011f2:	4b42      	ldr	r3, [pc, #264]	@ (80012fc <main+0x374>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
	}

	error = set_point - proc_var;
 80011f8:	4b3a      	ldr	r3, [pc, #232]	@ (80012e4 <main+0x35c>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <main+0x36c>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	4b3f      	ldr	r3, [pc, #252]	@ (8001308 <main+0x380>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
	cv = cv1 + (kp + kd/Tm)*error + (-kp + ki*Tm - 2*kd/Tm)*error1 + (kd/Tm)*error2;
 800120e:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <main+0x358>)
 8001210:	edd3 6a00 	vldr	s13, [r3]
 8001214:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <main+0x384>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <main+0x350>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001228:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <main+0x380>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001232:	4b37      	ldr	r3, [pc, #220]	@ (8001310 <main+0x388>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <main+0x354>)
 800123e:	edd3 6a00 	vldr	s13, [r3]
 8001242:	4b32      	ldr	r3, [pc, #200]	@ (800130c <main+0x384>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <main+0x350>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <main+0x358>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <main+0x384>)
 8001262:	ed93 6a00 	vldr	s12, [r3]
 8001266:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800126a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800126e:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <main+0x38c>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <main+0x358>)
 800127e:	ed93 6a00 	vldr	s12, [r3]
 8001282:	4b22      	ldr	r3, [pc, #136]	@ (800130c <main+0x384>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <main+0x390>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <main+0x394>)
 800129c:	edc3 7a00 	vstr	s15, [r3]
	cv1 = cv;
 80012a0:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <main+0x394>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001310 <main+0x388>)
 80012a6:	6013      	str	r3, [r2, #0]
	error2 = error1;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <main+0x38c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <main+0x390>)
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e036      	b.n	8001320 <main+0x398>
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	00000000 	.word	0x00000000
 80012bc:	407ef000 	.word	0x407ef000
 80012c0:	9999999a 	.word	0x9999999a
 80012c4:	3fb99999 	.word	0x3fb99999
 80012c8:	47ae147b 	.word	0x47ae147b
 80012cc:	3f847ae1 	.word	0x3f847ae1
 80012d0:	2000033c 	.word	0x2000033c
 80012d4:	20000294 	.word	0x20000294
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000008 	.word	0x20000008
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000358 	.word	0x20000358
 80012ec:	2000034c 	.word	0x2000034c
 80012f0:	42700000 	.word	0x42700000
 80012f4:	2000035c 	.word	0x2000035c
 80012f8:	20000350 	.word	0x20000350
 80012fc:	20000354 	.word	0x20000354
 8001300:	40590000 	.word	0x40590000
 8001304:	40240000 	.word	0x40240000
 8001308:	20000368 	.word	0x20000368
 800130c:	20000010 	.word	0x20000010
 8001310:	20000364 	.word	0x20000364
 8001314:	2000036c 	.word	0x2000036c
 8001318:	20000370 	.word	0x20000370
 800131c:	20000360 	.word	0x20000360
	error1 = error;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <main+0x408>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <main+0x40c>)
 8001326:	6013      	str	r3, [r2, #0]
	//if (cv > 150.0){ cv = 150.0;}
	//if (cv < 20.0){	cv = 20.0;}
	duty_cycle = (int)(cv*8000.0)/100.0;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <main+0x410>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f913 	bl	8000558 <__aeabi_f2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <main+0x414>)
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc10 	bl	8000b68 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8f2 	bl	8000534 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <main+0x418>)
 8001356:	f7ff fa81 	bl	800085c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc29 	bl	8000bb8 <__aeabi_d2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,duty_cycle);
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <main+0x41c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
    printf("Kd %2.2f \n\r ", kd);
	printf("Process Value %4.2f \n\r ",proc_var);
    printf("CV %4.2f \n\r ",cv);
    printf("Error %4.2f \n\r ",error);
*/
    	printf("%4.2f \n\r",proc_var);
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <main+0x420>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8ee 	bl	8000558 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	480a      	ldr	r0, [pc, #40]	@ (80013ac <main+0x424>)
 8001382:	f004 fc4f 	bl	8005c24 <iprintf>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	@ 0x64
 8001388:	f000 fd22 	bl	8001dd0 <HAL_Delay>
  {
 800138c:	e626      	b.n	8000fdc <main+0x54>
 800138e:	bf00      	nop
 8001390:	20000368 	.word	0x20000368
 8001394:	2000036c 	.word	0x2000036c
 8001398:	20000360 	.word	0x20000360
 800139c:	40bf4000 	.word	0x40bf4000
 80013a0:	40590000 	.word	0x40590000
 80013a4:	20000204 	.word	0x20000204
 80013a8:	2000035c 	.word	0x2000035c
 80013ac:	08007b30 	.word	0x08007b30

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2230      	movs	r2, #48	@ 0x30
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fc85 	bl	8005cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <SystemClock_Config+0xc8>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a26      	ldr	r2, [pc, #152]	@ (8001478 <SystemClock_Config+0xc8>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <SystemClock_Config+0xc8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <SystemClock_Config+0xcc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a20      	ldr	r2, [pc, #128]	@ (800147c <SystemClock_Config+0xcc>)
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <SystemClock_Config+0xcc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001424:	2350      	movs	r3, #80	@ 0x50
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f001 fbd3 	bl	8002be0 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001440:	f000 f9c4 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2102      	movs	r1, #2
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fe35 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800146c:	f000 f9ae 	bl	80017cc <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	@ 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014b8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80014bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ca:	481c      	ldr	r0, [pc, #112]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014cc:	f002 f83a 	bl	8003544 <HAL_TIM_PWM_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014d6:	f000 f979 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4619      	mov	r1, r3
 80014e8:	4814      	ldr	r0, [pc, #80]	@ (800153c <MX_TIM2_Init+0xbc>)
 80014ea:	f002 fc2b 	bl	8003d44 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014f4:	f000 f96a 	bl	80017cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f8:	2360      	movs	r3, #96	@ 0x60
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2208      	movs	r2, #8
 800150c:	4619      	mov	r1, r3
 800150e:	480b      	ldr	r0, [pc, #44]	@ (800153c <MX_TIM2_Init+0xbc>)
 8001510:	f002 f918 	bl	8003744 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800151a:	f000 f957 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <MX_TIM2_Init+0xbc>)
 8001520:	f001 ffb6 	bl	8003490 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001524:	2108      	movs	r1, #8
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_TIM2_Init+0xbc>)
 8001528:	f002 f85c 	bl	80035e4 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <MX_TIM2_Init+0xbc>)
 800152e:	f000 f99b 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000204 	.word	0x20000204

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <MX_USART1_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_USART1_UART_Init+0x4c>)
 8001578:	f002 fc52 	bl	8003e20 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 f923 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000024c 	.word	0x2000024c
 8001590:	40011000 	.word	0x40011000

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <MX_USART2_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015cc:	f002 fc28 	bl	8003e20 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f000 f8f9 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000294 	.word	0x20000294
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_DMA_Init+0x3c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <MX_DMA_Init+0x3c>)
 80015f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2010      	movs	r0, #16
 8001610:	f000 fcdd 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001614:	2010      	movs	r0, #16
 8001616:	f000 fcf6 	bl	8002006 <HAL_NVIC_EnableIRQ>

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a34      	ldr	r2, [pc, #208]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a2d      	ldr	r2, [pc, #180]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <MX_GPIO_Init+0xf0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <MX_GPIO_Init+0xf0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a26      	ldr	r2, [pc, #152]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <MX_GPIO_Init+0xf0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2120      	movs	r1, #32
 8001696:	4821      	ldr	r0, [pc, #132]	@ (800171c <MX_GPIO_Init+0xf4>)
 8001698:	f001 fa56 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800169c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	481b      	ldr	r0, [pc, #108]	@ (8001720 <MX_GPIO_Init+0xf8>)
 80016b4:	f001 f8c4 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016b8:	2320      	movs	r3, #32
 80016ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	4813      	ldr	r0, [pc, #76]	@ (800171c <MX_GPIO_Init+0xf4>)
 80016d0:	f001 f8b6 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016d4:	2308      	movs	r3, #8
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4619      	mov	r1, r3
 80016e8:	480e      	ldr	r0, [pc, #56]	@ (8001724 <MX_GPIO_Init+0xfc>)
 80016ea:	f001 f8a9 	bl	8002840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2009      	movs	r0, #9
 80016f4:	f000 fc6b 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016f8:	2009      	movs	r0, #9
 80016fa:	f000 fc84 	bl	8002006 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2028      	movs	r0, #40	@ 0x28
 8001704:	f000 fc63 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001708:	2028      	movs	r0, #40	@ 0x28
 800170a:	f000 fc7c 	bl	8002006 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, buffer, 1, 0xFFFF);
 8001730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001734:	2201      	movs	r2, #1
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <HAL_UART_RxCpltCallback+0x30>)
 8001738:	4808      	ldr	r0, [pc, #32]	@ (800175c <HAL_UART_RxCpltCallback+0x34>)
 800173a:	f002 fbc1 	bl	8003ec0 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart2, buffer, 16);
 800173e:	2210      	movs	r2, #16
 8001740:	4905      	ldr	r1, [pc, #20]	@ (8001758 <HAL_UART_RxCpltCallback+0x30>)
 8001742:	4806      	ldr	r0, [pc, #24]	@ (800175c <HAL_UART_RxCpltCallback+0x34>)
 8001744:	f002 fc47 	bl	8003fd6 <HAL_UART_Receive_DMA>
	  IsReceived = 1;
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_UART_RxCpltCallback+0x38>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000033c 	.word	0x2000033c
 800175c:	20000294 	.word	0x20000294
 8001760:	20000354 	.word	0x20000354

08001764 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001774:	d104      	bne.n	8001780 <HAL_GPIO_EXTI_Callback+0x1c>
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001776:	2120      	movs	r1, #32
 8001778:	4809      	ldr	r0, [pc, #36]	@ (80017a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800177a:	f001 f9fe 	bl	8002b7a <HAL_GPIO_TogglePin>
 800177e:	e000      	b.n	8001782 <HAL_GPIO_EXTI_Callback+0x1e>
    //BSP_LED_Toggle(LED2_Pin);
  } else {
      __NOP();
 8001780:	bf00      	nop
  }
  if(GPIO_Pin == GPIO_PIN_3) {
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x30>
    counter ++;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_GPIO_EXTI_Callback+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <HAL_GPIO_EXTI_Callback+0x40>)
 8001790:	6013      	str	r3, [r2, #0]
    //BSP_LED_Toggle(LED2_Pin);
  } else {
      __NOP();
  }

}
 8001792:	e000      	b.n	8001796 <HAL_GPIO_EXTI_Callback+0x32>
      __NOP();
 8001794:	bf00      	nop
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40020000 	.word	0x40020000
 80017a4:	2000034c 	.word	0x2000034c

080017a8 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80017b0:	1d39      	adds	r1, r7, #4
 80017b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b6:	2201      	movs	r2, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <__io_putchar+0x20>)
 80017ba:	f002 fb81 	bl	8003ec0 <HAL_UART_Transmit>

  return ch;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000294 	.word	0x20000294

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <Error_Handler+0x8>

080017d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <HAL_MspInit+0x4c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_MspInit+0x4c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001838:	d10d      	bne.n	8001856 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_TIM_PWM_MspInit+0x3c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <HAL_TIM_PWM_MspInit+0x3c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_TIM_PWM_MspInit+0x3c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001888:	d11e      	bne.n	80018c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_TIM_MspPostInit+0x68>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_TIM_MspPostInit+0x68>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_TIM_MspPostInit+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4619      	mov	r1, r3
 80018c2:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <HAL_TIM_MspPostInit+0x6c>)
 80018c4:	f000 ffbc 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020400 	.word	0x40020400

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	@ 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a2c <HAL_UART_MspInit+0x154>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12d      	bne.n	8001956 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a4b      	ldr	r2, [pc, #300]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b49      	ldr	r3, [pc, #292]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	4b45      	ldr	r3, [pc, #276]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a44      	ldr	r2, [pc, #272]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b42      	ldr	r3, [pc, #264]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001932:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4839      	ldr	r0, [pc, #228]	@ (8001a34 <HAL_UART_MspInit+0x15c>)
 8001950:	f000 ff76 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001954:	e066      	b.n	8001a24 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a37      	ldr	r2, [pc, #220]	@ (8001a38 <HAL_UART_MspInit+0x160>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d161      	bne.n	8001a24 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001970:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001984:	4a2a      	ldr	r2, [pc, #168]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6313      	str	r3, [r2, #48]	@ 0x30
 800198c:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_UART_MspInit+0x158>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001998:	230c      	movs	r3, #12
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4820      	ldr	r0, [pc, #128]	@ (8001a34 <HAL_UART_MspInit+0x15c>)
 80019b4:	f000 ff44 	bl	8002840 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80019b8:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019ba:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <HAL_UART_MspInit+0x168>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019f8:	4810      	ldr	r0, [pc, #64]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 80019fa:	f000 fb1f 	bl	800203c <HAL_DMA_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001a04:	f7ff fee2 	bl	80017cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 8001a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_UART_MspInit+0x164>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2026      	movs	r0, #38	@ 0x26
 8001a1a:	f000 fad8 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a1e:	2026      	movs	r0, #38	@ 0x26
 8001a20:	f000 faf1 	bl	8002006 <HAL_NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3730      	adds	r7, #48	@ 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	200002dc 	.word	0x200002dc
 8001a40:	40026088 	.word	0x40026088

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <NMI_Handler+0x4>

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f979 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001aa6:	2008      	movs	r0, #8
 8001aa8:	f001 f882 	bl	8002bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ab6:	f000 fc59 	bl	800236c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200002dc 	.word	0x200002dc

08001ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <USART2_IRQHandler+0x10>)
 8001aca:	f002 faa9 	bl	8004020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000294 	.word	0x20000294

08001ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001adc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ae0:	f001 f866 	bl	8002bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_kill>:

int _kill(int pid, int sig)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b02:	f004 f937 	bl	8005d74 <__errno>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2216      	movs	r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_exit>:

void _exit (int status)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffe7 	bl	8001af8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2a:	bf00      	nop
 8001b2c:	e7fd      	b.n	8001b2a <_exit+0x12>

08001b2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e00a      	b.n	8001b56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b40:	f3af 8000 	nop.w
 8001b44:	4601      	mov	r1, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	60ba      	str	r2, [r7, #8]
 8001b4c:	b2ca      	uxtb	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbf0      	blt.n	8001b40 <_read+0x12>
  }

  return len;
 8001b5e:	687b      	ldr	r3, [r7, #4]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e009      	b.n	8001b8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	60ba      	str	r2, [r7, #8]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe10 	bl	80017a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf1      	blt.n	8001b7a <_write+0x12>
  }
  return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_close>:

int _close(int file)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_isatty>:

int _isatty(int file)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f004 f89c 	bl	8005d74 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000374 	.word	0x20000374
 8001c70:	200004c8 	.word	0x200004c8

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9c:	f7ff ffea 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f004 f85b 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff f95d 	bl	8000f88 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001cdc:	08007ee0 	.word	0x08007ee0
  ldr r2, =_sbss
 8001ce0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ce4:	200004c8 	.word	0x200004c8

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f94f 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fd5a 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f967 	bl	8002022 <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f92f 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000014 	.word	0x20000014
 8001d88:	2000001c 	.word	0x2000001c
 8001d8c:	20000018 	.word	0x20000018

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	2000001c 	.word	0x2000001c
 8001db4:	20000378 	.word	0x20000378

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000378 	.word	0x20000378

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000001c 	.word	0x2000001c

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	@ 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff3e 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff8e 	bl	8001f0c <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5d 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff31 	bl	8001e7c <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff feb6 	bl	8001db8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e099      	b.n	800218c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002078:	e00f      	b.n	800209a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207a:	f7ff fe9d 	bl	8001db8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b05      	cmp	r3, #5
 8002086:	d908      	bls.n	800209a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e078      	b.n	800218c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e8      	bne.n	800207a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_DMA_Init+0x158>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	4313      	orrs	r3, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	2b04      	cmp	r3, #4
 800212c:	d117      	bne.n	800215e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fb01 	bl	8002748 <DMA_CheckFifoParam>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800215a:	2301      	movs	r3, #1
 800215c:	e016      	b.n	800218c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fab8 	bl	80026dc <DMA_CalcBaseAndBitshift>
 800216c:	4603      	mov	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	223f      	movs	r2, #63	@ 0x3f
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f010803f 	.word	0xf010803f

08002198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_DMA_Start_IT+0x26>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e040      	b.n	8002240 <HAL_DMA_Start_IT+0xa8>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d12f      	bne.n	8002232 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fa4a 	bl	8002680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	223f      	movs	r2, #63	@ 0x3f
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0216 	orr.w	r2, r2, #22
 8002206:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e005      	b.n	800223e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002256:	f7ff fdaf 	bl	8001db8 <HAL_GetTick>
 800225a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d008      	beq.n	800227a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e052      	b.n	8002320 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0216 	bic.w	r2, r2, #22
 8002288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002298:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <HAL_DMA_Abort+0x62>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0208 	bic.w	r2, r2, #8
 80022b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	e013      	b.n	80022f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022cc:	f7ff fd74 	bl	8001db8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d90c      	bls.n	80022f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e015      	b.n	8002320 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e4      	bne.n	80022cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	223f      	movs	r2, #63	@ 0x3f
 8002308:	409a      	lsls	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00c      	b.n	8002360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2205      	movs	r2, #5
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002378:	4b8e      	ldr	r3, [pc, #568]	@ (80025b4 <HAL_DMA_IRQHandler+0x248>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a8e      	ldr	r2, [pc, #568]	@ (80025b8 <HAL_DMA_IRQHandler+0x24c>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a9b      	lsrs	r3, r3, #10
 8002384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	2208      	movs	r2, #8
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01a      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	2208      	movs	r2, #8
 80023c6:	409a      	lsls	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	2201      	movs	r2, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d012      	beq.n	800240e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2201      	movs	r2, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	2204      	movs	r2, #4
 8002414:	409a      	lsls	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d012      	beq.n	8002444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00b      	beq.n	8002444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	2204      	movs	r2, #4
 8002432:	409a      	lsls	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f043 0204 	orr.w	r2, r3, #4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	2210      	movs	r2, #16
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d043      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d03c      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	2210      	movs	r2, #16
 8002468:	409a      	lsls	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d018      	beq.n	80024ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d024      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
 800249a:	e01f      	b.n	80024dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e016      	b.n	80024dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0208 	bic.w	r2, r2, #8
 80024ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2220      	movs	r2, #32
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 808f 	beq.w	800260c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8087 	beq.w	800260c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2220      	movs	r2, #32
 8002504:	409a      	lsls	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b05      	cmp	r3, #5
 8002514:	d136      	bne.n	8002584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0216 	bic.w	r2, r2, #22
 8002524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_DMA_IRQHandler+0x1da>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0208 	bic.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	223f      	movs	r2, #63	@ 0x3f
 800255c:	409a      	lsls	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	2b00      	cmp	r3, #0
 8002578:	d07e      	beq.n	8002678 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
        }
        return;
 8002582:	e079      	b.n	8002678 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01d      	beq.n	80025ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d031      	beq.n	800260c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e02c      	b.n	800260c <HAL_DMA_IRQHandler+0x2a0>
 80025b2:	bf00      	nop
 80025b4:	20000014 	.word	0x20000014
 80025b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d023      	beq.n	800260c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
 80025cc:	e01e      	b.n	800260c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10f      	bne.n	80025fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0210 	bic.w	r2, r2, #16
 80025ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	2b00      	cmp	r3, #0
 8002612:	d032      	beq.n	800267a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d022      	beq.n	8002666 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2205      	movs	r2, #5
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3301      	adds	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	d307      	bcc.n	8002654 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f2      	bne.n	8002638 <HAL_DMA_IRQHandler+0x2cc>
 8002652:	e000      	b.n	8002656 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002654:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
 8002676:	e000      	b.n	800267a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002678:	bf00      	nop
    }
  }
}
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800269c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	d108      	bne.n	80026c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026be:	e007      	b.n	80026d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3b10      	subs	r3, #16
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <DMA_CalcBaseAndBitshift+0x64>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026f6:	4a13      	ldr	r2, [pc, #76]	@ (8002744 <DMA_CalcBaseAndBitshift+0x68>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d909      	bls.n	800271e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	659a      	str	r2, [r3, #88]	@ 0x58
 800271c:	e007      	b.n	800272e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	aaaaaaab 	.word	0xaaaaaaab
 8002744:	08007b54 	.word	0x08007b54

08002748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11f      	bne.n	80027a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d856      	bhi.n	8002816 <DMA_CheckFifoParam+0xce>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <DMA_CheckFifoParam+0x28>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	08002781 	.word	0x08002781
 8002774:	08002793 	.word	0x08002793
 8002778:	08002781 	.word	0x08002781
 800277c:	08002817 	.word	0x08002817
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d046      	beq.n	800281a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e043      	b.n	800281a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800279a:	d140      	bne.n	800281e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e03d      	b.n	800281e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027aa:	d121      	bne.n	80027f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d837      	bhi.n	8002822 <DMA_CheckFifoParam+0xda>
 80027b2:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <DMA_CheckFifoParam+0x70>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027cf 	.word	0x080027cf
 80027c0:	080027c9 	.word	0x080027c9
 80027c4:	080027e1 	.word	0x080027e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      break;
 80027cc:	e030      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d025      	beq.n	8002826 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027de:	e022      	b.n	8002826 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027e8:	d11f      	bne.n	800282a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ee:	e01c      	b.n	800282a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d903      	bls.n	80027fe <DMA_CheckFifoParam+0xb6>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d003      	beq.n	8002804 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027fc:	e018      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      break;
 8002802:	e015      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e00b      	b.n	800282e <DMA_CheckFifoParam+0xe6>
      break;
 8002816:	bf00      	nop
 8002818:	e00a      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e008      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e006      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e004      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;   
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
    }
  } 
  
  return status; 
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e159      	b.n	8002b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	f040 8148 	bne.w	8002b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d005      	beq.n	8002892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288e:	2b02      	cmp	r3, #2
 8002890:	d130      	bne.n	80028f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0201 	and.w	r2, r3, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d017      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d123      	bne.n	8002984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a2 	beq.w	8002b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b57      	ldr	r3, [pc, #348]	@ (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	4a56      	ldr	r2, [pc, #344]	@ (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029d6:	4b54      	ldr	r3, [pc, #336]	@ (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e2:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_GPIO_Init+0x2ec>)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a49      	ldr	r2, [pc, #292]	@ (8002b30 <HAL_GPIO_Init+0x2f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x202>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a48      	ldr	r2, [pc, #288]	@ (8002b34 <HAL_GPIO_Init+0x2f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x1fe>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a47      	ldr	r2, [pc, #284]	@ (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x1fa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a46      	ldr	r2, [pc, #280]	@ (8002b3c <HAL_GPIO_Init+0x2fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x1f6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a45      	ldr	r2, [pc, #276]	@ (8002b40 <HAL_GPIO_Init+0x300>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x1f2>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a32:	2307      	movs	r3, #7
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	@ (8002b2c <HAL_GPIO_Init+0x2ec>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a2f      	ldr	r2, [pc, #188]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a24      	ldr	r2, [pc, #144]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a0f      	ldr	r2, [pc, #60]	@ (8002b44 <HAL_GPIO_Init+0x304>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f aea2 	bls.w	800285c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	@ 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	041a      	lsls	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc6:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fdc8 	bl	8001764 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40013c00 	.word	0x40013c00

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e267      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfe:	4b88      	ldr	r3, [pc, #544]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b85      	ldr	r3, [pc, #532]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e242      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6f      	ldr	r2, [pc, #444]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff f88e 	bl	8001db8 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff f88a 	bl	8001db8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e207      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f87a 	bl	8001db8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff f876 	bl	8001db8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b51      	ldr	r3, [pc, #324]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7ff f82f 	bl	8001db8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7ff f82b 	bl	8001db8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a8      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7ff f80e 	bl	8001db8 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7ff f80a 	bl	8001db8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e187      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe ffee 	bl	8001db8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe ffea 	bl	8001db8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e167      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe ffd7 	bl	8001db8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe ffd3 	bl	8001db8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b81      	ldr	r3, [pc, #516]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b77      	ldr	r3, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b74      	ldr	r3, [pc, #464]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe ff93 	bl	8001db8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe ff8f 	bl	8001db8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e10c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ea>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a63      	ldr	r2, [pc, #396]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	4b5c      	ldr	r3, [pc, #368]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eec:	4b58      	ldr	r3, [pc, #352]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a57      	ldr	r2, [pc, #348]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a54      	ldr	r2, [pc, #336]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe ff54 	bl	8001db8 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe ff50 	bl	8001db8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0cb      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe ff3e 	bl	8001db8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe ff3a 	bl	8001db8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0b5      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	4a38      	ldr	r2, [pc, #224]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a1 	beq.w	80030c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d05c      	beq.n	8003044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d141      	bne.n	8003016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe ff0e 	bl	8001db8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe ff0a 	bl	8001db8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	491b      	ldr	r1, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe fee3 	bl	8001db8 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fedf 	bl	8001db8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e05c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x416>
 8003014:	e054      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fecc 	bl	8001db8 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fec8 	bl	8001db8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e038      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x4ec>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fe fdfa 	bl	8001db8 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fe fdf6 	bl	8001db8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fd5a 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	08007b3c 	.word	0x08007b3c
 8003294:	20000014 	.word	0x20000014
 8003298:	20000018 	.word	0x20000018

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b090      	sub	sp, #64	@ 0x40
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b59      	ldr	r3, [pc, #356]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80a1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e09b      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b53      	ldr	r3, [pc, #332]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d4:	e09b      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032da:	e098      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b4a      	ldr	r3, [pc, #296]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003304:	2100      	movs	r1, #0
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003308:	fb03 f201 	mul.w	r2, r3, r1
 800330c:	2300      	movs	r3, #0
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	4413      	add	r3, r2
 8003314:	4a43      	ldr	r2, [pc, #268]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003316:	fba0 1202 	umull	r1, r2, r0, r2
 800331a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800331c:	460a      	mov	r2, r1
 800331e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003322:	4413      	add	r3, r2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003328:	2200      	movs	r2, #0
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003336:	f7fd fcaf 	bl	8000c98 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4613      	mov	r3, r2
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003342:	e053      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003344:	4b35      	ldr	r3, [pc, #212]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	2200      	movs	r2, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	617a      	str	r2, [r7, #20]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	4652      	mov	r2, sl
 800335c:	465b      	mov	r3, fp
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336c:	0150      	lsls	r0, r2, #5
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	ebb2 080a 	subs.w	r8, r2, sl
 8003376:	eb63 090b 	sbc.w	r9, r3, fp
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800338a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800338e:	ebb2 0408 	subs.w	r4, r2, r8
 8003392:	eb63 0509 	sbc.w	r5, r3, r9
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	00eb      	lsls	r3, r5, #3
 80033a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a4:	00e2      	lsls	r2, r4, #3
 80033a6:	4614      	mov	r4, r2
 80033a8:	461d      	mov	r5, r3
 80033aa:	eb14 030a 	adds.w	r3, r4, sl
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	eb45 030b 	adc.w	r3, r5, fp
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d6:	2200      	movs	r2, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e0:	f7fd fc5a 	bl	8000c98 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003410:	4618      	mov	r0, r3
 8003412:	3740      	adds	r7, #64	@ 0x40
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	017d7840 	.word	0x017d7840

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000014 	.word	0x20000014

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003444:	f7ff fff0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4903      	ldr	r1, [pc, #12]	@ (8003464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	08007b4c 	.word	0x08007b4c

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800346c:	f7ff ffdc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08007b4c 	.word	0x08007b4c

08003490 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e03c      	b.n	8003522 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003530 <HAL_TIM_Base_Start+0xa0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d018      	beq.n	80034ec <HAL_TIM_Base_Start+0x5c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d013      	beq.n	80034ec <HAL_TIM_Base_Start+0x5c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003534 <HAL_TIM_Base_Start+0xa4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_TIM_Base_Start+0x5c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a19      	ldr	r2, [pc, #100]	@ (8003538 <HAL_TIM_Base_Start+0xa8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_TIM_Base_Start+0x5c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a17      	ldr	r2, [pc, #92]	@ (800353c <HAL_TIM_Base_Start+0xac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_Base_Start+0x5c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a16      	ldr	r2, [pc, #88]	@ (8003540 <HAL_TIM_Base_Start+0xb0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d111      	bne.n	8003510 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d010      	beq.n	8003520 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	e007      	b.n	8003520 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40014000 	.word	0x40014000

08003544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e041      	b.n	80035da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fe f95c 	bl	8001828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f000 f9a0 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x24>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e022      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d109      	bne.n	8003622 <HAL_TIM_PWM_Start+0x3e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e015      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d109      	bne.n	800363c <HAL_TIM_PWM_Start+0x58>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e008      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e068      	b.n	8003728 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0x82>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003664:	e013      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0x92>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003674:	e00b      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003684:	e003      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fb2e 	bl	8003cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a23      	ldr	r2, [pc, #140]	@ (8003730 <HAL_TIM_PWM_Start+0x14c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <HAL_TIM_PWM_Start+0x14c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d018      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x10e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c8:	d013      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x10e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a19      	ldr	r2, [pc, #100]	@ (8003734 <HAL_TIM_PWM_Start+0x150>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00e      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x10e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HAL_TIM_PWM_Start+0x154>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d009      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x10e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_TIM_PWM_Start+0x158>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x10e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <HAL_TIM_PWM_Start+0x15c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d111      	bne.n	8003716 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d010      	beq.n	8003726 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	e007      	b.n	8003726 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40014000 	.word	0x40014000

08003744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e0ae      	b.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	f200 809f 	bhi.w	80038b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003772:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080038b1 	.word	0x080038b1
 8003780:	080038b1 	.word	0x080038b1
 8003784:	080038b1 	.word	0x080038b1
 8003788:	080037ed 	.word	0x080037ed
 800378c:	080038b1 	.word	0x080038b1
 8003790:	080038b1 	.word	0x080038b1
 8003794:	080038b1 	.word	0x080038b1
 8003798:	0800382f 	.word	0x0800382f
 800379c:	080038b1 	.word	0x080038b1
 80037a0:	080038b1 	.word	0x080038b1
 80037a4:	080038b1 	.word	0x080038b1
 80037a8:	0800386f 	.word	0x0800386f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f914 	bl	80039e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
      break;
 80037ea:	e064      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f95a 	bl	8003aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6999      	ldr	r1, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
      break;
 800382c:	e043      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f9a5 	bl	8003b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0208 	orr.w	r2, r2, #8
 8003848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
      break;
 800386c:	e023      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f9ef 	bl	8003c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3a      	ldr	r2, [pc, #232]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a37      	ldr	r2, [pc, #220]	@ (80039c8 <TIM_Base_SetConfig+0x100>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a36      	ldr	r2, [pc, #216]	@ (80039cc <TIM_Base_SetConfig+0x104>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a35      	ldr	r2, [pc, #212]	@ (80039d0 <TIM_Base_SetConfig+0x108>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <TIM_Base_SetConfig+0x100>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a27      	ldr	r2, [pc, #156]	@ (80039cc <TIM_Base_SetConfig+0x104>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <TIM_Base_SetConfig+0x108>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <TIM_Base_SetConfig+0x10c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <TIM_Base_SetConfig+0x110>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a23      	ldr	r2, [pc, #140]	@ (80039dc <TIM_Base_SetConfig+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]
  }
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 0201 	bic.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0303 	bic.w	r3, r3, #3
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f023 0302 	bic.w	r3, r3, #2
 8003a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <TIM_OC1_SetConfig+0xc8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10c      	bne.n	8003a56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 0308 	bic.w	r3, r3, #8
 8003a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a13      	ldr	r2, [pc, #76]	@ (8003aa8 <TIM_OC1_SetConfig+0xc8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	621a      	str	r2, [r3, #32]
}
 8003a9c:	bf00      	nop
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40010000 	.word	0x40010000

08003aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 0210 	bic.w	r2, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0320 	bic.w	r3, r3, #32
 8003af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <TIM_OC2_SetConfig+0xd4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10d      	bne.n	8003b28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <TIM_OC2_SetConfig+0xd4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d113      	bne.n	8003b58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000

08003b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <TIM_OC3_SetConfig+0xd0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10d      	bne.n	8003bfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <TIM_OC3_SetConfig+0xd0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d113      	bne.n	8003c2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40010000 	.word	0x40010000

08003c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a10      	ldr	r2, [pc, #64]	@ (8003cf4 <TIM_OC4_SetConfig+0x9c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d109      	bne.n	8003ccc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000

08003cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e050      	b.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da8:	d013      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a16      	ldr	r2, [pc, #88]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10c      	bne.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40014000 	.word	0x40014000

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd fd46 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	@ 0x24
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 ff4f 	bl	8004d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d175      	bne.n	8003fcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_UART_Transmit+0x2c>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e06e      	b.n	8003fce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2221      	movs	r2, #33	@ 0x21
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003efe:	f7fd ff5b 	bl	8001db8 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f18:	d108      	bne.n	8003f2c <HAL_UART_Transmit+0x6c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e003      	b.n	8003f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f34:	e02e      	b.n	8003f94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	@ 0x80
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fc27 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e03a      	b.n	8003fce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3302      	adds	r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e007      	b.n	8003f86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1cb      	bne.n	8003f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2140      	movs	r1, #64	@ 0x40
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fbf3 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e006      	b.n	8003fce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d112      	bne.n	8004016 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_UART_Receive_DMA+0x26>
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e00b      	b.n	8004018 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	461a      	mov	r2, r3
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fc1b 	bl	8004848 <UART_Start_Receive_DMA>
 8004012:	4603      	mov	r3, r0
 8004014:	e000      	b.n	8004018 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0ba      	sub	sp, #232	@ 0xe8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800405e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_UART_IRQHandler+0x66>
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fd83 	bl	8004b8a <UART_Receive_IT>
      return;
 8004084:	e25b      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80de 	beq.w	800424c <HAL_UART_IRQHandler+0x22c>
 8004090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80d1 	beq.w	800424c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_UART_IRQHandler+0xae>
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_UART_IRQHandler+0xd2>
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f043 0202 	orr.w	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_UART_IRQHandler+0xf6>
 80040fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d011      	beq.n	8004146 <HAL_UART_IRQHandler+0x126>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800412e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f043 0208 	orr.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 81f2 	beq.w	8004534 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_UART_IRQHandler+0x14e>
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fd0e 	bl	8004b8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004178:	2b40      	cmp	r3, #64	@ 0x40
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_UART_IRQHandler+0x17a>
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04f      	beq.n	800423a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fc16 	bl	80049cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b40      	cmp	r3, #64	@ 0x40
 80041ac:	d141      	bne.n	8004232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1d9      	bne.n	80041ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	4a7e      	ldr	r2, [pc, #504]	@ (8004400 <HAL_UART_IRQHandler+0x3e0>)
 8004208:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f88a 	bl	8002328 <HAL_DMA_Abort_IT>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004224:	4610      	mov	r0, r2
 8004226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	e00e      	b.n	8004248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f99e 	bl	800456c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e00a      	b.n	8004248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f99a 	bl	800456c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	e006      	b.n	8004248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f996 	bl	800456c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004246:	e175      	b.n	8004534 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	bf00      	nop
    return;
 800424a:	e173      	b.n	8004534 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 814f 	bne.w	80044f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8148 	beq.w	80044f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8141 	beq.w	80044f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b40      	cmp	r3, #64	@ 0x40
 8004294:	f040 80b6 	bne.w	8004404 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8145 	beq.w	8004538 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b6:	429a      	cmp	r2, r3
 80042b8:	f080 813e 	bcs.w	8004538 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ce:	f000 8088 	beq.w	80043e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800430a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1d9      	bne.n	80042d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3314      	adds	r3, #20
 8004324:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800432e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004342:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004346:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800434a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e1      	bne.n	800431e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800436a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800436c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3314      	adds	r3, #20
 800437a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800437e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004380:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004384:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800438c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e3      	bne.n	800435a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 80043b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e3      	bne.n	80043a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd ff33 	bl	8002248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8c1 	bl	8004580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043fe:	e09b      	b.n	8004538 <HAL_UART_IRQHandler+0x518>
 8004400:	08004a93 	.word	0x08004a93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 808e 	beq.w	800453c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8089 	beq.w	800453c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800443a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800444e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	623b      	str	r3, [r7, #32]
   return(result);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004486:	633a      	str	r2, [r7, #48]	@ 0x30
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044cc:	61fa      	str	r2, [r7, #28]
 80044ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	617b      	str	r3, [r7, #20]
   return(result);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e3      	bne.n	80044a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f847 	bl	8004580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044f2:	e023      	b.n	800453c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <HAL_UART_IRQHandler+0x4f4>
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fad4 	bl	8004aba <UART_Transmit_IT>
    return;
 8004512:	e014      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <HAL_UART_IRQHandler+0x51e>
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb14 	bl	8004b5a <UART_EndTransmit_IT>
    return;
 8004532:	e004      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
    return;
 8004534:	bf00      	nop
 8004536:	e002      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
      return;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <HAL_UART_IRQHandler+0x51e>
      return;
 800453c:	bf00      	nop
  }
}
 800453e:	37e8      	adds	r7, #232	@ 0xe8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b09c      	sub	sp, #112	@ 0x70
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d172      	bne.n	800469a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80045b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b6:	2200      	movs	r2, #0
 80045b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80045da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	667b      	str	r3, [r7, #100]	@ 0x64
 8004606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3314      	adds	r3, #20
 800460c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800460e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800461c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e5      	bne.n	80045ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3314      	adds	r3, #20
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	623b      	str	r3, [r7, #32]
   return(result);
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004638:	663b      	str	r3, [r7, #96]	@ 0x60
 800463a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004642:	633a      	str	r2, [r7, #48]	@ 0x30
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004658:	2220      	movs	r2, #32
 800465a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	2b01      	cmp	r3, #1
 8004664:	d119      	bne.n	800469a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	60fb      	str	r3, [r7, #12]
   return(result);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f023 0310 	bic.w	r3, r3, #16
 800467c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800467e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004686:	61fa      	str	r2, [r7, #28]
 8004688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	69b9      	ldr	r1, [r7, #24]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	617b      	str	r3, [r7, #20]
   return(result);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469c:	2200      	movs	r2, #0
 800469e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ac:	4619      	mov	r1, r3
 80046ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80046b0:	f7ff ff66 	bl	8004580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046b4:	e002      	b.n	80046bc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80046b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80046b8:	f7fd f836 	bl	8001728 <HAL_UART_RxCpltCallback>
}
 80046bc:	bf00      	nop
 80046be:	3770      	adds	r7, #112	@ 0x70
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff48 	bl	8004580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046f0:	e002      	b.n	80046f8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff ff30 	bl	8004558 <HAL_UART_RxHalfCpltCallback>
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471c:	2b80      	cmp	r3, #128	@ 0x80
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b21      	cmp	r3, #33	@ 0x21
 8004732:	d108      	bne.n	8004746 <UART_DMAError+0x46>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f000 f91b 	bl	800497c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b22      	cmp	r3, #34	@ 0x22
 8004766:	d108      	bne.n	800477a <UART_DMAError+0x7a>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004774:	68b8      	ldr	r0, [r7, #8]
 8004776:	f000 f929 	bl	80049cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f043 0210 	orr.w	r2, r3, #16
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004786:	68b8      	ldr	r0, [r7, #8]
 8004788:	f7ff fef0 	bl	800456c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a4:	e03b      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d037      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fd fb03 	bl	8001db8 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	6a3a      	ldr	r2, [r7, #32]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e03a      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d023      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b80      	cmp	r3, #128	@ 0x80
 80047da:	d020      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b40      	cmp	r3, #64	@ 0x40
 80047e0:	d01d      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d116      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f8e0 	bl	80049cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2208      	movs	r2, #8
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	bf0c      	ite	eq
 800482e:	2301      	moveq	r3, #1
 8004830:	2300      	movne	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	429a      	cmp	r2, r3
 800483a:	d0b4      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b098      	sub	sp, #96	@ 0x60
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2222      	movs	r2, #34	@ 0x22
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	4a3e      	ldr	r2, [pc, #248]	@ (8004970 <UART_Start_Receive_DMA+0x128>)
 8004876:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487c:	4a3d      	ldr	r2, [pc, #244]	@ (8004974 <UART_Start_Receive_DMA+0x12c>)
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	4a3c      	ldr	r2, [pc, #240]	@ (8004978 <UART_Start_Receive_DMA+0x130>)
 8004886:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	2200      	movs	r2, #0
 800488e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	f7fd fc76 	bl	8002198 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d019      	beq.n	80048fe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80048ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80048f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e5      	bne.n	80048ca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	657b      	str	r3, [r7, #84]	@ 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800491e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004948:	653b      	str	r3, [r7, #80]	@ 0x50
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004952:	627a      	str	r2, [r7, #36]	@ 0x24
 8004954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6a39      	ldr	r1, [r7, #32]
 8004958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3760      	adds	r7, #96	@ 0x60
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	08004599 	.word	0x08004599
 8004974:	080046c5 	.word	0x080046c5
 8004978:	08004701 	.word	0x08004701

0800497c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	@ 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	60bb      	str	r3, [r7, #8]
   return(result);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	61ba      	str	r2, [r7, #24]
 80049a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	613b      	str	r3, [r7, #16]
   return(result);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80049c0:	bf00      	nop
 80049c2:	3724      	adds	r7, #36	@ 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b095      	sub	sp, #84	@ 0x54
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d119      	bne.n	8004a78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0310 	bic.w	r3, r3, #16
 8004a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a64:	61ba      	str	r2, [r7, #24]
 8004a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a86:	bf00      	nop
 8004a88:	3754      	adds	r7, #84	@ 0x54
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fd5d 	bl	800456c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b21      	cmp	r3, #33	@ 0x21
 8004acc:	d13e      	bne.n	8004b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad6:	d114      	bne.n	8004b02 <UART_Transmit_IT+0x48>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d110      	bne.n	8004b02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	621a      	str	r2, [r3, #32]
 8004b00:	e008      	b.n	8004b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6211      	str	r1, [r2, #32]
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4619      	mov	r1, r3
 8004b22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fce2 	bl	8004544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08c      	sub	sp, #48	@ 0x30
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b22      	cmp	r3, #34	@ 0x22
 8004b9c:	f040 80ae 	bne.w	8004cfc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba8:	d117      	bne.n	8004bda <UART_Receive_IT+0x50>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bd8:	e026      	b.n	8004c28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bec:	d007      	beq.n	8004bfe <UART_Receive_IT+0x74>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <UART_Receive_IT+0x82>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e008      	b.n	8004c1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4619      	mov	r1, r3
 8004c36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d15d      	bne.n	8004cf8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0220 	bic.w	r2, r2, #32
 8004c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d135      	bne.n	8004cee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca8:	623a      	str	r2, [r7, #32]
 8004caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d10a      	bne.n	8004ce0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fc4a 	bl	8004580 <HAL_UARTEx_RxEventCallback>
 8004cec:	e002      	b.n	8004cf4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fd1a 	bl	8001728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e002      	b.n	8004cfe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	@ 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d0c:	b0c0      	sub	sp, #256	@ 0x100
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	68d9      	ldr	r1, [r3, #12]
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	ea40 0301 	orr.w	r3, r0, r1
 8004d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d60:	f021 010c 	bic.w	r1, r1, #12
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d82:	6999      	ldr	r1, [r3, #24]
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	ea40 0301 	orr.w	r3, r0, r1
 8004d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b8f      	ldr	r3, [pc, #572]	@ (8004fd4 <UART_SetConfig+0x2cc>)
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d005      	beq.n	8004da8 <UART_SetConfig+0xa0>
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b8d      	ldr	r3, [pc, #564]	@ (8004fd8 <UART_SetConfig+0x2d0>)
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d104      	bne.n	8004db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7fe fb5e 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 8004dac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004db0:	e003      	b.n	8004dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004db2:	f7fe fb45 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8004db6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc4:	f040 810c 	bne.w	8004fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dda:	4622      	mov	r2, r4
 8004ddc:	462b      	mov	r3, r5
 8004dde:	1891      	adds	r1, r2, r2
 8004de0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004de2:	415b      	adcs	r3, r3
 8004de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dea:	4621      	mov	r1, r4
 8004dec:	eb12 0801 	adds.w	r8, r2, r1
 8004df0:	4629      	mov	r1, r5
 8004df2:	eb43 0901 	adc.w	r9, r3, r1
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e0a:	4690      	mov	r8, r2
 8004e0c:	4699      	mov	r9, r3
 8004e0e:	4623      	mov	r3, r4
 8004e10:	eb18 0303 	adds.w	r3, r8, r3
 8004e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e18:	462b      	mov	r3, r5
 8004e1a:	eb49 0303 	adc.w	r3, r9, r3
 8004e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e36:	460b      	mov	r3, r1
 8004e38:	18db      	adds	r3, r3, r3
 8004e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	eb42 0303 	adc.w	r3, r2, r3
 8004e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e4c:	f7fb ff24 	bl	8000c98 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4b61      	ldr	r3, [pc, #388]	@ (8004fdc <UART_SetConfig+0x2d4>)
 8004e56:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	011c      	lsls	r4, r3, #4
 8004e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	1891      	adds	r1, r2, r2
 8004e76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e78:	415b      	adcs	r3, r3
 8004e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e80:	4641      	mov	r1, r8
 8004e82:	eb12 0a01 	adds.w	sl, r2, r1
 8004e86:	4649      	mov	r1, r9
 8004e88:	eb43 0b01 	adc.w	fp, r3, r1
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ea0:	4692      	mov	sl, r2
 8004ea2:	469b      	mov	fp, r3
 8004ea4:	4643      	mov	r3, r8
 8004ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8004eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	18db      	adds	r3, r3, r3
 8004ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	eb42 0303 	adc.w	r3, r2, r3
 8004ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ee2:	f7fb fed9 	bl	8000c98 <__aeabi_uldivmod>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	4b3b      	ldr	r3, [pc, #236]	@ (8004fdc <UART_SetConfig+0x2d4>)
 8004eee:	fba3 2301 	umull	r2, r3, r3, r1
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2264      	movs	r2, #100	@ 0x64
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	1acb      	subs	r3, r1, r3
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f02:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <UART_SetConfig+0x2d4>)
 8004f04:	fba3 2302 	umull	r2, r3, r3, r2
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f10:	441c      	add	r4, r3
 8004f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f34:	4641      	mov	r1, r8
 8004f36:	1851      	adds	r1, r2, r1
 8004f38:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	414b      	adcs	r3, r1
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	00cb      	lsls	r3, r1, #3
 8004f50:	4651      	mov	r1, sl
 8004f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f56:	4651      	mov	r1, sl
 8004f58:	00ca      	lsls	r2, r1, #3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4642      	mov	r2, r8
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f68:	464b      	mov	r3, r9
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f88:	460b      	mov	r3, r1
 8004f8a:	18db      	adds	r3, r3, r3
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f8e:	4613      	mov	r3, r2
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f9e:	f7fb fe7b 	bl	8000c98 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <UART_SetConfig+0x2d4>)
 8004fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	2164      	movs	r1, #100	@ 0x64
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	3332      	adds	r3, #50	@ 0x32
 8004fba:	4a08      	ldr	r2, [pc, #32]	@ (8004fdc <UART_SetConfig+0x2d4>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	f003 0207 	and.w	r2, r3, #7
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4422      	add	r2, r4
 8004fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fd0:	e106      	b.n	80051e0 <UART_SetConfig+0x4d8>
 8004fd2:	bf00      	nop
 8004fd4:	40011000 	.word	0x40011000
 8004fd8:	40011400 	.word	0x40011400
 8004fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	6239      	str	r1, [r7, #32]
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005002:	4641      	mov	r1, r8
 8005004:	1854      	adds	r4, r2, r1
 8005006:	4649      	mov	r1, r9
 8005008:	eb43 0501 	adc.w	r5, r3, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	00eb      	lsls	r3, r5, #3
 8005016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800501a:	00e2      	lsls	r2, r4, #3
 800501c:	4614      	mov	r4, r2
 800501e:	461d      	mov	r5, r3
 8005020:	4643      	mov	r3, r8
 8005022:	18e3      	adds	r3, r4, r3
 8005024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005028:	464b      	mov	r3, r9
 800502a:	eb45 0303 	adc.w	r3, r5, r3
 800502e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800503e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800504e:	4629      	mov	r1, r5
 8005050:	008b      	lsls	r3, r1, #2
 8005052:	4621      	mov	r1, r4
 8005054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005058:	4621      	mov	r1, r4
 800505a:	008a      	lsls	r2, r1, #2
 800505c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005060:	f7fb fe1a 	bl	8000c98 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4b60      	ldr	r3, [pc, #384]	@ (80051ec <UART_SetConfig+0x4e4>)
 800506a:	fba3 2302 	umull	r2, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	011c      	lsls	r4, r3, #4
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005076:	2200      	movs	r2, #0
 8005078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800507c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	61b9      	str	r1, [r7, #24]
 800508c:	415b      	adcs	r3, r3
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005094:	4641      	mov	r1, r8
 8005096:	1851      	adds	r1, r2, r1
 8005098:	6139      	str	r1, [r7, #16]
 800509a:	4649      	mov	r1, r9
 800509c:	414b      	adcs	r3, r1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050ac:	4659      	mov	r1, fp
 80050ae:	00cb      	lsls	r3, r1, #3
 80050b0:	4651      	mov	r1, sl
 80050b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b6:	4651      	mov	r1, sl
 80050b8:	00ca      	lsls	r2, r1, #3
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	4642      	mov	r2, r8
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050c8:	464b      	mov	r3, r9
 80050ca:	460a      	mov	r2, r1
 80050cc:	eb42 0303 	adc.w	r3, r2, r3
 80050d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050ec:	4649      	mov	r1, r9
 80050ee:	008b      	lsls	r3, r1, #2
 80050f0:	4641      	mov	r1, r8
 80050f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f6:	4641      	mov	r1, r8
 80050f8:	008a      	lsls	r2, r1, #2
 80050fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050fe:	f7fb fdcb 	bl	8000c98 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4611      	mov	r1, r2
 8005108:	4b38      	ldr	r3, [pc, #224]	@ (80051ec <UART_SetConfig+0x4e4>)
 800510a:	fba3 2301 	umull	r2, r3, r3, r1
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2264      	movs	r2, #100	@ 0x64
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	1acb      	subs	r3, r1, r3
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	3332      	adds	r3, #50	@ 0x32
 800511c:	4a33      	ldr	r2, [pc, #204]	@ (80051ec <UART_SetConfig+0x4e4>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005128:	441c      	add	r4, r3
 800512a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512e:	2200      	movs	r2, #0
 8005130:	673b      	str	r3, [r7, #112]	@ 0x70
 8005132:	677a      	str	r2, [r7, #116]	@ 0x74
 8005134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	415b      	adcs	r3, r3
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005148:	4641      	mov	r1, r8
 800514a:	1851      	adds	r1, r2, r1
 800514c:	6039      	str	r1, [r7, #0]
 800514e:	4649      	mov	r1, r9
 8005150:	414b      	adcs	r3, r1
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005160:	4659      	mov	r1, fp
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516a:	4651      	mov	r1, sl
 800516c:	00ca      	lsls	r2, r1, #3
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4603      	mov	r3, r0
 8005174:	4642      	mov	r2, r8
 8005176:	189b      	adds	r3, r3, r2
 8005178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800517a:	464b      	mov	r3, r9
 800517c:	460a      	mov	r2, r1
 800517e:	eb42 0303 	adc.w	r3, r2, r3
 8005182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	663b      	str	r3, [r7, #96]	@ 0x60
 800518e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800519c:	4649      	mov	r1, r9
 800519e:	008b      	lsls	r3, r1, #2
 80051a0:	4641      	mov	r1, r8
 80051a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a6:	4641      	mov	r1, r8
 80051a8:	008a      	lsls	r2, r1, #2
 80051aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ae:	f7fb fd73 	bl	8000c98 <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <UART_SetConfig+0x4e4>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	2164      	movs	r1, #100	@ 0x64
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	3332      	adds	r3, #50	@ 0x32
 80051ca:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <UART_SetConfig+0x4e4>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4422      	add	r2, r4
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051e6:	46bd      	mov	sp, r7
 80051e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ec:	51eb851f 	.word	0x51eb851f

080051f0 <__cvt>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	ec57 6b10 	vmov	r6, r7, d0
 80051f8:	2f00      	cmp	r7, #0
 80051fa:	460c      	mov	r4, r1
 80051fc:	4619      	mov	r1, r3
 80051fe:	463b      	mov	r3, r7
 8005200:	bfbb      	ittet	lt
 8005202:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005206:	461f      	movlt	r7, r3
 8005208:	2300      	movge	r3, #0
 800520a:	232d      	movlt	r3, #45	@ 0x2d
 800520c:	700b      	strb	r3, [r1, #0]
 800520e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005210:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005214:	4691      	mov	r9, r2
 8005216:	f023 0820 	bic.w	r8, r3, #32
 800521a:	bfbc      	itt	lt
 800521c:	4632      	movlt	r2, r6
 800521e:	4616      	movlt	r6, r2
 8005220:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005224:	d005      	beq.n	8005232 <__cvt+0x42>
 8005226:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800522a:	d100      	bne.n	800522e <__cvt+0x3e>
 800522c:	3401      	adds	r4, #1
 800522e:	2102      	movs	r1, #2
 8005230:	e000      	b.n	8005234 <__cvt+0x44>
 8005232:	2103      	movs	r1, #3
 8005234:	ab03      	add	r3, sp, #12
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	ab02      	add	r3, sp, #8
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	ec47 6b10 	vmov	d0, r6, r7
 8005240:	4653      	mov	r3, sl
 8005242:	4622      	mov	r2, r4
 8005244:	f000 fe4c 	bl	8005ee0 <_dtoa_r>
 8005248:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800524c:	4605      	mov	r5, r0
 800524e:	d119      	bne.n	8005284 <__cvt+0x94>
 8005250:	f019 0f01 	tst.w	r9, #1
 8005254:	d00e      	beq.n	8005274 <__cvt+0x84>
 8005256:	eb00 0904 	add.w	r9, r0, r4
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	4630      	mov	r0, r6
 8005260:	4639      	mov	r1, r7
 8005262:	f7fb fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8005266:	b108      	cbz	r0, 800526c <__cvt+0x7c>
 8005268:	f8cd 900c 	str.w	r9, [sp, #12]
 800526c:	2230      	movs	r2, #48	@ 0x30
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	454b      	cmp	r3, r9
 8005272:	d31e      	bcc.n	80052b2 <__cvt+0xc2>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005278:	1b5b      	subs	r3, r3, r5
 800527a:	4628      	mov	r0, r5
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	b004      	add	sp, #16
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005288:	eb00 0904 	add.w	r9, r0, r4
 800528c:	d1e5      	bne.n	800525a <__cvt+0x6a>
 800528e:	7803      	ldrb	r3, [r0, #0]
 8005290:	2b30      	cmp	r3, #48	@ 0x30
 8005292:	d10a      	bne.n	80052aa <__cvt+0xba>
 8005294:	2200      	movs	r2, #0
 8005296:	2300      	movs	r3, #0
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	f7fb fc1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80052a0:	b918      	cbnz	r0, 80052aa <__cvt+0xba>
 80052a2:	f1c4 0401 	rsb	r4, r4, #1
 80052a6:	f8ca 4000 	str.w	r4, [sl]
 80052aa:	f8da 3000 	ldr.w	r3, [sl]
 80052ae:	4499      	add	r9, r3
 80052b0:	e7d3      	b.n	800525a <__cvt+0x6a>
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	9103      	str	r1, [sp, #12]
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e7d9      	b.n	800526e <__cvt+0x7e>

080052ba <__exponent>:
 80052ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052bc:	2900      	cmp	r1, #0
 80052be:	bfba      	itte	lt
 80052c0:	4249      	neglt	r1, r1
 80052c2:	232d      	movlt	r3, #45	@ 0x2d
 80052c4:	232b      	movge	r3, #43	@ 0x2b
 80052c6:	2909      	cmp	r1, #9
 80052c8:	7002      	strb	r2, [r0, #0]
 80052ca:	7043      	strb	r3, [r0, #1]
 80052cc:	dd29      	ble.n	8005322 <__exponent+0x68>
 80052ce:	f10d 0307 	add.w	r3, sp, #7
 80052d2:	461d      	mov	r5, r3
 80052d4:	270a      	movs	r7, #10
 80052d6:	461a      	mov	r2, r3
 80052d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80052dc:	fb07 1416 	mls	r4, r7, r6, r1
 80052e0:	3430      	adds	r4, #48	@ 0x30
 80052e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052e6:	460c      	mov	r4, r1
 80052e8:	2c63      	cmp	r4, #99	@ 0x63
 80052ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80052ee:	4631      	mov	r1, r6
 80052f0:	dcf1      	bgt.n	80052d6 <__exponent+0x1c>
 80052f2:	3130      	adds	r1, #48	@ 0x30
 80052f4:	1e94      	subs	r4, r2, #2
 80052f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052fa:	1c41      	adds	r1, r0, #1
 80052fc:	4623      	mov	r3, r4
 80052fe:	42ab      	cmp	r3, r5
 8005300:	d30a      	bcc.n	8005318 <__exponent+0x5e>
 8005302:	f10d 0309 	add.w	r3, sp, #9
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	42ac      	cmp	r4, r5
 800530a:	bf88      	it	hi
 800530c:	2300      	movhi	r3, #0
 800530e:	3302      	adds	r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	1a18      	subs	r0, r3, r0
 8005314:	b003      	add	sp, #12
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	f813 6b01 	ldrb.w	r6, [r3], #1
 800531c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005320:	e7ed      	b.n	80052fe <__exponent+0x44>
 8005322:	2330      	movs	r3, #48	@ 0x30
 8005324:	3130      	adds	r1, #48	@ 0x30
 8005326:	7083      	strb	r3, [r0, #2]
 8005328:	70c1      	strb	r1, [r0, #3]
 800532a:	1d03      	adds	r3, r0, #4
 800532c:	e7f1      	b.n	8005312 <__exponent+0x58>
	...

08005330 <_printf_float>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	b08d      	sub	sp, #52	@ 0x34
 8005336:	460c      	mov	r4, r1
 8005338:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800533c:	4616      	mov	r6, r2
 800533e:	461f      	mov	r7, r3
 8005340:	4605      	mov	r5, r0
 8005342:	f000 fccd 	bl	8005ce0 <_localeconv_r>
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fa ff98 	bl	8000280 <strlen>
 8005350:	2300      	movs	r3, #0
 8005352:	930a      	str	r3, [sp, #40]	@ 0x28
 8005354:	f8d8 3000 	ldr.w	r3, [r8]
 8005358:	9005      	str	r0, [sp, #20]
 800535a:	3307      	adds	r3, #7
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	f103 0208 	add.w	r2, r3, #8
 8005364:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005368:	f8d4 b000 	ldr.w	fp, [r4]
 800536c:	f8c8 2000 	str.w	r2, [r8]
 8005370:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005374:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005378:	9307      	str	r3, [sp, #28]
 800537a:	f8cd 8018 	str.w	r8, [sp, #24]
 800537e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005386:	4b9c      	ldr	r3, [pc, #624]	@ (80055f8 <_printf_float+0x2c8>)
 8005388:	f04f 32ff 	mov.w	r2, #4294967295
 800538c:	f7fb fbd6 	bl	8000b3c <__aeabi_dcmpun>
 8005390:	bb70      	cbnz	r0, 80053f0 <_printf_float+0xc0>
 8005392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005396:	4b98      	ldr	r3, [pc, #608]	@ (80055f8 <_printf_float+0x2c8>)
 8005398:	f04f 32ff 	mov.w	r2, #4294967295
 800539c:	f7fb fbb0 	bl	8000b00 <__aeabi_dcmple>
 80053a0:	bb30      	cbnz	r0, 80053f0 <_printf_float+0xc0>
 80053a2:	2200      	movs	r2, #0
 80053a4:	2300      	movs	r3, #0
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb fb9f 	bl	8000aec <__aeabi_dcmplt>
 80053ae:	b110      	cbz	r0, 80053b6 <_printf_float+0x86>
 80053b0:	232d      	movs	r3, #45	@ 0x2d
 80053b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b6:	4a91      	ldr	r2, [pc, #580]	@ (80055fc <_printf_float+0x2cc>)
 80053b8:	4b91      	ldr	r3, [pc, #580]	@ (8005600 <_printf_float+0x2d0>)
 80053ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053be:	bf94      	ite	ls
 80053c0:	4690      	movls	r8, r2
 80053c2:	4698      	movhi	r8, r3
 80053c4:	2303      	movs	r3, #3
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	f02b 0304 	bic.w	r3, fp, #4
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	f04f 0900 	mov.w	r9, #0
 80053d2:	9700      	str	r7, [sp, #0]
 80053d4:	4633      	mov	r3, r6
 80053d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80053d8:	4621      	mov	r1, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f9d2 	bl	8005784 <_printf_common>
 80053e0:	3001      	adds	r0, #1
 80053e2:	f040 808d 	bne.w	8005500 <_printf_float+0x1d0>
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	b00d      	add	sp, #52	@ 0x34
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f0:	4642      	mov	r2, r8
 80053f2:	464b      	mov	r3, r9
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fb fba0 	bl	8000b3c <__aeabi_dcmpun>
 80053fc:	b140      	cbz	r0, 8005410 <_printf_float+0xe0>
 80053fe:	464b      	mov	r3, r9
 8005400:	2b00      	cmp	r3, #0
 8005402:	bfbc      	itt	lt
 8005404:	232d      	movlt	r3, #45	@ 0x2d
 8005406:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800540a:	4a7e      	ldr	r2, [pc, #504]	@ (8005604 <_printf_float+0x2d4>)
 800540c:	4b7e      	ldr	r3, [pc, #504]	@ (8005608 <_printf_float+0x2d8>)
 800540e:	e7d4      	b.n	80053ba <_printf_float+0x8a>
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005416:	9206      	str	r2, [sp, #24]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	d13b      	bne.n	8005494 <_printf_float+0x164>
 800541c:	2306      	movs	r3, #6
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005424:	2300      	movs	r3, #0
 8005426:	6022      	str	r2, [r4, #0]
 8005428:	9303      	str	r3, [sp, #12]
 800542a:	ab0a      	add	r3, sp, #40	@ 0x28
 800542c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005430:	ab09      	add	r3, sp, #36	@ 0x24
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	ec49 8b10 	vmov	d0, r8, r9
 800543a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800543e:	4628      	mov	r0, r5
 8005440:	f7ff fed6 	bl	80051f0 <__cvt>
 8005444:	9b06      	ldr	r3, [sp, #24]
 8005446:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005448:	2b47      	cmp	r3, #71	@ 0x47
 800544a:	4680      	mov	r8, r0
 800544c:	d129      	bne.n	80054a2 <_printf_float+0x172>
 800544e:	1cc8      	adds	r0, r1, #3
 8005450:	db02      	blt.n	8005458 <_printf_float+0x128>
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	4299      	cmp	r1, r3
 8005456:	dd41      	ble.n	80054dc <_printf_float+0x1ac>
 8005458:	f1aa 0a02 	sub.w	sl, sl, #2
 800545c:	fa5f fa8a 	uxtb.w	sl, sl
 8005460:	3901      	subs	r1, #1
 8005462:	4652      	mov	r2, sl
 8005464:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005468:	9109      	str	r1, [sp, #36]	@ 0x24
 800546a:	f7ff ff26 	bl	80052ba <__exponent>
 800546e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005470:	1813      	adds	r3, r2, r0
 8005472:	2a01      	cmp	r2, #1
 8005474:	4681      	mov	r9, r0
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	dc02      	bgt.n	8005480 <_printf_float+0x150>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	07d2      	lsls	r2, r2, #31
 800547e:	d501      	bpl.n	8005484 <_printf_float+0x154>
 8005480:	3301      	adds	r3, #1
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0a2      	beq.n	80053d2 <_printf_float+0xa2>
 800548c:	232d      	movs	r3, #45	@ 0x2d
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005492:	e79e      	b.n	80053d2 <_printf_float+0xa2>
 8005494:	9a06      	ldr	r2, [sp, #24]
 8005496:	2a47      	cmp	r2, #71	@ 0x47
 8005498:	d1c2      	bne.n	8005420 <_printf_float+0xf0>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1c0      	bne.n	8005420 <_printf_float+0xf0>
 800549e:	2301      	movs	r3, #1
 80054a0:	e7bd      	b.n	800541e <_printf_float+0xee>
 80054a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054a6:	d9db      	bls.n	8005460 <_printf_float+0x130>
 80054a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054ac:	d118      	bne.n	80054e0 <_printf_float+0x1b0>
 80054ae:	2900      	cmp	r1, #0
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	dd0b      	ble.n	80054cc <_printf_float+0x19c>
 80054b4:	6121      	str	r1, [r4, #16]
 80054b6:	b913      	cbnz	r3, 80054be <_printf_float+0x18e>
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	07d0      	lsls	r0, r2, #31
 80054bc:	d502      	bpl.n	80054c4 <_printf_float+0x194>
 80054be:	3301      	adds	r3, #1
 80054c0:	440b      	add	r3, r1
 80054c2:	6123      	str	r3, [r4, #16]
 80054c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054c6:	f04f 0900 	mov.w	r9, #0
 80054ca:	e7db      	b.n	8005484 <_printf_float+0x154>
 80054cc:	b913      	cbnz	r3, 80054d4 <_printf_float+0x1a4>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	07d2      	lsls	r2, r2, #31
 80054d2:	d501      	bpl.n	80054d8 <_printf_float+0x1a8>
 80054d4:	3302      	adds	r3, #2
 80054d6:	e7f4      	b.n	80054c2 <_printf_float+0x192>
 80054d8:	2301      	movs	r3, #1
 80054da:	e7f2      	b.n	80054c2 <_printf_float+0x192>
 80054dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054e2:	4299      	cmp	r1, r3
 80054e4:	db05      	blt.n	80054f2 <_printf_float+0x1c2>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	6121      	str	r1, [r4, #16]
 80054ea:	07d8      	lsls	r0, r3, #31
 80054ec:	d5ea      	bpl.n	80054c4 <_printf_float+0x194>
 80054ee:	1c4b      	adds	r3, r1, #1
 80054f0:	e7e7      	b.n	80054c2 <_printf_float+0x192>
 80054f2:	2900      	cmp	r1, #0
 80054f4:	bfd4      	ite	le
 80054f6:	f1c1 0202 	rsble	r2, r1, #2
 80054fa:	2201      	movgt	r2, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	e7e0      	b.n	80054c2 <_printf_float+0x192>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	055a      	lsls	r2, r3, #21
 8005504:	d407      	bmi.n	8005516 <_printf_float+0x1e6>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	4642      	mov	r2, r8
 800550a:	4631      	mov	r1, r6
 800550c:	4628      	mov	r0, r5
 800550e:	47b8      	blx	r7
 8005510:	3001      	adds	r0, #1
 8005512:	d12b      	bne.n	800556c <_printf_float+0x23c>
 8005514:	e767      	b.n	80053e6 <_printf_float+0xb6>
 8005516:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800551a:	f240 80dd 	bls.w	80056d8 <_printf_float+0x3a8>
 800551e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	f7fb fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 800552a:	2800      	cmp	r0, #0
 800552c:	d033      	beq.n	8005596 <_printf_float+0x266>
 800552e:	4a37      	ldr	r2, [pc, #220]	@ (800560c <_printf_float+0x2dc>)
 8005530:	2301      	movs	r3, #1
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	47b8      	blx	r7
 8005538:	3001      	adds	r0, #1
 800553a:	f43f af54 	beq.w	80053e6 <_printf_float+0xb6>
 800553e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005542:	4543      	cmp	r3, r8
 8005544:	db02      	blt.n	800554c <_printf_float+0x21c>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	07d8      	lsls	r0, r3, #31
 800554a:	d50f      	bpl.n	800556c <_printf_float+0x23c>
 800554c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005550:	4631      	mov	r1, r6
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	f43f af45 	beq.w	80053e6 <_printf_float+0xb6>
 800555c:	f04f 0900 	mov.w	r9, #0
 8005560:	f108 38ff 	add.w	r8, r8, #4294967295
 8005564:	f104 0a1a 	add.w	sl, r4, #26
 8005568:	45c8      	cmp	r8, r9
 800556a:	dc09      	bgt.n	8005580 <_printf_float+0x250>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	079b      	lsls	r3, r3, #30
 8005570:	f100 8103 	bmi.w	800577a <_printf_float+0x44a>
 8005574:	68e0      	ldr	r0, [r4, #12]
 8005576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005578:	4298      	cmp	r0, r3
 800557a:	bfb8      	it	lt
 800557c:	4618      	movlt	r0, r3
 800557e:	e734      	b.n	80053ea <_printf_float+0xba>
 8005580:	2301      	movs	r3, #1
 8005582:	4652      	mov	r2, sl
 8005584:	4631      	mov	r1, r6
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	f43f af2b 	beq.w	80053e6 <_printf_float+0xb6>
 8005590:	f109 0901 	add.w	r9, r9, #1
 8005594:	e7e8      	b.n	8005568 <_printf_float+0x238>
 8005596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	dc39      	bgt.n	8005610 <_printf_float+0x2e0>
 800559c:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <_printf_float+0x2dc>)
 800559e:	2301      	movs	r3, #1
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f af1d 	beq.w	80053e6 <_printf_float+0xb6>
 80055ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055b0:	ea59 0303 	orrs.w	r3, r9, r3
 80055b4:	d102      	bne.n	80055bc <_printf_float+0x28c>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	07d9      	lsls	r1, r3, #31
 80055ba:	d5d7      	bpl.n	800556c <_printf_float+0x23c>
 80055bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c0:	4631      	mov	r1, r6
 80055c2:	4628      	mov	r0, r5
 80055c4:	47b8      	blx	r7
 80055c6:	3001      	adds	r0, #1
 80055c8:	f43f af0d 	beq.w	80053e6 <_printf_float+0xb6>
 80055cc:	f04f 0a00 	mov.w	sl, #0
 80055d0:	f104 0b1a 	add.w	fp, r4, #26
 80055d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d6:	425b      	negs	r3, r3
 80055d8:	4553      	cmp	r3, sl
 80055da:	dc01      	bgt.n	80055e0 <_printf_float+0x2b0>
 80055dc:	464b      	mov	r3, r9
 80055de:	e793      	b.n	8005508 <_printf_float+0x1d8>
 80055e0:	2301      	movs	r3, #1
 80055e2:	465a      	mov	r2, fp
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f aefb 	beq.w	80053e6 <_printf_float+0xb6>
 80055f0:	f10a 0a01 	add.w	sl, sl, #1
 80055f4:	e7ee      	b.n	80055d4 <_printf_float+0x2a4>
 80055f6:	bf00      	nop
 80055f8:	7fefffff 	.word	0x7fefffff
 80055fc:	08007b5c 	.word	0x08007b5c
 8005600:	08007b60 	.word	0x08007b60
 8005604:	08007b64 	.word	0x08007b64
 8005608:	08007b68 	.word	0x08007b68
 800560c:	08007b6c 	.word	0x08007b6c
 8005610:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005612:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005616:	4553      	cmp	r3, sl
 8005618:	bfa8      	it	ge
 800561a:	4653      	movge	r3, sl
 800561c:	2b00      	cmp	r3, #0
 800561e:	4699      	mov	r9, r3
 8005620:	dc36      	bgt.n	8005690 <_printf_float+0x360>
 8005622:	f04f 0b00 	mov.w	fp, #0
 8005626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800562a:	f104 021a 	add.w	r2, r4, #26
 800562e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005630:	9306      	str	r3, [sp, #24]
 8005632:	eba3 0309 	sub.w	r3, r3, r9
 8005636:	455b      	cmp	r3, fp
 8005638:	dc31      	bgt.n	800569e <_printf_float+0x36e>
 800563a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800563c:	459a      	cmp	sl, r3
 800563e:	dc3a      	bgt.n	80056b6 <_printf_float+0x386>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	07da      	lsls	r2, r3, #31
 8005644:	d437      	bmi.n	80056b6 <_printf_float+0x386>
 8005646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005648:	ebaa 0903 	sub.w	r9, sl, r3
 800564c:	9b06      	ldr	r3, [sp, #24]
 800564e:	ebaa 0303 	sub.w	r3, sl, r3
 8005652:	4599      	cmp	r9, r3
 8005654:	bfa8      	it	ge
 8005656:	4699      	movge	r9, r3
 8005658:	f1b9 0f00 	cmp.w	r9, #0
 800565c:	dc33      	bgt.n	80056c6 <_printf_float+0x396>
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005666:	f104 0b1a 	add.w	fp, r4, #26
 800566a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566c:	ebaa 0303 	sub.w	r3, sl, r3
 8005670:	eba3 0309 	sub.w	r3, r3, r9
 8005674:	4543      	cmp	r3, r8
 8005676:	f77f af79 	ble.w	800556c <_printf_float+0x23c>
 800567a:	2301      	movs	r3, #1
 800567c:	465a      	mov	r2, fp
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	f43f aeae 	beq.w	80053e6 <_printf_float+0xb6>
 800568a:	f108 0801 	add.w	r8, r8, #1
 800568e:	e7ec      	b.n	800566a <_printf_float+0x33a>
 8005690:	4642      	mov	r2, r8
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	d1c2      	bne.n	8005622 <_printf_float+0x2f2>
 800569c:	e6a3      	b.n	80053e6 <_printf_float+0xb6>
 800569e:	2301      	movs	r3, #1
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	9206      	str	r2, [sp, #24]
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	f43f ae9c 	beq.w	80053e6 <_printf_float+0xb6>
 80056ae:	9a06      	ldr	r2, [sp, #24]
 80056b0:	f10b 0b01 	add.w	fp, fp, #1
 80056b4:	e7bb      	b.n	800562e <_printf_float+0x2fe>
 80056b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	d1c0      	bne.n	8005646 <_printf_float+0x316>
 80056c4:	e68f      	b.n	80053e6 <_printf_float+0xb6>
 80056c6:	9a06      	ldr	r2, [sp, #24]
 80056c8:	464b      	mov	r3, r9
 80056ca:	4442      	add	r2, r8
 80056cc:	4631      	mov	r1, r6
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b8      	blx	r7
 80056d2:	3001      	adds	r0, #1
 80056d4:	d1c3      	bne.n	800565e <_printf_float+0x32e>
 80056d6:	e686      	b.n	80053e6 <_printf_float+0xb6>
 80056d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056dc:	f1ba 0f01 	cmp.w	sl, #1
 80056e0:	dc01      	bgt.n	80056e6 <_printf_float+0x3b6>
 80056e2:	07db      	lsls	r3, r3, #31
 80056e4:	d536      	bpl.n	8005754 <_printf_float+0x424>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4642      	mov	r2, r8
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f ae78 	beq.w	80053e6 <_printf_float+0xb6>
 80056f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f ae70 	beq.w	80053e6 <_printf_float+0xb6>
 8005706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800570a:	2200      	movs	r2, #0
 800570c:	2300      	movs	r3, #0
 800570e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005712:	f7fb f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005716:	b9c0      	cbnz	r0, 800574a <_printf_float+0x41a>
 8005718:	4653      	mov	r3, sl
 800571a:	f108 0201 	add.w	r2, r8, #1
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	d10c      	bne.n	8005742 <_printf_float+0x412>
 8005728:	e65d      	b.n	80053e6 <_printf_float+0xb6>
 800572a:	2301      	movs	r3, #1
 800572c:	465a      	mov	r2, fp
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f ae56 	beq.w	80053e6 <_printf_float+0xb6>
 800573a:	f108 0801 	add.w	r8, r8, #1
 800573e:	45d0      	cmp	r8, sl
 8005740:	dbf3      	blt.n	800572a <_printf_float+0x3fa>
 8005742:	464b      	mov	r3, r9
 8005744:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005748:	e6df      	b.n	800550a <_printf_float+0x1da>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	f104 0b1a 	add.w	fp, r4, #26
 8005752:	e7f4      	b.n	800573e <_printf_float+0x40e>
 8005754:	2301      	movs	r3, #1
 8005756:	4642      	mov	r2, r8
 8005758:	e7e1      	b.n	800571e <_printf_float+0x3ee>
 800575a:	2301      	movs	r3, #1
 800575c:	464a      	mov	r2, r9
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f ae3e 	beq.w	80053e6 <_printf_float+0xb6>
 800576a:	f108 0801 	add.w	r8, r8, #1
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005772:	1a5b      	subs	r3, r3, r1
 8005774:	4543      	cmp	r3, r8
 8005776:	dcf0      	bgt.n	800575a <_printf_float+0x42a>
 8005778:	e6fc      	b.n	8005574 <_printf_float+0x244>
 800577a:	f04f 0800 	mov.w	r8, #0
 800577e:	f104 0919 	add.w	r9, r4, #25
 8005782:	e7f4      	b.n	800576e <_printf_float+0x43e>

08005784 <_printf_common>:
 8005784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005788:	4616      	mov	r6, r2
 800578a:	4698      	mov	r8, r3
 800578c:	688a      	ldr	r2, [r1, #8]
 800578e:	690b      	ldr	r3, [r1, #16]
 8005790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005794:	4293      	cmp	r3, r2
 8005796:	bfb8      	it	lt
 8005798:	4613      	movlt	r3, r2
 800579a:	6033      	str	r3, [r6, #0]
 800579c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057a0:	4607      	mov	r7, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	b10a      	cbz	r2, 80057aa <_printf_common+0x26>
 80057a6:	3301      	adds	r3, #1
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	0699      	lsls	r1, r3, #26
 80057ae:	bf42      	ittt	mi
 80057b0:	6833      	ldrmi	r3, [r6, #0]
 80057b2:	3302      	addmi	r3, #2
 80057b4:	6033      	strmi	r3, [r6, #0]
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	f015 0506 	ands.w	r5, r5, #6
 80057bc:	d106      	bne.n	80057cc <_printf_common+0x48>
 80057be:	f104 0a19 	add.w	sl, r4, #25
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	6832      	ldr	r2, [r6, #0]
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	42ab      	cmp	r3, r5
 80057ca:	dc26      	bgt.n	800581a <_printf_common+0x96>
 80057cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	3b00      	subs	r3, #0
 80057d4:	bf18      	it	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	0692      	lsls	r2, r2, #26
 80057da:	d42b      	bmi.n	8005834 <_printf_common+0xb0>
 80057dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057e0:	4641      	mov	r1, r8
 80057e2:	4638      	mov	r0, r7
 80057e4:	47c8      	blx	r9
 80057e6:	3001      	adds	r0, #1
 80057e8:	d01e      	beq.n	8005828 <_printf_common+0xa4>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	6922      	ldr	r2, [r4, #16]
 80057ee:	f003 0306 	and.w	r3, r3, #6
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	bf02      	ittt	eq
 80057f6:	68e5      	ldreq	r5, [r4, #12]
 80057f8:	6833      	ldreq	r3, [r6, #0]
 80057fa:	1aed      	subeq	r5, r5, r3
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	bf0c      	ite	eq
 8005800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005804:	2500      	movne	r5, #0
 8005806:	4293      	cmp	r3, r2
 8005808:	bfc4      	itt	gt
 800580a:	1a9b      	subgt	r3, r3, r2
 800580c:	18ed      	addgt	r5, r5, r3
 800580e:	2600      	movs	r6, #0
 8005810:	341a      	adds	r4, #26
 8005812:	42b5      	cmp	r5, r6
 8005814:	d11a      	bne.n	800584c <_printf_common+0xc8>
 8005816:	2000      	movs	r0, #0
 8005818:	e008      	b.n	800582c <_printf_common+0xa8>
 800581a:	2301      	movs	r3, #1
 800581c:	4652      	mov	r2, sl
 800581e:	4641      	mov	r1, r8
 8005820:	4638      	mov	r0, r7
 8005822:	47c8      	blx	r9
 8005824:	3001      	adds	r0, #1
 8005826:	d103      	bne.n	8005830 <_printf_common+0xac>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	3501      	adds	r5, #1
 8005832:	e7c6      	b.n	80057c2 <_printf_common+0x3e>
 8005834:	18e1      	adds	r1, r4, r3
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	2030      	movs	r0, #48	@ 0x30
 800583a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800583e:	4422      	add	r2, r4
 8005840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005848:	3302      	adds	r3, #2
 800584a:	e7c7      	b.n	80057dc <_printf_common+0x58>
 800584c:	2301      	movs	r3, #1
 800584e:	4622      	mov	r2, r4
 8005850:	4641      	mov	r1, r8
 8005852:	4638      	mov	r0, r7
 8005854:	47c8      	blx	r9
 8005856:	3001      	adds	r0, #1
 8005858:	d0e6      	beq.n	8005828 <_printf_common+0xa4>
 800585a:	3601      	adds	r6, #1
 800585c:	e7d9      	b.n	8005812 <_printf_common+0x8e>
	...

08005860 <_printf_i>:
 8005860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	7e0f      	ldrb	r7, [r1, #24]
 8005866:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005868:	2f78      	cmp	r7, #120	@ 0x78
 800586a:	4691      	mov	r9, r2
 800586c:	4680      	mov	r8, r0
 800586e:	460c      	mov	r4, r1
 8005870:	469a      	mov	sl, r3
 8005872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005876:	d807      	bhi.n	8005888 <_printf_i+0x28>
 8005878:	2f62      	cmp	r7, #98	@ 0x62
 800587a:	d80a      	bhi.n	8005892 <_printf_i+0x32>
 800587c:	2f00      	cmp	r7, #0
 800587e:	f000 80d2 	beq.w	8005a26 <_printf_i+0x1c6>
 8005882:	2f58      	cmp	r7, #88	@ 0x58
 8005884:	f000 80b9 	beq.w	80059fa <_printf_i+0x19a>
 8005888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800588c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005890:	e03a      	b.n	8005908 <_printf_i+0xa8>
 8005892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005896:	2b15      	cmp	r3, #21
 8005898:	d8f6      	bhi.n	8005888 <_printf_i+0x28>
 800589a:	a101      	add	r1, pc, #4	@ (adr r1, 80058a0 <_printf_i+0x40>)
 800589c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	0800590d 	.word	0x0800590d
 80058a8:	08005889 	.word	0x08005889
 80058ac:	08005889 	.word	0x08005889
 80058b0:	08005889 	.word	0x08005889
 80058b4:	08005889 	.word	0x08005889
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005889 	.word	0x08005889
 80058c0:	08005889 	.word	0x08005889
 80058c4:	08005889 	.word	0x08005889
 80058c8:	08005889 	.word	0x08005889
 80058cc:	08005a0d 	.word	0x08005a0d
 80058d0:	08005937 	.word	0x08005937
 80058d4:	080059c7 	.word	0x080059c7
 80058d8:	08005889 	.word	0x08005889
 80058dc:	08005889 	.word	0x08005889
 80058e0:	08005a2f 	.word	0x08005a2f
 80058e4:	08005889 	.word	0x08005889
 80058e8:	08005937 	.word	0x08005937
 80058ec:	08005889 	.word	0x08005889
 80058f0:	08005889 	.word	0x08005889
 80058f4:	080059cf 	.word	0x080059cf
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6032      	str	r2, [r6, #0]
 8005900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005908:	2301      	movs	r3, #1
 800590a:	e09d      	b.n	8005a48 <_printf_i+0x1e8>
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1d19      	adds	r1, r3, #4
 8005912:	6031      	str	r1, [r6, #0]
 8005914:	0606      	lsls	r6, r0, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xbc>
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	e003      	b.n	8005924 <_printf_i+0xc4>
 800591c:	0645      	lsls	r5, r0, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xb8>
 8005920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005924:	2d00      	cmp	r5, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xd0>
 8005928:	232d      	movs	r3, #45	@ 0x2d
 800592a:	426d      	negs	r5, r5
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005930:	4859      	ldr	r0, [pc, #356]	@ (8005a98 <_printf_i+0x238>)
 8005932:	230a      	movs	r3, #10
 8005934:	e011      	b.n	800595a <_printf_i+0xfa>
 8005936:	6821      	ldr	r1, [r4, #0]
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	0608      	lsls	r0, r1, #24
 800593c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005940:	d402      	bmi.n	8005948 <_printf_i+0xe8>
 8005942:	0649      	lsls	r1, r1, #25
 8005944:	bf48      	it	mi
 8005946:	b2ad      	uxthmi	r5, r5
 8005948:	2f6f      	cmp	r7, #111	@ 0x6f
 800594a:	4853      	ldr	r0, [pc, #332]	@ (8005a98 <_printf_i+0x238>)
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	bf14      	ite	ne
 8005950:	230a      	movne	r3, #10
 8005952:	2308      	moveq	r3, #8
 8005954:	2100      	movs	r1, #0
 8005956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800595a:	6866      	ldr	r6, [r4, #4]
 800595c:	60a6      	str	r6, [r4, #8]
 800595e:	2e00      	cmp	r6, #0
 8005960:	bfa2      	ittt	ge
 8005962:	6821      	ldrge	r1, [r4, #0]
 8005964:	f021 0104 	bicge.w	r1, r1, #4
 8005968:	6021      	strge	r1, [r4, #0]
 800596a:	b90d      	cbnz	r5, 8005970 <_printf_i+0x110>
 800596c:	2e00      	cmp	r6, #0
 800596e:	d04b      	beq.n	8005a08 <_printf_i+0x1a8>
 8005970:	4616      	mov	r6, r2
 8005972:	fbb5 f1f3 	udiv	r1, r5, r3
 8005976:	fb03 5711 	mls	r7, r3, r1, r5
 800597a:	5dc7      	ldrb	r7, [r0, r7]
 800597c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005980:	462f      	mov	r7, r5
 8005982:	42bb      	cmp	r3, r7
 8005984:	460d      	mov	r5, r1
 8005986:	d9f4      	bls.n	8005972 <_printf_i+0x112>
 8005988:	2b08      	cmp	r3, #8
 800598a:	d10b      	bne.n	80059a4 <_printf_i+0x144>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	07df      	lsls	r7, r3, #31
 8005990:	d508      	bpl.n	80059a4 <_printf_i+0x144>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6861      	ldr	r1, [r4, #4]
 8005996:	4299      	cmp	r1, r3
 8005998:	bfde      	ittt	le
 800599a:	2330      	movle	r3, #48	@ 0x30
 800599c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059a4:	1b92      	subs	r2, r2, r6
 80059a6:	6122      	str	r2, [r4, #16]
 80059a8:	f8cd a000 	str.w	sl, [sp]
 80059ac:	464b      	mov	r3, r9
 80059ae:	aa03      	add	r2, sp, #12
 80059b0:	4621      	mov	r1, r4
 80059b2:	4640      	mov	r0, r8
 80059b4:	f7ff fee6 	bl	8005784 <_printf_common>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d14a      	bne.n	8005a52 <_printf_i+0x1f2>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	b004      	add	sp, #16
 80059c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f043 0320 	orr.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	4833      	ldr	r0, [pc, #204]	@ (8005a9c <_printf_i+0x23c>)
 80059d0:	2778      	movs	r7, #120	@ 0x78
 80059d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	6831      	ldr	r1, [r6, #0]
 80059da:	061f      	lsls	r7, r3, #24
 80059dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80059e0:	d402      	bmi.n	80059e8 <_printf_i+0x188>
 80059e2:	065f      	lsls	r7, r3, #25
 80059e4:	bf48      	it	mi
 80059e6:	b2ad      	uxthmi	r5, r5
 80059e8:	6031      	str	r1, [r6, #0]
 80059ea:	07d9      	lsls	r1, r3, #31
 80059ec:	bf44      	itt	mi
 80059ee:	f043 0320 	orrmi.w	r3, r3, #32
 80059f2:	6023      	strmi	r3, [r4, #0]
 80059f4:	b11d      	cbz	r5, 80059fe <_printf_i+0x19e>
 80059f6:	2310      	movs	r3, #16
 80059f8:	e7ac      	b.n	8005954 <_printf_i+0xf4>
 80059fa:	4827      	ldr	r0, [pc, #156]	@ (8005a98 <_printf_i+0x238>)
 80059fc:	e7e9      	b.n	80059d2 <_printf_i+0x172>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f023 0320 	bic.w	r3, r3, #32
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	e7f6      	b.n	80059f6 <_printf_i+0x196>
 8005a08:	4616      	mov	r6, r2
 8005a0a:	e7bd      	b.n	8005988 <_printf_i+0x128>
 8005a0c:	6833      	ldr	r3, [r6, #0]
 8005a0e:	6825      	ldr	r5, [r4, #0]
 8005a10:	6961      	ldr	r1, [r4, #20]
 8005a12:	1d18      	adds	r0, r3, #4
 8005a14:	6030      	str	r0, [r6, #0]
 8005a16:	062e      	lsls	r6, r5, #24
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0x1c0>
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	e002      	b.n	8005a26 <_printf_i+0x1c6>
 8005a20:	0668      	lsls	r0, r5, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0x1bc>
 8005a24:	8019      	strh	r1, [r3, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	4616      	mov	r6, r2
 8005a2c:	e7bc      	b.n	80059a8 <_printf_i+0x148>
 8005a2e:	6833      	ldr	r3, [r6, #0]
 8005a30:	1d1a      	adds	r2, r3, #4
 8005a32:	6032      	str	r2, [r6, #0]
 8005a34:	681e      	ldr	r6, [r3, #0]
 8005a36:	6862      	ldr	r2, [r4, #4]
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7fa fbd0 	bl	80001e0 <memchr>
 8005a40:	b108      	cbz	r0, 8005a46 <_printf_i+0x1e6>
 8005a42:	1b80      	subs	r0, r0, r6
 8005a44:	6060      	str	r0, [r4, #4]
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a50:	e7aa      	b.n	80059a8 <_printf_i+0x148>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	4632      	mov	r2, r6
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	47d0      	blx	sl
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d0ad      	beq.n	80059bc <_printf_i+0x15c>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	079b      	lsls	r3, r3, #30
 8005a64:	d413      	bmi.n	8005a8e <_printf_i+0x22e>
 8005a66:	68e0      	ldr	r0, [r4, #12]
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	bfb8      	it	lt
 8005a6e:	4618      	movlt	r0, r3
 8005a70:	e7a6      	b.n	80059c0 <_printf_i+0x160>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4632      	mov	r2, r6
 8005a76:	4649      	mov	r1, r9
 8005a78:	4640      	mov	r0, r8
 8005a7a:	47d0      	blx	sl
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d09d      	beq.n	80059bc <_printf_i+0x15c>
 8005a80:	3501      	adds	r5, #1
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	9903      	ldr	r1, [sp, #12]
 8005a86:	1a5b      	subs	r3, r3, r1
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dcf2      	bgt.n	8005a72 <_printf_i+0x212>
 8005a8c:	e7eb      	b.n	8005a66 <_printf_i+0x206>
 8005a8e:	2500      	movs	r5, #0
 8005a90:	f104 0619 	add.w	r6, r4, #25
 8005a94:	e7f5      	b.n	8005a82 <_printf_i+0x222>
 8005a96:	bf00      	nop
 8005a98:	08007b6e 	.word	0x08007b6e
 8005a9c:	08007b7f 	.word	0x08007b7f

08005aa0 <std>:
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aae:	6083      	str	r3, [r0, #8]
 8005ab0:	8181      	strh	r1, [r0, #12]
 8005ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ab4:	81c2      	strh	r2, [r0, #14]
 8005ab6:	6183      	str	r3, [r0, #24]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	2208      	movs	r2, #8
 8005abc:	305c      	adds	r0, #92	@ 0x5c
 8005abe:	f000 f906 	bl	8005cce <memset>
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <std+0x58>)
 8005ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <std+0x5c>)
 8005ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <std+0x60>)
 8005acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <std+0x64>)
 8005ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <std+0x68>)
 8005ad4:	6224      	str	r4, [r4, #32]
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d006      	beq.n	8005ae8 <std+0x48>
 8005ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ade:	4294      	cmp	r4, r2
 8005ae0:	d002      	beq.n	8005ae8 <std+0x48>
 8005ae2:	33d0      	adds	r3, #208	@ 0xd0
 8005ae4:	429c      	cmp	r4, r3
 8005ae6:	d105      	bne.n	8005af4 <std+0x54>
 8005ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af0:	f000 b96a 	b.w	8005dc8 <__retarget_lock_init_recursive>
 8005af4:	bd10      	pop	{r4, pc}
 8005af6:	bf00      	nop
 8005af8:	08005c49 	.word	0x08005c49
 8005afc:	08005c6b 	.word	0x08005c6b
 8005b00:	08005ca3 	.word	0x08005ca3
 8005b04:	08005cc7 	.word	0x08005cc7
 8005b08:	2000037c 	.word	0x2000037c

08005b0c <stdio_exit_handler>:
 8005b0c:	4a02      	ldr	r2, [pc, #8]	@ (8005b18 <stdio_exit_handler+0xc>)
 8005b0e:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <stdio_exit_handler+0x10>)
 8005b10:	4803      	ldr	r0, [pc, #12]	@ (8005b20 <stdio_exit_handler+0x14>)
 8005b12:	f000 b869 	b.w	8005be8 <_fwalk_sglue>
 8005b16:	bf00      	nop
 8005b18:	20000020 	.word	0x20000020
 8005b1c:	080076f9 	.word	0x080076f9
 8005b20:	20000030 	.word	0x20000030

08005b24 <cleanup_stdio>:
 8005b24:	6841      	ldr	r1, [r0, #4]
 8005b26:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <cleanup_stdio+0x34>)
 8005b28:	4299      	cmp	r1, r3
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	d001      	beq.n	8005b34 <cleanup_stdio+0x10>
 8005b30:	f001 fde2 	bl	80076f8 <_fflush_r>
 8005b34:	68a1      	ldr	r1, [r4, #8]
 8005b36:	4b09      	ldr	r3, [pc, #36]	@ (8005b5c <cleanup_stdio+0x38>)
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	d002      	beq.n	8005b42 <cleanup_stdio+0x1e>
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f001 fddb 	bl	80076f8 <_fflush_r>
 8005b42:	68e1      	ldr	r1, [r4, #12]
 8005b44:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <cleanup_stdio+0x3c>)
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d004      	beq.n	8005b54 <cleanup_stdio+0x30>
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b50:	f001 bdd2 	b.w	80076f8 <_fflush_r>
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	bf00      	nop
 8005b58:	2000037c 	.word	0x2000037c
 8005b5c:	200003e4 	.word	0x200003e4
 8005b60:	2000044c 	.word	0x2000044c

08005b64 <global_stdio_init.part.0>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4b0b      	ldr	r3, [pc, #44]	@ (8005b94 <global_stdio_init.part.0+0x30>)
 8005b68:	4c0b      	ldr	r4, [pc, #44]	@ (8005b98 <global_stdio_init.part.0+0x34>)
 8005b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b9c <global_stdio_init.part.0+0x38>)
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	2200      	movs	r2, #0
 8005b72:	2104      	movs	r1, #4
 8005b74:	f7ff ff94 	bl	8005aa0 <std>
 8005b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	2109      	movs	r1, #9
 8005b80:	f7ff ff8e 	bl	8005aa0 <std>
 8005b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b88:	2202      	movs	r2, #2
 8005b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b8e:	2112      	movs	r1, #18
 8005b90:	f7ff bf86 	b.w	8005aa0 <std>
 8005b94:	200004b4 	.word	0x200004b4
 8005b98:	2000037c 	.word	0x2000037c
 8005b9c:	08005b0d 	.word	0x08005b0d

08005ba0 <__sfp_lock_acquire>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	@ (8005ba8 <__sfp_lock_acquire+0x8>)
 8005ba2:	f000 b912 	b.w	8005dca <__retarget_lock_acquire_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	200004bd 	.word	0x200004bd

08005bac <__sfp_lock_release>:
 8005bac:	4801      	ldr	r0, [pc, #4]	@ (8005bb4 <__sfp_lock_release+0x8>)
 8005bae:	f000 b90d 	b.w	8005dcc <__retarget_lock_release_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	200004bd 	.word	0x200004bd

08005bb8 <__sinit>:
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	4604      	mov	r4, r0
 8005bbc:	f7ff fff0 	bl	8005ba0 <__sfp_lock_acquire>
 8005bc0:	6a23      	ldr	r3, [r4, #32]
 8005bc2:	b11b      	cbz	r3, 8005bcc <__sinit+0x14>
 8005bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc8:	f7ff bff0 	b.w	8005bac <__sfp_lock_release>
 8005bcc:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <__sinit+0x28>)
 8005bce:	6223      	str	r3, [r4, #32]
 8005bd0:	4b04      	ldr	r3, [pc, #16]	@ (8005be4 <__sinit+0x2c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f5      	bne.n	8005bc4 <__sinit+0xc>
 8005bd8:	f7ff ffc4 	bl	8005b64 <global_stdio_init.part.0>
 8005bdc:	e7f2      	b.n	8005bc4 <__sinit+0xc>
 8005bde:	bf00      	nop
 8005be0:	08005b25 	.word	0x08005b25
 8005be4:	200004b4 	.word	0x200004b4

08005be8 <_fwalk_sglue>:
 8005be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bec:	4607      	mov	r7, r0
 8005bee:	4688      	mov	r8, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bfc:	d505      	bpl.n	8005c0a <_fwalk_sglue+0x22>
 8005bfe:	6824      	ldr	r4, [r4, #0]
 8005c00:	2c00      	cmp	r4, #0
 8005c02:	d1f7      	bne.n	8005bf4 <_fwalk_sglue+0xc>
 8005c04:	4630      	mov	r0, r6
 8005c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0a:	89ab      	ldrh	r3, [r5, #12]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d907      	bls.n	8005c20 <_fwalk_sglue+0x38>
 8005c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c14:	3301      	adds	r3, #1
 8005c16:	d003      	beq.n	8005c20 <_fwalk_sglue+0x38>
 8005c18:	4629      	mov	r1, r5
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c0      	blx	r8
 8005c1e:	4306      	orrs	r6, r0
 8005c20:	3568      	adds	r5, #104	@ 0x68
 8005c22:	e7e9      	b.n	8005bf8 <_fwalk_sglue+0x10>

08005c24 <iprintf>:
 8005c24:	b40f      	push	{r0, r1, r2, r3}
 8005c26:	b507      	push	{r0, r1, r2, lr}
 8005c28:	4906      	ldr	r1, [pc, #24]	@ (8005c44 <iprintf+0x20>)
 8005c2a:	ab04      	add	r3, sp, #16
 8005c2c:	6808      	ldr	r0, [r1, #0]
 8005c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c32:	6881      	ldr	r1, [r0, #8]
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	f001 fbc3 	bl	80073c0 <_vfiprintf_r>
 8005c3a:	b003      	add	sp, #12
 8005c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c40:	b004      	add	sp, #16
 8005c42:	4770      	bx	lr
 8005c44:	2000002c 	.word	0x2000002c

08005c48 <__sread>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c50:	f000 f86c 	bl	8005d2c <_read_r>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	bfab      	itete	ge
 8005c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c5c:	181b      	addge	r3, r3, r0
 8005c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c62:	bfac      	ite	ge
 8005c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c66:	81a3      	strhlt	r3, [r4, #12]
 8005c68:	bd10      	pop	{r4, pc}

08005c6a <__swrite>:
 8005c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	461f      	mov	r7, r3
 8005c70:	898b      	ldrh	r3, [r1, #12]
 8005c72:	05db      	lsls	r3, r3, #23
 8005c74:	4605      	mov	r5, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	4616      	mov	r6, r2
 8005c7a:	d505      	bpl.n	8005c88 <__swrite+0x1e>
 8005c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c80:	2302      	movs	r3, #2
 8005c82:	2200      	movs	r2, #0
 8005c84:	f000 f840 	bl	8005d08 <_lseek_r>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	4632      	mov	r2, r6
 8005c96:	463b      	mov	r3, r7
 8005c98:	4628      	mov	r0, r5
 8005c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9e:	f000 b857 	b.w	8005d50 <_write_r>

08005ca2 <__sseek>:
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005caa:	f000 f82d 	bl	8005d08 <_lseek_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	bf15      	itete	ne
 8005cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cbe:	81a3      	strheq	r3, [r4, #12]
 8005cc0:	bf18      	it	ne
 8005cc2:	81a3      	strhne	r3, [r4, #12]
 8005cc4:	bd10      	pop	{r4, pc}

08005cc6 <__sclose>:
 8005cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cca:	f000 b80d 	b.w	8005ce8 <_close_r>

08005cce <memset>:
 8005cce:	4402      	add	r2, r0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d100      	bne.n	8005cd8 <memset+0xa>
 8005cd6:	4770      	bx	lr
 8005cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8005cdc:	e7f9      	b.n	8005cd2 <memset+0x4>
	...

08005ce0 <_localeconv_r>:
 8005ce0:	4800      	ldr	r0, [pc, #0]	@ (8005ce4 <_localeconv_r+0x4>)
 8005ce2:	4770      	bx	lr
 8005ce4:	2000016c 	.word	0x2000016c

08005ce8 <_close_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	@ (8005d04 <_close_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fb ff54 	bl	8001ba0 <_close>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_close_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_close_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200004b8 	.word	0x200004b8

08005d08 <_lseek_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	@ (8005d28 <_lseek_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fb ff69 	bl	8001bee <_lseek>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_lseek_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_lseek_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200004b8 	.word	0x200004b8

08005d2c <_read_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	@ (8005d4c <_read_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fb fef7 	bl	8001b2e <_read>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_read_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_read_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200004b8 	.word	0x200004b8

08005d50 <_write_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	@ (8005d70 <_write_r+0x20>)
 8005d54:	4604      	mov	r4, r0
 8005d56:	4608      	mov	r0, r1
 8005d58:	4611      	mov	r1, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	602a      	str	r2, [r5, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7fb ff02 	bl	8001b68 <_write>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_write_r+0x1e>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_write_r+0x1e>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	200004b8 	.word	0x200004b8

08005d74 <__errno>:
 8005d74:	4b01      	ldr	r3, [pc, #4]	@ (8005d7c <__errno+0x8>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	2000002c 	.word	0x2000002c

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4d0d      	ldr	r5, [pc, #52]	@ (8005db8 <__libc_init_array+0x38>)
 8005d84:	4c0d      	ldr	r4, [pc, #52]	@ (8005dbc <__libc_init_array+0x3c>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	4d0b      	ldr	r5, [pc, #44]	@ (8005dc0 <__libc_init_array+0x40>)
 8005d92:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc4 <__libc_init_array+0x44>)
 8005d94:	f001 febe 	bl	8007b14 <_init>
 8005d98:	1b64      	subs	r4, r4, r5
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	08007ed8 	.word	0x08007ed8
 8005dbc:	08007ed8 	.word	0x08007ed8
 8005dc0:	08007ed8 	.word	0x08007ed8
 8005dc4:	08007edc 	.word	0x08007edc

08005dc8 <__retarget_lock_init_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <__retarget_lock_acquire_recursive>:
 8005dca:	4770      	bx	lr

08005dcc <__retarget_lock_release_recursive>:
 8005dcc:	4770      	bx	lr

08005dce <quorem>:
 8005dce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd2:	6903      	ldr	r3, [r0, #16]
 8005dd4:	690c      	ldr	r4, [r1, #16]
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	4607      	mov	r7, r0
 8005dda:	db7e      	blt.n	8005eda <quorem+0x10c>
 8005ddc:	3c01      	subs	r4, #1
 8005dde:	f101 0814 	add.w	r8, r1, #20
 8005de2:	00a3      	lsls	r3, r4, #2
 8005de4:	f100 0514 	add.w	r5, r0, #20
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e04:	d32e      	bcc.n	8005e64 <quorem+0x96>
 8005e06:	f04f 0a00 	mov.w	sl, #0
 8005e0a:	46c4      	mov	ip, r8
 8005e0c:	46ae      	mov	lr, r5
 8005e0e:	46d3      	mov	fp, sl
 8005e10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e14:	b298      	uxth	r0, r3
 8005e16:	fb06 a000 	mla	r0, r6, r0, sl
 8005e1a:	0c02      	lsrs	r2, r0, #16
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	fb06 2303 	mla	r3, r6, r3, r2
 8005e22:	f8de 2000 	ldr.w	r2, [lr]
 8005e26:	b280      	uxth	r0, r0
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	1a12      	subs	r2, r2, r0
 8005e2c:	445a      	add	r2, fp
 8005e2e:	f8de 0000 	ldr.w	r0, [lr]
 8005e32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e40:	b292      	uxth	r2, r2
 8005e42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e46:	45e1      	cmp	r9, ip
 8005e48:	f84e 2b04 	str.w	r2, [lr], #4
 8005e4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e50:	d2de      	bcs.n	8005e10 <quorem+0x42>
 8005e52:	9b00      	ldr	r3, [sp, #0]
 8005e54:	58eb      	ldr	r3, [r5, r3]
 8005e56:	b92b      	cbnz	r3, 8005e64 <quorem+0x96>
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	3b04      	subs	r3, #4
 8005e5c:	429d      	cmp	r5, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	d32f      	bcc.n	8005ec2 <quorem+0xf4>
 8005e62:	613c      	str	r4, [r7, #16]
 8005e64:	4638      	mov	r0, r7
 8005e66:	f001 f979 	bl	800715c <__mcmp>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	db25      	blt.n	8005eba <quorem+0xec>
 8005e6e:	4629      	mov	r1, r5
 8005e70:	2000      	movs	r0, #0
 8005e72:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e76:	f8d1 c000 	ldr.w	ip, [r1]
 8005e7a:	fa1f fe82 	uxth.w	lr, r2
 8005e7e:	fa1f f38c 	uxth.w	r3, ip
 8005e82:	eba3 030e 	sub.w	r3, r3, lr
 8005e86:	4403      	add	r3, r0
 8005e88:	0c12      	lsrs	r2, r2, #16
 8005e8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e98:	45c1      	cmp	r9, r8
 8005e9a:	f841 3b04 	str.w	r3, [r1], #4
 8005e9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ea2:	d2e6      	bcs.n	8005e72 <quorem+0xa4>
 8005ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eac:	b922      	cbnz	r2, 8005eb8 <quorem+0xea>
 8005eae:	3b04      	subs	r3, #4
 8005eb0:	429d      	cmp	r5, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	d30b      	bcc.n	8005ece <quorem+0x100>
 8005eb6:	613c      	str	r4, [r7, #16]
 8005eb8:	3601      	adds	r6, #1
 8005eba:	4630      	mov	r0, r6
 8005ebc:	b003      	add	sp, #12
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	d1cb      	bne.n	8005e62 <quorem+0x94>
 8005eca:	3c01      	subs	r4, #1
 8005ecc:	e7c6      	b.n	8005e5c <quorem+0x8e>
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d1ef      	bne.n	8005eb6 <quorem+0xe8>
 8005ed6:	3c01      	subs	r4, #1
 8005ed8:	e7ea      	b.n	8005eb0 <quorem+0xe2>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e7ee      	b.n	8005ebc <quorem+0xee>
	...

08005ee0 <_dtoa_r>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	69c7      	ldr	r7, [r0, #28]
 8005ee6:	b099      	sub	sp, #100	@ 0x64
 8005ee8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005eec:	ec55 4b10 	vmov	r4, r5, d0
 8005ef0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005ef2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ef4:	4683      	mov	fp, r0
 8005ef6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005efa:	b97f      	cbnz	r7, 8005f1c <_dtoa_r+0x3c>
 8005efc:	2010      	movs	r0, #16
 8005efe:	f000 fdfd 	bl	8006afc <malloc>
 8005f02:	4602      	mov	r2, r0
 8005f04:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f08:	b920      	cbnz	r0, 8005f14 <_dtoa_r+0x34>
 8005f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80061a8 <_dtoa_r+0x2c8>)
 8005f0c:	21ef      	movs	r1, #239	@ 0xef
 8005f0e:	48a7      	ldr	r0, [pc, #668]	@ (80061ac <_dtoa_r+0x2cc>)
 8005f10:	f001 fccc 	bl	80078ac <__assert_func>
 8005f14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f18:	6007      	str	r7, [r0, #0]
 8005f1a:	60c7      	str	r7, [r0, #12]
 8005f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	b159      	cbz	r1, 8005f3c <_dtoa_r+0x5c>
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	604a      	str	r2, [r1, #4]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4093      	lsls	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
 8005f2e:	4658      	mov	r0, fp
 8005f30:	f000 feda 	bl	8006ce8 <_Bfree>
 8005f34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	1e2b      	subs	r3, r5, #0
 8005f3e:	bfb9      	ittee	lt
 8005f40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f44:	9303      	strlt	r3, [sp, #12]
 8005f46:	2300      	movge	r3, #0
 8005f48:	6033      	strge	r3, [r6, #0]
 8005f4a:	9f03      	ldr	r7, [sp, #12]
 8005f4c:	4b98      	ldr	r3, [pc, #608]	@ (80061b0 <_dtoa_r+0x2d0>)
 8005f4e:	bfbc      	itt	lt
 8005f50:	2201      	movlt	r2, #1
 8005f52:	6032      	strlt	r2, [r6, #0]
 8005f54:	43bb      	bics	r3, r7
 8005f56:	d112      	bne.n	8005f7e <_dtoa_r+0x9e>
 8005f58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f64:	4323      	orrs	r3, r4
 8005f66:	f000 854d 	beq.w	8006a04 <_dtoa_r+0xb24>
 8005f6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80061c4 <_dtoa_r+0x2e4>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 854f 	beq.w	8006a14 <_dtoa_r+0xb34>
 8005f76:	f10a 0303 	add.w	r3, sl, #3
 8005f7a:	f000 bd49 	b.w	8006a10 <_dtoa_r+0xb30>
 8005f7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	ec51 0b17 	vmov	r0, r1, d7
 8005f88:	2300      	movs	r3, #0
 8005f8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f8e:	f7fa fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f92:	4680      	mov	r8, r0
 8005f94:	b158      	cbz	r0, 8005fae <_dtoa_r+0xce>
 8005f96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f9e:	b113      	cbz	r3, 8005fa6 <_dtoa_r+0xc6>
 8005fa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fa2:	4b84      	ldr	r3, [pc, #528]	@ (80061b4 <_dtoa_r+0x2d4>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80061c8 <_dtoa_r+0x2e8>
 8005faa:	f000 bd33 	b.w	8006a14 <_dtoa_r+0xb34>
 8005fae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005fb2:	aa16      	add	r2, sp, #88	@ 0x58
 8005fb4:	a917      	add	r1, sp, #92	@ 0x5c
 8005fb6:	4658      	mov	r0, fp
 8005fb8:	f001 f980 	bl	80072bc <__d2b>
 8005fbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d077      	beq.n	80060b6 <_dtoa_r+0x1d6>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4b74      	ldr	r3, [pc, #464]	@ (80061b8 <_dtoa_r+0x2d8>)
 8005fe6:	f7fa f957 	bl	8000298 <__aeabi_dsub>
 8005fea:	a369      	add	r3, pc, #420	@ (adr r3, 8006190 <_dtoa_r+0x2b0>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fa fb0a 	bl	8000608 <__aeabi_dmul>
 8005ff4:	a368      	add	r3, pc, #416	@ (adr r3, 8006198 <_dtoa_r+0x2b8>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f94f 	bl	800029c <__adddf3>
 8005ffe:	4604      	mov	r4, r0
 8006000:	4630      	mov	r0, r6
 8006002:	460d      	mov	r5, r1
 8006004:	f7fa fa96 	bl	8000534 <__aeabi_i2d>
 8006008:	a365      	add	r3, pc, #404	@ (adr r3, 80061a0 <_dtoa_r+0x2c0>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa fafb 	bl	8000608 <__aeabi_dmul>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f93f 	bl	800029c <__adddf3>
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	f7fa fda1 	bl	8000b68 <__aeabi_d2iz>
 8006026:	2200      	movs	r2, #0
 8006028:	4607      	mov	r7, r0
 800602a:	2300      	movs	r3, #0
 800602c:	4620      	mov	r0, r4
 800602e:	4629      	mov	r1, r5
 8006030:	f7fa fd5c 	bl	8000aec <__aeabi_dcmplt>
 8006034:	b140      	cbz	r0, 8006048 <_dtoa_r+0x168>
 8006036:	4638      	mov	r0, r7
 8006038:	f7fa fa7c 	bl	8000534 <__aeabi_i2d>
 800603c:	4622      	mov	r2, r4
 800603e:	462b      	mov	r3, r5
 8006040:	f7fa fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006044:	b900      	cbnz	r0, 8006048 <_dtoa_r+0x168>
 8006046:	3f01      	subs	r7, #1
 8006048:	2f16      	cmp	r7, #22
 800604a:	d851      	bhi.n	80060f0 <_dtoa_r+0x210>
 800604c:	4b5b      	ldr	r3, [pc, #364]	@ (80061bc <_dtoa_r+0x2dc>)
 800604e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800605a:	f7fa fd47 	bl	8000aec <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d048      	beq.n	80060f4 <_dtoa_r+0x214>
 8006062:	3f01      	subs	r7, #1
 8006064:	2300      	movs	r3, #0
 8006066:	9312      	str	r3, [sp, #72]	@ 0x48
 8006068:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800606a:	1b9b      	subs	r3, r3, r6
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	bf44      	itt	mi
 8006070:	f1c3 0801 	rsbmi	r8, r3, #1
 8006074:	2300      	movmi	r3, #0
 8006076:	9208      	str	r2, [sp, #32]
 8006078:	bf54      	ite	pl
 800607a:	f04f 0800 	movpl.w	r8, #0
 800607e:	9308      	strmi	r3, [sp, #32]
 8006080:	2f00      	cmp	r7, #0
 8006082:	db39      	blt.n	80060f8 <_dtoa_r+0x218>
 8006084:	9b08      	ldr	r3, [sp, #32]
 8006086:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006088:	443b      	add	r3, r7
 800608a:	9308      	str	r3, [sp, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006092:	2b09      	cmp	r3, #9
 8006094:	d864      	bhi.n	8006160 <_dtoa_r+0x280>
 8006096:	2b05      	cmp	r3, #5
 8006098:	bfc4      	itt	gt
 800609a:	3b04      	subgt	r3, #4
 800609c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	f1a3 0302 	sub.w	r3, r3, #2
 80060a4:	bfcc      	ite	gt
 80060a6:	2400      	movgt	r4, #0
 80060a8:	2401      	movle	r4, #1
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d863      	bhi.n	8006176 <_dtoa_r+0x296>
 80060ae:	e8df f003 	tbb	[pc, r3]
 80060b2:	372a      	.short	0x372a
 80060b4:	5535      	.short	0x5535
 80060b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80060ba:	441e      	add	r6, r3
 80060bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	bfc1      	itttt	gt
 80060c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060c8:	409f      	lslgt	r7, r3
 80060ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060d2:	bfd6      	itet	le
 80060d4:	f1c3 0320 	rsble	r3, r3, #32
 80060d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80060dc:	fa04 f003 	lslle.w	r0, r4, r3
 80060e0:	f7fa fa18 	bl	8000514 <__aeabi_ui2d>
 80060e4:	2201      	movs	r2, #1
 80060e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060ea:	3e01      	subs	r6, #1
 80060ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80060ee:	e777      	b.n	8005fe0 <_dtoa_r+0x100>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e7b8      	b.n	8006066 <_dtoa_r+0x186>
 80060f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80060f6:	e7b7      	b.n	8006068 <_dtoa_r+0x188>
 80060f8:	427b      	negs	r3, r7
 80060fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80060fc:	2300      	movs	r3, #0
 80060fe:	eba8 0807 	sub.w	r8, r8, r7
 8006102:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006104:	e7c4      	b.n	8006090 <_dtoa_r+0x1b0>
 8006106:	2300      	movs	r3, #0
 8006108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800610a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc35      	bgt.n	800617c <_dtoa_r+0x29c>
 8006110:	2301      	movs	r3, #1
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	461a      	mov	r2, r3
 8006118:	920e      	str	r2, [sp, #56]	@ 0x38
 800611a:	e00b      	b.n	8006134 <_dtoa_r+0x254>
 800611c:	2301      	movs	r3, #1
 800611e:	e7f3      	b.n	8006108 <_dtoa_r+0x228>
 8006120:	2300      	movs	r3, #0
 8006122:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	bfb8      	it	lt
 8006132:	2301      	movlt	r3, #1
 8006134:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006138:	2100      	movs	r1, #0
 800613a:	2204      	movs	r2, #4
 800613c:	f102 0514 	add.w	r5, r2, #20
 8006140:	429d      	cmp	r5, r3
 8006142:	d91f      	bls.n	8006184 <_dtoa_r+0x2a4>
 8006144:	6041      	str	r1, [r0, #4]
 8006146:	4658      	mov	r0, fp
 8006148:	f000 fd8e 	bl	8006c68 <_Balloc>
 800614c:	4682      	mov	sl, r0
 800614e:	2800      	cmp	r0, #0
 8006150:	d13c      	bne.n	80061cc <_dtoa_r+0x2ec>
 8006152:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <_dtoa_r+0x2e0>)
 8006154:	4602      	mov	r2, r0
 8006156:	f240 11af 	movw	r1, #431	@ 0x1af
 800615a:	e6d8      	b.n	8005f0e <_dtoa_r+0x2e>
 800615c:	2301      	movs	r3, #1
 800615e:	e7e0      	b.n	8006122 <_dtoa_r+0x242>
 8006160:	2401      	movs	r4, #1
 8006162:	2300      	movs	r3, #0
 8006164:	9309      	str	r3, [sp, #36]	@ 0x24
 8006166:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	2312      	movs	r3, #18
 8006174:	e7d0      	b.n	8006118 <_dtoa_r+0x238>
 8006176:	2301      	movs	r3, #1
 8006178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800617a:	e7f5      	b.n	8006168 <_dtoa_r+0x288>
 800617c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	e7d7      	b.n	8006134 <_dtoa_r+0x254>
 8006184:	3101      	adds	r1, #1
 8006186:	0052      	lsls	r2, r2, #1
 8006188:	e7d8      	b.n	800613c <_dtoa_r+0x25c>
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w
 8006190:	636f4361 	.word	0x636f4361
 8006194:	3fd287a7 	.word	0x3fd287a7
 8006198:	8b60c8b3 	.word	0x8b60c8b3
 800619c:	3fc68a28 	.word	0x3fc68a28
 80061a0:	509f79fb 	.word	0x509f79fb
 80061a4:	3fd34413 	.word	0x3fd34413
 80061a8:	08007b9d 	.word	0x08007b9d
 80061ac:	08007bb4 	.word	0x08007bb4
 80061b0:	7ff00000 	.word	0x7ff00000
 80061b4:	08007b6d 	.word	0x08007b6d
 80061b8:	3ff80000 	.word	0x3ff80000
 80061bc:	08007cb0 	.word	0x08007cb0
 80061c0:	08007c0c 	.word	0x08007c0c
 80061c4:	08007b99 	.word	0x08007b99
 80061c8:	08007b6c 	.word	0x08007b6c
 80061cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061d0:	6018      	str	r0, [r3, #0]
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	2b0e      	cmp	r3, #14
 80061d6:	f200 80a4 	bhi.w	8006322 <_dtoa_r+0x442>
 80061da:	2c00      	cmp	r4, #0
 80061dc:	f000 80a1 	beq.w	8006322 <_dtoa_r+0x442>
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	dd33      	ble.n	800624c <_dtoa_r+0x36c>
 80061e4:	4bad      	ldr	r3, [pc, #692]	@ (800649c <_dtoa_r+0x5bc>)
 80061e6:	f007 020f 	and.w	r2, r7, #15
 80061ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ee:	ed93 7b00 	vldr	d7, [r3]
 80061f2:	05f8      	lsls	r0, r7, #23
 80061f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061fc:	d516      	bpl.n	800622c <_dtoa_r+0x34c>
 80061fe:	4ba8      	ldr	r3, [pc, #672]	@ (80064a0 <_dtoa_r+0x5c0>)
 8006200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006208:	f7fa fb28 	bl	800085c <__aeabi_ddiv>
 800620c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006210:	f004 040f 	and.w	r4, r4, #15
 8006214:	2603      	movs	r6, #3
 8006216:	4da2      	ldr	r5, [pc, #648]	@ (80064a0 <_dtoa_r+0x5c0>)
 8006218:	b954      	cbnz	r4, 8006230 <_dtoa_r+0x350>
 800621a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800621e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006222:	f7fa fb1b 	bl	800085c <__aeabi_ddiv>
 8006226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622a:	e028      	b.n	800627e <_dtoa_r+0x39e>
 800622c:	2602      	movs	r6, #2
 800622e:	e7f2      	b.n	8006216 <_dtoa_r+0x336>
 8006230:	07e1      	lsls	r1, r4, #31
 8006232:	d508      	bpl.n	8006246 <_dtoa_r+0x366>
 8006234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006238:	e9d5 2300 	ldrd	r2, r3, [r5]
 800623c:	f7fa f9e4 	bl	8000608 <__aeabi_dmul>
 8006240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006244:	3601      	adds	r6, #1
 8006246:	1064      	asrs	r4, r4, #1
 8006248:	3508      	adds	r5, #8
 800624a:	e7e5      	b.n	8006218 <_dtoa_r+0x338>
 800624c:	f000 80d2 	beq.w	80063f4 <_dtoa_r+0x514>
 8006250:	427c      	negs	r4, r7
 8006252:	4b92      	ldr	r3, [pc, #584]	@ (800649c <_dtoa_r+0x5bc>)
 8006254:	4d92      	ldr	r5, [pc, #584]	@ (80064a0 <_dtoa_r+0x5c0>)
 8006256:	f004 020f 	and.w	r2, r4, #15
 800625a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006266:	f7fa f9cf 	bl	8000608 <__aeabi_dmul>
 800626a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626e:	1124      	asrs	r4, r4, #4
 8006270:	2300      	movs	r3, #0
 8006272:	2602      	movs	r6, #2
 8006274:	2c00      	cmp	r4, #0
 8006276:	f040 80b2 	bne.w	80063de <_dtoa_r+0x4fe>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1d3      	bne.n	8006226 <_dtoa_r+0x346>
 800627e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006280:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80b7 	beq.w	80063f8 <_dtoa_r+0x518>
 800628a:	4b86      	ldr	r3, [pc, #536]	@ (80064a4 <_dtoa_r+0x5c4>)
 800628c:	2200      	movs	r2, #0
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa fc2b 	bl	8000aec <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	f000 80ae 	beq.w	80063f8 <_dtoa_r+0x518>
 800629c:	9b07      	ldr	r3, [sp, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80aa 	beq.w	80063f8 <_dtoa_r+0x518>
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dd37      	ble.n	800631a <_dtoa_r+0x43a>
 80062aa:	1e7b      	subs	r3, r7, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	4620      	mov	r0, r4
 80062b0:	4b7d      	ldr	r3, [pc, #500]	@ (80064a8 <_dtoa_r+0x5c8>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7fa f9a7 	bl	8000608 <__aeabi_dmul>
 80062ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062be:	9c00      	ldr	r4, [sp, #0]
 80062c0:	3601      	adds	r6, #1
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7fa f936 	bl	8000534 <__aeabi_i2d>
 80062c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062cc:	f7fa f99c 	bl	8000608 <__aeabi_dmul>
 80062d0:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <_dtoa_r+0x5cc>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	f7f9 ffe2 	bl	800029c <__adddf3>
 80062d8:	4605      	mov	r5, r0
 80062da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062de:	2c00      	cmp	r4, #0
 80062e0:	f040 808d 	bne.w	80063fe <_dtoa_r+0x51e>
 80062e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e8:	4b71      	ldr	r3, [pc, #452]	@ (80064b0 <_dtoa_r+0x5d0>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7f9 ffd4 	bl	8000298 <__aeabi_dsub>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4633      	mov	r3, r6
 80062fc:	f7fa fc14 	bl	8000b28 <__aeabi_dcmpgt>
 8006300:	2800      	cmp	r0, #0
 8006302:	f040 828b 	bne.w	800681c <_dtoa_r+0x93c>
 8006306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630a:	462a      	mov	r2, r5
 800630c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006310:	f7fa fbec 	bl	8000aec <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	f040 8128 	bne.w	800656a <_dtoa_r+0x68a>
 800631a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800631e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006322:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006324:	2b00      	cmp	r3, #0
 8006326:	f2c0 815a 	blt.w	80065de <_dtoa_r+0x6fe>
 800632a:	2f0e      	cmp	r7, #14
 800632c:	f300 8157 	bgt.w	80065de <_dtoa_r+0x6fe>
 8006330:	4b5a      	ldr	r3, [pc, #360]	@ (800649c <_dtoa_r+0x5bc>)
 8006332:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006336:	ed93 7b00 	vldr	d7, [r3]
 800633a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	ed8d 7b00 	vstr	d7, [sp]
 8006342:	da03      	bge.n	800634c <_dtoa_r+0x46c>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f340 8101 	ble.w	800654e <_dtoa_r+0x66e>
 800634c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006350:	4656      	mov	r6, sl
 8006352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f7fa fa7f 	bl	800085c <__aeabi_ddiv>
 800635e:	f7fa fc03 	bl	8000b68 <__aeabi_d2iz>
 8006362:	4680      	mov	r8, r0
 8006364:	f7fa f8e6 	bl	8000534 <__aeabi_i2d>
 8006368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636c:	f7fa f94c 	bl	8000608 <__aeabi_dmul>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800637c:	f7f9 ff8c 	bl	8000298 <__aeabi_dsub>
 8006380:	f806 4b01 	strb.w	r4, [r6], #1
 8006384:	9d07      	ldr	r5, [sp, #28]
 8006386:	eba6 040a 	sub.w	r4, r6, sl
 800638a:	42a5      	cmp	r5, r4
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	f040 8117 	bne.w	80065c2 <_dtoa_r+0x6e2>
 8006394:	f7f9 ff82 	bl	800029c <__adddf3>
 8006398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800639c:	4604      	mov	r4, r0
 800639e:	460d      	mov	r5, r1
 80063a0:	f7fa fbc2 	bl	8000b28 <__aeabi_dcmpgt>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 80f9 	bne.w	800659c <_dtoa_r+0x6bc>
 80063aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b6:	b118      	cbz	r0, 80063c0 <_dtoa_r+0x4e0>
 80063b8:	f018 0f01 	tst.w	r8, #1
 80063bc:	f040 80ee 	bne.w	800659c <_dtoa_r+0x6bc>
 80063c0:	4649      	mov	r1, r9
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fc90 	bl	8006ce8 <_Bfree>
 80063c8:	2300      	movs	r3, #0
 80063ca:	7033      	strb	r3, [r6, #0]
 80063cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ce:	3701      	adds	r7, #1
 80063d0:	601f      	str	r7, [r3, #0]
 80063d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 831d 	beq.w	8006a14 <_dtoa_r+0xb34>
 80063da:	601e      	str	r6, [r3, #0]
 80063dc:	e31a      	b.n	8006a14 <_dtoa_r+0xb34>
 80063de:	07e2      	lsls	r2, r4, #31
 80063e0:	d505      	bpl.n	80063ee <_dtoa_r+0x50e>
 80063e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063e6:	f7fa f90f 	bl	8000608 <__aeabi_dmul>
 80063ea:	3601      	adds	r6, #1
 80063ec:	2301      	movs	r3, #1
 80063ee:	1064      	asrs	r4, r4, #1
 80063f0:	3508      	adds	r5, #8
 80063f2:	e73f      	b.n	8006274 <_dtoa_r+0x394>
 80063f4:	2602      	movs	r6, #2
 80063f6:	e742      	b.n	800627e <_dtoa_r+0x39e>
 80063f8:	9c07      	ldr	r4, [sp, #28]
 80063fa:	9704      	str	r7, [sp, #16]
 80063fc:	e761      	b.n	80062c2 <_dtoa_r+0x3e2>
 80063fe:	4b27      	ldr	r3, [pc, #156]	@ (800649c <_dtoa_r+0x5bc>)
 8006400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006402:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006406:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800640a:	4454      	add	r4, sl
 800640c:	2900      	cmp	r1, #0
 800640e:	d053      	beq.n	80064b8 <_dtoa_r+0x5d8>
 8006410:	4928      	ldr	r1, [pc, #160]	@ (80064b4 <_dtoa_r+0x5d4>)
 8006412:	2000      	movs	r0, #0
 8006414:	f7fa fa22 	bl	800085c <__aeabi_ddiv>
 8006418:	4633      	mov	r3, r6
 800641a:	462a      	mov	r2, r5
 800641c:	f7f9 ff3c 	bl	8000298 <__aeabi_dsub>
 8006420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006424:	4656      	mov	r6, sl
 8006426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642a:	f7fa fb9d 	bl	8000b68 <__aeabi_d2iz>
 800642e:	4605      	mov	r5, r0
 8006430:	f7fa f880 	bl	8000534 <__aeabi_i2d>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643c:	f7f9 ff2c 	bl	8000298 <__aeabi_dsub>
 8006440:	3530      	adds	r5, #48	@ 0x30
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800644a:	f806 5b01 	strb.w	r5, [r6], #1
 800644e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006452:	f7fa fb4b 	bl	8000aec <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	d171      	bne.n	800653e <_dtoa_r+0x65e>
 800645a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645e:	4911      	ldr	r1, [pc, #68]	@ (80064a4 <_dtoa_r+0x5c4>)
 8006460:	2000      	movs	r0, #0
 8006462:	f7f9 ff19 	bl	8000298 <__aeabi_dsub>
 8006466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800646a:	f7fa fb3f 	bl	8000aec <__aeabi_dcmplt>
 800646e:	2800      	cmp	r0, #0
 8006470:	f040 8095 	bne.w	800659e <_dtoa_r+0x6be>
 8006474:	42a6      	cmp	r6, r4
 8006476:	f43f af50 	beq.w	800631a <_dtoa_r+0x43a>
 800647a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800647e:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <_dtoa_r+0x5c8>)
 8006480:	2200      	movs	r2, #0
 8006482:	f7fa f8c1 	bl	8000608 <__aeabi_dmul>
 8006486:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <_dtoa_r+0x5c8>)
 8006488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800648c:	2200      	movs	r2, #0
 800648e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006492:	f7fa f8b9 	bl	8000608 <__aeabi_dmul>
 8006496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649a:	e7c4      	b.n	8006426 <_dtoa_r+0x546>
 800649c:	08007cb0 	.word	0x08007cb0
 80064a0:	08007c88 	.word	0x08007c88
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	40240000 	.word	0x40240000
 80064ac:	401c0000 	.word	0x401c0000
 80064b0:	40140000 	.word	0x40140000
 80064b4:	3fe00000 	.word	0x3fe00000
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	f7fa f8a4 	bl	8000608 <__aeabi_dmul>
 80064c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80064c6:	4656      	mov	r6, sl
 80064c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064cc:	f7fa fb4c 	bl	8000b68 <__aeabi_d2iz>
 80064d0:	4605      	mov	r5, r0
 80064d2:	f7fa f82f 	bl	8000534 <__aeabi_i2d>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064de:	f7f9 fedb 	bl	8000298 <__aeabi_dsub>
 80064e2:	3530      	adds	r5, #48	@ 0x30
 80064e4:	f806 5b01 	strb.w	r5, [r6], #1
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	d124      	bne.n	8006542 <_dtoa_r+0x662>
 80064f8:	4bac      	ldr	r3, [pc, #688]	@ (80067ac <_dtoa_r+0x8cc>)
 80064fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064fe:	f7f9 fecd 	bl	800029c <__adddf3>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	f7fa fb0d 	bl	8000b28 <__aeabi_dcmpgt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d145      	bne.n	800659e <_dtoa_r+0x6be>
 8006512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006516:	49a5      	ldr	r1, [pc, #660]	@ (80067ac <_dtoa_r+0x8cc>)
 8006518:	2000      	movs	r0, #0
 800651a:	f7f9 febd 	bl	8000298 <__aeabi_dsub>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006526:	f7fa fae1 	bl	8000aec <__aeabi_dcmplt>
 800652a:	2800      	cmp	r0, #0
 800652c:	f43f aef5 	beq.w	800631a <_dtoa_r+0x43a>
 8006530:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006532:	1e73      	subs	r3, r6, #1
 8006534:	9315      	str	r3, [sp, #84]	@ 0x54
 8006536:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800653a:	2b30      	cmp	r3, #48	@ 0x30
 800653c:	d0f8      	beq.n	8006530 <_dtoa_r+0x650>
 800653e:	9f04      	ldr	r7, [sp, #16]
 8006540:	e73e      	b.n	80063c0 <_dtoa_r+0x4e0>
 8006542:	4b9b      	ldr	r3, [pc, #620]	@ (80067b0 <_dtoa_r+0x8d0>)
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800654c:	e7bc      	b.n	80064c8 <_dtoa_r+0x5e8>
 800654e:	d10c      	bne.n	800656a <_dtoa_r+0x68a>
 8006550:	4b98      	ldr	r3, [pc, #608]	@ (80067b4 <_dtoa_r+0x8d4>)
 8006552:	2200      	movs	r2, #0
 8006554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006558:	f7fa f856 	bl	8000608 <__aeabi_dmul>
 800655c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006560:	f7fa fad8 	bl	8000b14 <__aeabi_dcmpge>
 8006564:	2800      	cmp	r0, #0
 8006566:	f000 8157 	beq.w	8006818 <_dtoa_r+0x938>
 800656a:	2400      	movs	r4, #0
 800656c:	4625      	mov	r5, r4
 800656e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006570:	43db      	mvns	r3, r3
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	4656      	mov	r6, sl
 8006576:	2700      	movs	r7, #0
 8006578:	4621      	mov	r1, r4
 800657a:	4658      	mov	r0, fp
 800657c:	f000 fbb4 	bl	8006ce8 <_Bfree>
 8006580:	2d00      	cmp	r5, #0
 8006582:	d0dc      	beq.n	800653e <_dtoa_r+0x65e>
 8006584:	b12f      	cbz	r7, 8006592 <_dtoa_r+0x6b2>
 8006586:	42af      	cmp	r7, r5
 8006588:	d003      	beq.n	8006592 <_dtoa_r+0x6b2>
 800658a:	4639      	mov	r1, r7
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fbab 	bl	8006ce8 <_Bfree>
 8006592:	4629      	mov	r1, r5
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fba7 	bl	8006ce8 <_Bfree>
 800659a:	e7d0      	b.n	800653e <_dtoa_r+0x65e>
 800659c:	9704      	str	r7, [sp, #16]
 800659e:	4633      	mov	r3, r6
 80065a0:	461e      	mov	r6, r3
 80065a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065a6:	2a39      	cmp	r2, #57	@ 0x39
 80065a8:	d107      	bne.n	80065ba <_dtoa_r+0x6da>
 80065aa:	459a      	cmp	sl, r3
 80065ac:	d1f8      	bne.n	80065a0 <_dtoa_r+0x6c0>
 80065ae:	9a04      	ldr	r2, [sp, #16]
 80065b0:	3201      	adds	r2, #1
 80065b2:	9204      	str	r2, [sp, #16]
 80065b4:	2230      	movs	r2, #48	@ 0x30
 80065b6:	f88a 2000 	strb.w	r2, [sl]
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	3201      	adds	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e7bd      	b.n	800653e <_dtoa_r+0x65e>
 80065c2:	4b7b      	ldr	r3, [pc, #492]	@ (80067b0 <_dtoa_r+0x8d0>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	f7fa fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f aebb 	beq.w	8006352 <_dtoa_r+0x472>
 80065dc:	e6f0      	b.n	80063c0 <_dtoa_r+0x4e0>
 80065de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065e0:	2a00      	cmp	r2, #0
 80065e2:	f000 80db 	beq.w	800679c <_dtoa_r+0x8bc>
 80065e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e8:	2a01      	cmp	r2, #1
 80065ea:	f300 80bf 	bgt.w	800676c <_dtoa_r+0x88c>
 80065ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	f000 80b7 	beq.w	8006764 <_dtoa_r+0x884>
 80065f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065fc:	4646      	mov	r6, r8
 80065fe:	9a08      	ldr	r2, [sp, #32]
 8006600:	2101      	movs	r1, #1
 8006602:	441a      	add	r2, r3
 8006604:	4658      	mov	r0, fp
 8006606:	4498      	add	r8, r3
 8006608:	9208      	str	r2, [sp, #32]
 800660a:	f000 fc21 	bl	8006e50 <__i2b>
 800660e:	4605      	mov	r5, r0
 8006610:	b15e      	cbz	r6, 800662a <_dtoa_r+0x74a>
 8006612:	9b08      	ldr	r3, [sp, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd08      	ble.n	800662a <_dtoa_r+0x74a>
 8006618:	42b3      	cmp	r3, r6
 800661a:	9a08      	ldr	r2, [sp, #32]
 800661c:	bfa8      	it	ge
 800661e:	4633      	movge	r3, r6
 8006620:	eba8 0803 	sub.w	r8, r8, r3
 8006624:	1af6      	subs	r6, r6, r3
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	9308      	str	r3, [sp, #32]
 800662a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800662c:	b1f3      	cbz	r3, 800666c <_dtoa_r+0x78c>
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80b7 	beq.w	80067a4 <_dtoa_r+0x8c4>
 8006636:	b18c      	cbz	r4, 800665c <_dtoa_r+0x77c>
 8006638:	4629      	mov	r1, r5
 800663a:	4622      	mov	r2, r4
 800663c:	4658      	mov	r0, fp
 800663e:	f000 fcc7 	bl	8006fd0 <__pow5mult>
 8006642:	464a      	mov	r2, r9
 8006644:	4601      	mov	r1, r0
 8006646:	4605      	mov	r5, r0
 8006648:	4658      	mov	r0, fp
 800664a:	f000 fc17 	bl	8006e7c <__multiply>
 800664e:	4649      	mov	r1, r9
 8006650:	9004      	str	r0, [sp, #16]
 8006652:	4658      	mov	r0, fp
 8006654:	f000 fb48 	bl	8006ce8 <_Bfree>
 8006658:	9b04      	ldr	r3, [sp, #16]
 800665a:	4699      	mov	r9, r3
 800665c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665e:	1b1a      	subs	r2, r3, r4
 8006660:	d004      	beq.n	800666c <_dtoa_r+0x78c>
 8006662:	4649      	mov	r1, r9
 8006664:	4658      	mov	r0, fp
 8006666:	f000 fcb3 	bl	8006fd0 <__pow5mult>
 800666a:	4681      	mov	r9, r0
 800666c:	2101      	movs	r1, #1
 800666e:	4658      	mov	r0, fp
 8006670:	f000 fbee 	bl	8006e50 <__i2b>
 8006674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006676:	4604      	mov	r4, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 81cf 	beq.w	8006a1c <_dtoa_r+0xb3c>
 800667e:	461a      	mov	r2, r3
 8006680:	4601      	mov	r1, r0
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fca4 	bl	8006fd0 <__pow5mult>
 8006688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800668a:	2b01      	cmp	r3, #1
 800668c:	4604      	mov	r4, r0
 800668e:	f300 8095 	bgt.w	80067bc <_dtoa_r+0x8dc>
 8006692:	9b02      	ldr	r3, [sp, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 8087 	bne.w	80067a8 <_dtoa_r+0x8c8>
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 8089 	bne.w	80067b8 <_dtoa_r+0x8d8>
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066ac:	0d1b      	lsrs	r3, r3, #20
 80066ae:	051b      	lsls	r3, r3, #20
 80066b0:	b12b      	cbz	r3, 80066be <_dtoa_r+0x7de>
 80066b2:	9b08      	ldr	r3, [sp, #32]
 80066b4:	3301      	adds	r3, #1
 80066b6:	9308      	str	r3, [sp, #32]
 80066b8:	f108 0801 	add.w	r8, r8, #1
 80066bc:	2301      	movs	r3, #1
 80066be:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 81b0 	beq.w	8006a28 <_dtoa_r+0xb48>
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066ce:	6918      	ldr	r0, [r3, #16]
 80066d0:	f000 fb72 	bl	8006db8 <__hi0bits>
 80066d4:	f1c0 0020 	rsb	r0, r0, #32
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	4418      	add	r0, r3
 80066dc:	f010 001f 	ands.w	r0, r0, #31
 80066e0:	d077      	beq.n	80067d2 <_dtoa_r+0x8f2>
 80066e2:	f1c0 0320 	rsb	r3, r0, #32
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	dd6b      	ble.n	80067c2 <_dtoa_r+0x8e2>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	f1c0 001c 	rsb	r0, r0, #28
 80066f0:	4403      	add	r3, r0
 80066f2:	4480      	add	r8, r0
 80066f4:	4406      	add	r6, r0
 80066f6:	9308      	str	r3, [sp, #32]
 80066f8:	f1b8 0f00 	cmp.w	r8, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x82a>
 80066fe:	4649      	mov	r1, r9
 8006700:	4642      	mov	r2, r8
 8006702:	4658      	mov	r0, fp
 8006704:	f000 fcbe 	bl	8007084 <__lshift>
 8006708:	4681      	mov	r9, r0
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd05      	ble.n	800671c <_dtoa_r+0x83c>
 8006710:	4621      	mov	r1, r4
 8006712:	461a      	mov	r2, r3
 8006714:	4658      	mov	r0, fp
 8006716:	f000 fcb5 	bl	8007084 <__lshift>
 800671a:	4604      	mov	r4, r0
 800671c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800671e:	2b00      	cmp	r3, #0
 8006720:	d059      	beq.n	80067d6 <_dtoa_r+0x8f6>
 8006722:	4621      	mov	r1, r4
 8006724:	4648      	mov	r0, r9
 8006726:	f000 fd19 	bl	800715c <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	da53      	bge.n	80067d6 <_dtoa_r+0x8f6>
 800672e:	1e7b      	subs	r3, r7, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	4649      	mov	r1, r9
 8006734:	2300      	movs	r3, #0
 8006736:	220a      	movs	r2, #10
 8006738:	4658      	mov	r0, fp
 800673a:	f000 faf7 	bl	8006d2c <__multadd>
 800673e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006740:	4681      	mov	r9, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8172 	beq.w	8006a2c <_dtoa_r+0xb4c>
 8006748:	2300      	movs	r3, #0
 800674a:	4629      	mov	r1, r5
 800674c:	220a      	movs	r2, #10
 800674e:	4658      	mov	r0, fp
 8006750:	f000 faec 	bl	8006d2c <__multadd>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	4605      	mov	r5, r0
 800675a:	dc67      	bgt.n	800682c <_dtoa_r+0x94c>
 800675c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675e:	2b02      	cmp	r3, #2
 8006760:	dc41      	bgt.n	80067e6 <_dtoa_r+0x906>
 8006762:	e063      	b.n	800682c <_dtoa_r+0x94c>
 8006764:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800676a:	e746      	b.n	80065fa <_dtoa_r+0x71a>
 800676c:	9b07      	ldr	r3, [sp, #28]
 800676e:	1e5c      	subs	r4, r3, #1
 8006770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006772:	42a3      	cmp	r3, r4
 8006774:	bfbf      	itttt	lt
 8006776:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006778:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800677a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800677c:	1ae3      	sublt	r3, r4, r3
 800677e:	bfb4      	ite	lt
 8006780:	18d2      	addlt	r2, r2, r3
 8006782:	1b1c      	subge	r4, r3, r4
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	bfbc      	itt	lt
 8006788:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800678a:	2400      	movlt	r4, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb5      	itete	lt
 8006790:	eba8 0603 	sublt.w	r6, r8, r3
 8006794:	9b07      	ldrge	r3, [sp, #28]
 8006796:	2300      	movlt	r3, #0
 8006798:	4646      	movge	r6, r8
 800679a:	e730      	b.n	80065fe <_dtoa_r+0x71e>
 800679c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800679e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80067a0:	4646      	mov	r6, r8
 80067a2:	e735      	b.n	8006610 <_dtoa_r+0x730>
 80067a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067a6:	e75c      	b.n	8006662 <_dtoa_r+0x782>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e788      	b.n	80066be <_dtoa_r+0x7de>
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	40240000 	.word	0x40240000
 80067b4:	40140000 	.word	0x40140000
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	e780      	b.n	80066be <_dtoa_r+0x7de>
 80067bc:	2300      	movs	r3, #0
 80067be:	930a      	str	r3, [sp, #40]	@ 0x28
 80067c0:	e782      	b.n	80066c8 <_dtoa_r+0x7e8>
 80067c2:	d099      	beq.n	80066f8 <_dtoa_r+0x818>
 80067c4:	9a08      	ldr	r2, [sp, #32]
 80067c6:	331c      	adds	r3, #28
 80067c8:	441a      	add	r2, r3
 80067ca:	4498      	add	r8, r3
 80067cc:	441e      	add	r6, r3
 80067ce:	9208      	str	r2, [sp, #32]
 80067d0:	e792      	b.n	80066f8 <_dtoa_r+0x818>
 80067d2:	4603      	mov	r3, r0
 80067d4:	e7f6      	b.n	80067c4 <_dtoa_r+0x8e4>
 80067d6:	9b07      	ldr	r3, [sp, #28]
 80067d8:	9704      	str	r7, [sp, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dc20      	bgt.n	8006820 <_dtoa_r+0x940>
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	dd1e      	ble.n	8006824 <_dtoa_r+0x944>
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f aec0 	bne.w	800656e <_dtoa_r+0x68e>
 80067ee:	4621      	mov	r1, r4
 80067f0:	2205      	movs	r2, #5
 80067f2:	4658      	mov	r0, fp
 80067f4:	f000 fa9a 	bl	8006d2c <__multadd>
 80067f8:	4601      	mov	r1, r0
 80067fa:	4604      	mov	r4, r0
 80067fc:	4648      	mov	r0, r9
 80067fe:	f000 fcad 	bl	800715c <__mcmp>
 8006802:	2800      	cmp	r0, #0
 8006804:	f77f aeb3 	ble.w	800656e <_dtoa_r+0x68e>
 8006808:	4656      	mov	r6, sl
 800680a:	2331      	movs	r3, #49	@ 0x31
 800680c:	f806 3b01 	strb.w	r3, [r6], #1
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	3301      	adds	r3, #1
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	e6ae      	b.n	8006576 <_dtoa_r+0x696>
 8006818:	9c07      	ldr	r4, [sp, #28]
 800681a:	9704      	str	r7, [sp, #16]
 800681c:	4625      	mov	r5, r4
 800681e:	e7f3      	b.n	8006808 <_dtoa_r+0x928>
 8006820:	9b07      	ldr	r3, [sp, #28]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8104 	beq.w	8006a34 <_dtoa_r+0xb54>
 800682c:	2e00      	cmp	r6, #0
 800682e:	dd05      	ble.n	800683c <_dtoa_r+0x95c>
 8006830:	4629      	mov	r1, r5
 8006832:	4632      	mov	r2, r6
 8006834:	4658      	mov	r0, fp
 8006836:	f000 fc25 	bl	8007084 <__lshift>
 800683a:	4605      	mov	r5, r0
 800683c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d05a      	beq.n	80068f8 <_dtoa_r+0xa18>
 8006842:	6869      	ldr	r1, [r5, #4]
 8006844:	4658      	mov	r0, fp
 8006846:	f000 fa0f 	bl	8006c68 <_Balloc>
 800684a:	4606      	mov	r6, r0
 800684c:	b928      	cbnz	r0, 800685a <_dtoa_r+0x97a>
 800684e:	4b84      	ldr	r3, [pc, #528]	@ (8006a60 <_dtoa_r+0xb80>)
 8006850:	4602      	mov	r2, r0
 8006852:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006856:	f7ff bb5a 	b.w	8005f0e <_dtoa_r+0x2e>
 800685a:	692a      	ldr	r2, [r5, #16]
 800685c:	3202      	adds	r2, #2
 800685e:	0092      	lsls	r2, r2, #2
 8006860:	f105 010c 	add.w	r1, r5, #12
 8006864:	300c      	adds	r0, #12
 8006866:	f001 f813 	bl	8007890 <memcpy>
 800686a:	2201      	movs	r2, #1
 800686c:	4631      	mov	r1, r6
 800686e:	4658      	mov	r0, fp
 8006870:	f000 fc08 	bl	8007084 <__lshift>
 8006874:	f10a 0301 	add.w	r3, sl, #1
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	9b00      	ldr	r3, [sp, #0]
 800687c:	4453      	add	r3, sl
 800687e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	462f      	mov	r7, r5
 8006888:	930a      	str	r3, [sp, #40]	@ 0x28
 800688a:	4605      	mov	r5, r0
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	4621      	mov	r1, r4
 8006890:	3b01      	subs	r3, #1
 8006892:	4648      	mov	r0, r9
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	f7ff fa9a 	bl	8005dce <quorem>
 800689a:	4639      	mov	r1, r7
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068a2:	4648      	mov	r0, r9
 80068a4:	f000 fc5a 	bl	800715c <__mcmp>
 80068a8:	462a      	mov	r2, r5
 80068aa:	9008      	str	r0, [sp, #32]
 80068ac:	4621      	mov	r1, r4
 80068ae:	4658      	mov	r0, fp
 80068b0:	f000 fc70 	bl	8007194 <__mdiff>
 80068b4:	68c2      	ldr	r2, [r0, #12]
 80068b6:	4606      	mov	r6, r0
 80068b8:	bb02      	cbnz	r2, 80068fc <_dtoa_r+0xa1c>
 80068ba:	4601      	mov	r1, r0
 80068bc:	4648      	mov	r0, r9
 80068be:	f000 fc4d 	bl	800715c <__mcmp>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4631      	mov	r1, r6
 80068c6:	4658      	mov	r0, fp
 80068c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068ca:	f000 fa0d 	bl	8006ce8 <_Bfree>
 80068ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068d2:	9e07      	ldr	r6, [sp, #28]
 80068d4:	ea43 0102 	orr.w	r1, r3, r2
 80068d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068da:	4319      	orrs	r1, r3
 80068dc:	d110      	bne.n	8006900 <_dtoa_r+0xa20>
 80068de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068e2:	d029      	beq.n	8006938 <_dtoa_r+0xa58>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dd02      	ble.n	80068f0 <_dtoa_r+0xa10>
 80068ea:	9b02      	ldr	r3, [sp, #8]
 80068ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80068f0:	9b00      	ldr	r3, [sp, #0]
 80068f2:	f883 8000 	strb.w	r8, [r3]
 80068f6:	e63f      	b.n	8006578 <_dtoa_r+0x698>
 80068f8:	4628      	mov	r0, r5
 80068fa:	e7bb      	b.n	8006874 <_dtoa_r+0x994>
 80068fc:	2201      	movs	r2, #1
 80068fe:	e7e1      	b.n	80068c4 <_dtoa_r+0x9e4>
 8006900:	9b08      	ldr	r3, [sp, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	db04      	blt.n	8006910 <_dtoa_r+0xa30>
 8006906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006908:	430b      	orrs	r3, r1
 800690a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800690c:	430b      	orrs	r3, r1
 800690e:	d120      	bne.n	8006952 <_dtoa_r+0xa72>
 8006910:	2a00      	cmp	r2, #0
 8006912:	dded      	ble.n	80068f0 <_dtoa_r+0xa10>
 8006914:	4649      	mov	r1, r9
 8006916:	2201      	movs	r2, #1
 8006918:	4658      	mov	r0, fp
 800691a:	f000 fbb3 	bl	8007084 <__lshift>
 800691e:	4621      	mov	r1, r4
 8006920:	4681      	mov	r9, r0
 8006922:	f000 fc1b 	bl	800715c <__mcmp>
 8006926:	2800      	cmp	r0, #0
 8006928:	dc03      	bgt.n	8006932 <_dtoa_r+0xa52>
 800692a:	d1e1      	bne.n	80068f0 <_dtoa_r+0xa10>
 800692c:	f018 0f01 	tst.w	r8, #1
 8006930:	d0de      	beq.n	80068f0 <_dtoa_r+0xa10>
 8006932:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006936:	d1d8      	bne.n	80068ea <_dtoa_r+0xa0a>
 8006938:	9a00      	ldr	r2, [sp, #0]
 800693a:	2339      	movs	r3, #57	@ 0x39
 800693c:	7013      	strb	r3, [r2, #0]
 800693e:	4633      	mov	r3, r6
 8006940:	461e      	mov	r6, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006948:	2a39      	cmp	r2, #57	@ 0x39
 800694a:	d052      	beq.n	80069f2 <_dtoa_r+0xb12>
 800694c:	3201      	adds	r2, #1
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e612      	b.n	8006578 <_dtoa_r+0x698>
 8006952:	2a00      	cmp	r2, #0
 8006954:	dd07      	ble.n	8006966 <_dtoa_r+0xa86>
 8006956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800695a:	d0ed      	beq.n	8006938 <_dtoa_r+0xa58>
 800695c:	9a00      	ldr	r2, [sp, #0]
 800695e:	f108 0301 	add.w	r3, r8, #1
 8006962:	7013      	strb	r3, [r2, #0]
 8006964:	e608      	b.n	8006578 <_dtoa_r+0x698>
 8006966:	9b07      	ldr	r3, [sp, #28]
 8006968:	9a07      	ldr	r2, [sp, #28]
 800696a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800696e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006970:	4293      	cmp	r3, r2
 8006972:	d028      	beq.n	80069c6 <_dtoa_r+0xae6>
 8006974:	4649      	mov	r1, r9
 8006976:	2300      	movs	r3, #0
 8006978:	220a      	movs	r2, #10
 800697a:	4658      	mov	r0, fp
 800697c:	f000 f9d6 	bl	8006d2c <__multadd>
 8006980:	42af      	cmp	r7, r5
 8006982:	4681      	mov	r9, r0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	f04f 020a 	mov.w	r2, #10
 800698c:	4639      	mov	r1, r7
 800698e:	4658      	mov	r0, fp
 8006990:	d107      	bne.n	80069a2 <_dtoa_r+0xac2>
 8006992:	f000 f9cb 	bl	8006d2c <__multadd>
 8006996:	4607      	mov	r7, r0
 8006998:	4605      	mov	r5, r0
 800699a:	9b07      	ldr	r3, [sp, #28]
 800699c:	3301      	adds	r3, #1
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	e774      	b.n	800688c <_dtoa_r+0x9ac>
 80069a2:	f000 f9c3 	bl	8006d2c <__multadd>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4607      	mov	r7, r0
 80069aa:	2300      	movs	r3, #0
 80069ac:	220a      	movs	r2, #10
 80069ae:	4658      	mov	r0, fp
 80069b0:	f000 f9bc 	bl	8006d2c <__multadd>
 80069b4:	4605      	mov	r5, r0
 80069b6:	e7f0      	b.n	800699a <_dtoa_r+0xaba>
 80069b8:	9b00      	ldr	r3, [sp, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bfcc      	ite	gt
 80069be:	461e      	movgt	r6, r3
 80069c0:	2601      	movle	r6, #1
 80069c2:	4456      	add	r6, sl
 80069c4:	2700      	movs	r7, #0
 80069c6:	4649      	mov	r1, r9
 80069c8:	2201      	movs	r2, #1
 80069ca:	4658      	mov	r0, fp
 80069cc:	f000 fb5a 	bl	8007084 <__lshift>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4681      	mov	r9, r0
 80069d4:	f000 fbc2 	bl	800715c <__mcmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	dcb0      	bgt.n	800693e <_dtoa_r+0xa5e>
 80069dc:	d102      	bne.n	80069e4 <_dtoa_r+0xb04>
 80069de:	f018 0f01 	tst.w	r8, #1
 80069e2:	d1ac      	bne.n	800693e <_dtoa_r+0xa5e>
 80069e4:	4633      	mov	r3, r6
 80069e6:	461e      	mov	r6, r3
 80069e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ec:	2a30      	cmp	r2, #48	@ 0x30
 80069ee:	d0fa      	beq.n	80069e6 <_dtoa_r+0xb06>
 80069f0:	e5c2      	b.n	8006578 <_dtoa_r+0x698>
 80069f2:	459a      	cmp	sl, r3
 80069f4:	d1a4      	bne.n	8006940 <_dtoa_r+0xa60>
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	2331      	movs	r3, #49	@ 0x31
 80069fe:	f88a 3000 	strb.w	r3, [sl]
 8006a02:	e5b9      	b.n	8006578 <_dtoa_r+0x698>
 8006a04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a64 <_dtoa_r+0xb84>
 8006a0a:	b11b      	cbz	r3, 8006a14 <_dtoa_r+0xb34>
 8006a0c:	f10a 0308 	add.w	r3, sl, #8
 8006a10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4650      	mov	r0, sl
 8006a16:	b019      	add	sp, #100	@ 0x64
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f77f ae37 	ble.w	8006692 <_dtoa_r+0x7b2>
 8006a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e655      	b.n	80066d8 <_dtoa_r+0x7f8>
 8006a2c:	9b00      	ldr	r3, [sp, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f77f aed6 	ble.w	80067e0 <_dtoa_r+0x900>
 8006a34:	4656      	mov	r6, sl
 8006a36:	4621      	mov	r1, r4
 8006a38:	4648      	mov	r0, r9
 8006a3a:	f7ff f9c8 	bl	8005dce <quorem>
 8006a3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a42:	f806 8b01 	strb.w	r8, [r6], #1
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	eba6 020a 	sub.w	r2, r6, sl
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	ddb3      	ble.n	80069b8 <_dtoa_r+0xad8>
 8006a50:	4649      	mov	r1, r9
 8006a52:	2300      	movs	r3, #0
 8006a54:	220a      	movs	r2, #10
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 f968 	bl	8006d2c <__multadd>
 8006a5c:	4681      	mov	r9, r0
 8006a5e:	e7ea      	b.n	8006a36 <_dtoa_r+0xb56>
 8006a60:	08007c0c 	.word	0x08007c0c
 8006a64:	08007b90 	.word	0x08007b90

08006a68 <_free_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d041      	beq.n	8006af4 <_free_r+0x8c>
 8006a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a74:	1f0c      	subs	r4, r1, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bfb8      	it	lt
 8006a7a:	18e4      	addlt	r4, r4, r3
 8006a7c:	f000 f8e8 	bl	8006c50 <__malloc_lock>
 8006a80:	4a1d      	ldr	r2, [pc, #116]	@ (8006af8 <_free_r+0x90>)
 8006a82:	6813      	ldr	r3, [r2, #0]
 8006a84:	b933      	cbnz	r3, 8006a94 <_free_r+0x2c>
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	6014      	str	r4, [r2, #0]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a90:	f000 b8e4 	b.w	8006c5c <__malloc_unlock>
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d908      	bls.n	8006aaa <_free_r+0x42>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	1821      	adds	r1, r4, r0
 8006a9c:	428b      	cmp	r3, r1
 8006a9e:	bf01      	itttt	eq
 8006aa0:	6819      	ldreq	r1, [r3, #0]
 8006aa2:	685b      	ldreq	r3, [r3, #4]
 8006aa4:	1809      	addeq	r1, r1, r0
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	e7ed      	b.n	8006a86 <_free_r+0x1e>
 8006aaa:	461a      	mov	r2, r3
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b10b      	cbz	r3, 8006ab4 <_free_r+0x4c>
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	d9fa      	bls.n	8006aaa <_free_r+0x42>
 8006ab4:	6811      	ldr	r1, [r2, #0]
 8006ab6:	1850      	adds	r0, r2, r1
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d10b      	bne.n	8006ad4 <_free_r+0x6c>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	4401      	add	r1, r0
 8006ac0:	1850      	adds	r0, r2, r1
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	d1e0      	bne.n	8006a8a <_free_r+0x22>
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	6053      	str	r3, [r2, #4]
 8006ace:	4408      	add	r0, r1
 8006ad0:	6010      	str	r0, [r2, #0]
 8006ad2:	e7da      	b.n	8006a8a <_free_r+0x22>
 8006ad4:	d902      	bls.n	8006adc <_free_r+0x74>
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	e7d6      	b.n	8006a8a <_free_r+0x22>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	1821      	adds	r1, r4, r0
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	bf04      	itt	eq
 8006ae4:	6819      	ldreq	r1, [r3, #0]
 8006ae6:	685b      	ldreq	r3, [r3, #4]
 8006ae8:	6063      	str	r3, [r4, #4]
 8006aea:	bf04      	itt	eq
 8006aec:	1809      	addeq	r1, r1, r0
 8006aee:	6021      	streq	r1, [r4, #0]
 8006af0:	6054      	str	r4, [r2, #4]
 8006af2:	e7ca      	b.n	8006a8a <_free_r+0x22>
 8006af4:	bd38      	pop	{r3, r4, r5, pc}
 8006af6:	bf00      	nop
 8006af8:	200004c4 	.word	0x200004c4

08006afc <malloc>:
 8006afc:	4b02      	ldr	r3, [pc, #8]	@ (8006b08 <malloc+0xc>)
 8006afe:	4601      	mov	r1, r0
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f000 b825 	b.w	8006b50 <_malloc_r>
 8006b06:	bf00      	nop
 8006b08:	2000002c 	.word	0x2000002c

08006b0c <sbrk_aligned>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b4c <sbrk_aligned+0x40>)
 8006b10:	460c      	mov	r4, r1
 8006b12:	6831      	ldr	r1, [r6, #0]
 8006b14:	4605      	mov	r5, r0
 8006b16:	b911      	cbnz	r1, 8006b1e <sbrk_aligned+0x12>
 8006b18:	f000 feaa 	bl	8007870 <_sbrk_r>
 8006b1c:	6030      	str	r0, [r6, #0]
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 fea5 	bl	8007870 <_sbrk_r>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d103      	bne.n	8006b32 <sbrk_aligned+0x26>
 8006b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b2e:	4620      	mov	r0, r4
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
 8006b32:	1cc4      	adds	r4, r0, #3
 8006b34:	f024 0403 	bic.w	r4, r4, #3
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d0f8      	beq.n	8006b2e <sbrk_aligned+0x22>
 8006b3c:	1a21      	subs	r1, r4, r0
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 fe96 	bl	8007870 <_sbrk_r>
 8006b44:	3001      	adds	r0, #1
 8006b46:	d1f2      	bne.n	8006b2e <sbrk_aligned+0x22>
 8006b48:	e7ef      	b.n	8006b2a <sbrk_aligned+0x1e>
 8006b4a:	bf00      	nop
 8006b4c:	200004c0 	.word	0x200004c0

08006b50 <_malloc_r>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	1ccd      	adds	r5, r1, #3
 8006b56:	f025 0503 	bic.w	r5, r5, #3
 8006b5a:	3508      	adds	r5, #8
 8006b5c:	2d0c      	cmp	r5, #12
 8006b5e:	bf38      	it	cc
 8006b60:	250c      	movcc	r5, #12
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	4606      	mov	r6, r0
 8006b66:	db01      	blt.n	8006b6c <_malloc_r+0x1c>
 8006b68:	42a9      	cmp	r1, r5
 8006b6a:	d904      	bls.n	8006b76 <_malloc_r+0x26>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	2000      	movs	r0, #0
 8006b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c4c <_malloc_r+0xfc>
 8006b7a:	f000 f869 	bl	8006c50 <__malloc_lock>
 8006b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b82:	461c      	mov	r4, r3
 8006b84:	bb44      	cbnz	r4, 8006bd8 <_malloc_r+0x88>
 8006b86:	4629      	mov	r1, r5
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7ff ffbf 	bl	8006b0c <sbrk_aligned>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	4604      	mov	r4, r0
 8006b92:	d158      	bne.n	8006c46 <_malloc_r+0xf6>
 8006b94:	f8d8 4000 	ldr.w	r4, [r8]
 8006b98:	4627      	mov	r7, r4
 8006b9a:	2f00      	cmp	r7, #0
 8006b9c:	d143      	bne.n	8006c26 <_malloc_r+0xd6>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	d04b      	beq.n	8006c3a <_malloc_r+0xea>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	eb04 0903 	add.w	r9, r4, r3
 8006bac:	f000 fe60 	bl	8007870 <_sbrk_r>
 8006bb0:	4581      	cmp	r9, r0
 8006bb2:	d142      	bne.n	8006c3a <_malloc_r+0xea>
 8006bb4:	6821      	ldr	r1, [r4, #0]
 8006bb6:	1a6d      	subs	r5, r5, r1
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff ffa6 	bl	8006b0c <sbrk_aligned>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d03a      	beq.n	8006c3a <_malloc_r+0xea>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	442b      	add	r3, r5
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	f8d8 3000 	ldr.w	r3, [r8]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	bb62      	cbnz	r2, 8006c2c <_malloc_r+0xdc>
 8006bd2:	f8c8 7000 	str.w	r7, [r8]
 8006bd6:	e00f      	b.n	8006bf8 <_malloc_r+0xa8>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	1b52      	subs	r2, r2, r5
 8006bdc:	d420      	bmi.n	8006c20 <_malloc_r+0xd0>
 8006bde:	2a0b      	cmp	r2, #11
 8006be0:	d917      	bls.n	8006c12 <_malloc_r+0xc2>
 8006be2:	1961      	adds	r1, r4, r5
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	6025      	str	r5, [r4, #0]
 8006be8:	bf18      	it	ne
 8006bea:	6059      	strne	r1, [r3, #4]
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	bf08      	it	eq
 8006bf0:	f8c8 1000 	streq.w	r1, [r8]
 8006bf4:	5162      	str	r2, [r4, r5]
 8006bf6:	604b      	str	r3, [r1, #4]
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f82f 	bl	8006c5c <__malloc_unlock>
 8006bfe:	f104 000b 	add.w	r0, r4, #11
 8006c02:	1d23      	adds	r3, r4, #4
 8006c04:	f020 0007 	bic.w	r0, r0, #7
 8006c08:	1ac2      	subs	r2, r0, r3
 8006c0a:	bf1c      	itt	ne
 8006c0c:	1a1b      	subne	r3, r3, r0
 8006c0e:	50a3      	strne	r3, [r4, r2]
 8006c10:	e7af      	b.n	8006b72 <_malloc_r+0x22>
 8006c12:	6862      	ldr	r2, [r4, #4]
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	bf0c      	ite	eq
 8006c18:	f8c8 2000 	streq.w	r2, [r8]
 8006c1c:	605a      	strne	r2, [r3, #4]
 8006c1e:	e7eb      	b.n	8006bf8 <_malloc_r+0xa8>
 8006c20:	4623      	mov	r3, r4
 8006c22:	6864      	ldr	r4, [r4, #4]
 8006c24:	e7ae      	b.n	8006b84 <_malloc_r+0x34>
 8006c26:	463c      	mov	r4, r7
 8006c28:	687f      	ldr	r7, [r7, #4]
 8006c2a:	e7b6      	b.n	8006b9a <_malloc_r+0x4a>
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d1fb      	bne.n	8006c2c <_malloc_r+0xdc>
 8006c34:	2300      	movs	r3, #0
 8006c36:	6053      	str	r3, [r2, #4]
 8006c38:	e7de      	b.n	8006bf8 <_malloc_r+0xa8>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f000 f80c 	bl	8006c5c <__malloc_unlock>
 8006c44:	e794      	b.n	8006b70 <_malloc_r+0x20>
 8006c46:	6005      	str	r5, [r0, #0]
 8006c48:	e7d6      	b.n	8006bf8 <_malloc_r+0xa8>
 8006c4a:	bf00      	nop
 8006c4c:	200004c4 	.word	0x200004c4

08006c50 <__malloc_lock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	@ (8006c58 <__malloc_lock+0x8>)
 8006c52:	f7ff b8ba 	b.w	8005dca <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	200004bc 	.word	0x200004bc

08006c5c <__malloc_unlock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	@ (8006c64 <__malloc_unlock+0x8>)
 8006c5e:	f7ff b8b5 	b.w	8005dcc <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	200004bc 	.word	0x200004bc

08006c68 <_Balloc>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	69c6      	ldr	r6, [r0, #28]
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	b976      	cbnz	r6, 8006c90 <_Balloc+0x28>
 8006c72:	2010      	movs	r0, #16
 8006c74:	f7ff ff42 	bl	8006afc <malloc>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	61e0      	str	r0, [r4, #28]
 8006c7c:	b920      	cbnz	r0, 8006c88 <_Balloc+0x20>
 8006c7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ce0 <_Balloc+0x78>)
 8006c80:	4818      	ldr	r0, [pc, #96]	@ (8006ce4 <_Balloc+0x7c>)
 8006c82:	216b      	movs	r1, #107	@ 0x6b
 8006c84:	f000 fe12 	bl	80078ac <__assert_func>
 8006c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c8c:	6006      	str	r6, [r0, #0]
 8006c8e:	60c6      	str	r6, [r0, #12]
 8006c90:	69e6      	ldr	r6, [r4, #28]
 8006c92:	68f3      	ldr	r3, [r6, #12]
 8006c94:	b183      	cbz	r3, 8006cb8 <_Balloc+0x50>
 8006c96:	69e3      	ldr	r3, [r4, #28]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c9e:	b9b8      	cbnz	r0, 8006cd0 <_Balloc+0x68>
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ca6:	1d72      	adds	r2, r6, #5
 8006ca8:	0092      	lsls	r2, r2, #2
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fe1c 	bl	80078e8 <_calloc_r>
 8006cb0:	b160      	cbz	r0, 8006ccc <_Balloc+0x64>
 8006cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cb6:	e00e      	b.n	8006cd6 <_Balloc+0x6e>
 8006cb8:	2221      	movs	r2, #33	@ 0x21
 8006cba:	2104      	movs	r1, #4
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fe13 	bl	80078e8 <_calloc_r>
 8006cc2:	69e3      	ldr	r3, [r4, #28]
 8006cc4:	60f0      	str	r0, [r6, #12]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e4      	bne.n	8006c96 <_Balloc+0x2e>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	6802      	ldr	r2, [r0, #0]
 8006cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cdc:	e7f7      	b.n	8006cce <_Balloc+0x66>
 8006cde:	bf00      	nop
 8006ce0:	08007b9d 	.word	0x08007b9d
 8006ce4:	08007c1d 	.word	0x08007c1d

08006ce8 <_Bfree>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	69c6      	ldr	r6, [r0, #28]
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b976      	cbnz	r6, 8006d10 <_Bfree+0x28>
 8006cf2:	2010      	movs	r0, #16
 8006cf4:	f7ff ff02 	bl	8006afc <malloc>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	61e8      	str	r0, [r5, #28]
 8006cfc:	b920      	cbnz	r0, 8006d08 <_Bfree+0x20>
 8006cfe:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <_Bfree+0x3c>)
 8006d00:	4809      	ldr	r0, [pc, #36]	@ (8006d28 <_Bfree+0x40>)
 8006d02:	218f      	movs	r1, #143	@ 0x8f
 8006d04:	f000 fdd2 	bl	80078ac <__assert_func>
 8006d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d0c:	6006      	str	r6, [r0, #0]
 8006d0e:	60c6      	str	r6, [r0, #12]
 8006d10:	b13c      	cbz	r4, 8006d22 <_Bfree+0x3a>
 8006d12:	69eb      	ldr	r3, [r5, #28]
 8006d14:	6862      	ldr	r2, [r4, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d1c:	6021      	str	r1, [r4, #0]
 8006d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	08007b9d 	.word	0x08007b9d
 8006d28:	08007c1d 	.word	0x08007c1d

08006d2c <__multadd>:
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	690d      	ldr	r5, [r1, #16]
 8006d32:	4607      	mov	r7, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	461e      	mov	r6, r3
 8006d38:	f101 0c14 	add.w	ip, r1, #20
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d42:	b299      	uxth	r1, r3
 8006d44:	fb02 6101 	mla	r1, r2, r1, r6
 8006d48:	0c1e      	lsrs	r6, r3, #16
 8006d4a:	0c0b      	lsrs	r3, r1, #16
 8006d4c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d50:	b289      	uxth	r1, r1
 8006d52:	3001      	adds	r0, #1
 8006d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d58:	4285      	cmp	r5, r0
 8006d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d62:	dcec      	bgt.n	8006d3e <__multadd+0x12>
 8006d64:	b30e      	cbz	r6, 8006daa <__multadd+0x7e>
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dc19      	bgt.n	8006da0 <__multadd+0x74>
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	4638      	mov	r0, r7
 8006d70:	3101      	adds	r1, #1
 8006d72:	f7ff ff79 	bl	8006c68 <_Balloc>
 8006d76:	4680      	mov	r8, r0
 8006d78:	b928      	cbnz	r0, 8006d86 <__multadd+0x5a>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <__multadd+0x84>)
 8006d7e:	480d      	ldr	r0, [pc, #52]	@ (8006db4 <__multadd+0x88>)
 8006d80:	21ba      	movs	r1, #186	@ 0xba
 8006d82:	f000 fd93 	bl	80078ac <__assert_func>
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	3202      	adds	r2, #2
 8006d8a:	f104 010c 	add.w	r1, r4, #12
 8006d8e:	0092      	lsls	r2, r2, #2
 8006d90:	300c      	adds	r0, #12
 8006d92:	f000 fd7d 	bl	8007890 <memcpy>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7ff ffa5 	bl	8006ce8 <_Bfree>
 8006d9e:	4644      	mov	r4, r8
 8006da0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006da4:	3501      	adds	r5, #1
 8006da6:	615e      	str	r6, [r3, #20]
 8006da8:	6125      	str	r5, [r4, #16]
 8006daa:	4620      	mov	r0, r4
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	08007c0c 	.word	0x08007c0c
 8006db4:	08007c1d 	.word	0x08007c1d

08006db8 <__hi0bits>:
 8006db8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	bf36      	itet	cc
 8006dc0:	0403      	lslcc	r3, r0, #16
 8006dc2:	2000      	movcs	r0, #0
 8006dc4:	2010      	movcc	r0, #16
 8006dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dca:	bf3c      	itt	cc
 8006dcc:	021b      	lslcc	r3, r3, #8
 8006dce:	3008      	addcc	r0, #8
 8006dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dd4:	bf3c      	itt	cc
 8006dd6:	011b      	lslcc	r3, r3, #4
 8006dd8:	3004      	addcc	r0, #4
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	bf3c      	itt	cc
 8006de0:	009b      	lslcc	r3, r3, #2
 8006de2:	3002      	addcc	r0, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db05      	blt.n	8006df4 <__hi0bits+0x3c>
 8006de8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dec:	f100 0001 	add.w	r0, r0, #1
 8006df0:	bf08      	it	eq
 8006df2:	2020      	moveq	r0, #32
 8006df4:	4770      	bx	lr

08006df6 <__lo0bits>:
 8006df6:	6803      	ldr	r3, [r0, #0]
 8006df8:	4602      	mov	r2, r0
 8006dfa:	f013 0007 	ands.w	r0, r3, #7
 8006dfe:	d00b      	beq.n	8006e18 <__lo0bits+0x22>
 8006e00:	07d9      	lsls	r1, r3, #31
 8006e02:	d421      	bmi.n	8006e48 <__lo0bits+0x52>
 8006e04:	0798      	lsls	r0, r3, #30
 8006e06:	bf49      	itett	mi
 8006e08:	085b      	lsrmi	r3, r3, #1
 8006e0a:	089b      	lsrpl	r3, r3, #2
 8006e0c:	2001      	movmi	r0, #1
 8006e0e:	6013      	strmi	r3, [r2, #0]
 8006e10:	bf5c      	itt	pl
 8006e12:	6013      	strpl	r3, [r2, #0]
 8006e14:	2002      	movpl	r0, #2
 8006e16:	4770      	bx	lr
 8006e18:	b299      	uxth	r1, r3
 8006e1a:	b909      	cbnz	r1, 8006e20 <__lo0bits+0x2a>
 8006e1c:	0c1b      	lsrs	r3, r3, #16
 8006e1e:	2010      	movs	r0, #16
 8006e20:	b2d9      	uxtb	r1, r3
 8006e22:	b909      	cbnz	r1, 8006e28 <__lo0bits+0x32>
 8006e24:	3008      	adds	r0, #8
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	0719      	lsls	r1, r3, #28
 8006e2a:	bf04      	itt	eq
 8006e2c:	091b      	lsreq	r3, r3, #4
 8006e2e:	3004      	addeq	r0, #4
 8006e30:	0799      	lsls	r1, r3, #30
 8006e32:	bf04      	itt	eq
 8006e34:	089b      	lsreq	r3, r3, #2
 8006e36:	3002      	addeq	r0, #2
 8006e38:	07d9      	lsls	r1, r3, #31
 8006e3a:	d403      	bmi.n	8006e44 <__lo0bits+0x4e>
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	f100 0001 	add.w	r0, r0, #1
 8006e42:	d003      	beq.n	8006e4c <__lo0bits+0x56>
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	4770      	bx	lr
 8006e48:	2000      	movs	r0, #0
 8006e4a:	4770      	bx	lr
 8006e4c:	2020      	movs	r0, #32
 8006e4e:	4770      	bx	lr

08006e50 <__i2b>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	460c      	mov	r4, r1
 8006e54:	2101      	movs	r1, #1
 8006e56:	f7ff ff07 	bl	8006c68 <_Balloc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	b928      	cbnz	r0, 8006e6a <__i2b+0x1a>
 8006e5e:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <__i2b+0x24>)
 8006e60:	4805      	ldr	r0, [pc, #20]	@ (8006e78 <__i2b+0x28>)
 8006e62:	f240 1145 	movw	r1, #325	@ 0x145
 8006e66:	f000 fd21 	bl	80078ac <__assert_func>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	6144      	str	r4, [r0, #20]
 8006e6e:	6103      	str	r3, [r0, #16]
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	08007c0c 	.word	0x08007c0c
 8006e78:	08007c1d 	.word	0x08007c1d

08006e7c <__multiply>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	4614      	mov	r4, r2
 8006e82:	690a      	ldr	r2, [r1, #16]
 8006e84:	6923      	ldr	r3, [r4, #16]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	bfa8      	it	ge
 8006e8a:	4623      	movge	r3, r4
 8006e8c:	460f      	mov	r7, r1
 8006e8e:	bfa4      	itt	ge
 8006e90:	460c      	movge	r4, r1
 8006e92:	461f      	movge	r7, r3
 8006e94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e9c:	68a3      	ldr	r3, [r4, #8]
 8006e9e:	6861      	ldr	r1, [r4, #4]
 8006ea0:	eb0a 0609 	add.w	r6, sl, r9
 8006ea4:	42b3      	cmp	r3, r6
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	bfb8      	it	lt
 8006eaa:	3101      	addlt	r1, #1
 8006eac:	f7ff fedc 	bl	8006c68 <_Balloc>
 8006eb0:	b930      	cbnz	r0, 8006ec0 <__multiply+0x44>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4b44      	ldr	r3, [pc, #272]	@ (8006fc8 <__multiply+0x14c>)
 8006eb6:	4845      	ldr	r0, [pc, #276]	@ (8006fcc <__multiply+0x150>)
 8006eb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ebc:	f000 fcf6 	bl	80078ac <__assert_func>
 8006ec0:	f100 0514 	add.w	r5, r0, #20
 8006ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ec8:	462b      	mov	r3, r5
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	d321      	bcc.n	8006f14 <__multiply+0x98>
 8006ed0:	f107 0114 	add.w	r1, r7, #20
 8006ed4:	f104 0214 	add.w	r2, r4, #20
 8006ed8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006edc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ee0:	9302      	str	r3, [sp, #8]
 8006ee2:	1b13      	subs	r3, r2, r4
 8006ee4:	3b15      	subs	r3, #21
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	3304      	adds	r3, #4
 8006eec:	f104 0715 	add.w	r7, r4, #21
 8006ef0:	42ba      	cmp	r2, r7
 8006ef2:	bf38      	it	cc
 8006ef4:	2304      	movcc	r3, #4
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	9b02      	ldr	r3, [sp, #8]
 8006efa:	9103      	str	r1, [sp, #12]
 8006efc:	428b      	cmp	r3, r1
 8006efe:	d80c      	bhi.n	8006f1a <__multiply+0x9e>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	dd03      	ble.n	8006f0c <__multiply+0x90>
 8006f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d05b      	beq.n	8006fc4 <__multiply+0x148>
 8006f0c:	6106      	str	r6, [r0, #16]
 8006f0e:	b005      	add	sp, #20
 8006f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f14:	f843 2b04 	str.w	r2, [r3], #4
 8006f18:	e7d8      	b.n	8006ecc <__multiply+0x50>
 8006f1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f1e:	f1ba 0f00 	cmp.w	sl, #0
 8006f22:	d024      	beq.n	8006f6e <__multiply+0xf2>
 8006f24:	f104 0e14 	add.w	lr, r4, #20
 8006f28:	46a9      	mov	r9, r5
 8006f2a:	f04f 0c00 	mov.w	ip, #0
 8006f2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f32:	f8d9 3000 	ldr.w	r3, [r9]
 8006f36:	fa1f fb87 	uxth.w	fp, r7
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f44:	f8d9 7000 	ldr.w	r7, [r9]
 8006f48:	4463      	add	r3, ip
 8006f4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f5c:	4572      	cmp	r2, lr
 8006f5e:	f849 3b04 	str.w	r3, [r9], #4
 8006f62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f66:	d8e2      	bhi.n	8006f2e <__multiply+0xb2>
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	f845 c003 	str.w	ip, [r5, r3]
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f74:	3104      	adds	r1, #4
 8006f76:	f1b9 0f00 	cmp.w	r9, #0
 8006f7a:	d021      	beq.n	8006fc0 <__multiply+0x144>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	f104 0c14 	add.w	ip, r4, #20
 8006f82:	46ae      	mov	lr, r5
 8006f84:	f04f 0a00 	mov.w	sl, #0
 8006f88:	f8bc b000 	ldrh.w	fp, [ip]
 8006f8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f90:	fb09 770b 	mla	r7, r9, fp, r7
 8006f94:	4457      	add	r7, sl
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f9c:	f84e 3b04 	str.w	r3, [lr], #4
 8006fa0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fa8:	f8be 3000 	ldrh.w	r3, [lr]
 8006fac:	fb09 330a 	mla	r3, r9, sl, r3
 8006fb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006fb4:	4562      	cmp	r2, ip
 8006fb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fba:	d8e5      	bhi.n	8006f88 <__multiply+0x10c>
 8006fbc:	9f01      	ldr	r7, [sp, #4]
 8006fbe:	51eb      	str	r3, [r5, r7]
 8006fc0:	3504      	adds	r5, #4
 8006fc2:	e799      	b.n	8006ef8 <__multiply+0x7c>
 8006fc4:	3e01      	subs	r6, #1
 8006fc6:	e79b      	b.n	8006f00 <__multiply+0x84>
 8006fc8:	08007c0c 	.word	0x08007c0c
 8006fcc:	08007c1d 	.word	0x08007c1d

08006fd0 <__pow5mult>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	f012 0203 	ands.w	r2, r2, #3
 8006fda:	4607      	mov	r7, r0
 8006fdc:	460e      	mov	r6, r1
 8006fde:	d007      	beq.n	8006ff0 <__pow5mult+0x20>
 8006fe0:	4c25      	ldr	r4, [pc, #148]	@ (8007078 <__pow5mult+0xa8>)
 8006fe2:	3a01      	subs	r2, #1
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fea:	f7ff fe9f 	bl	8006d2c <__multadd>
 8006fee:	4606      	mov	r6, r0
 8006ff0:	10ad      	asrs	r5, r5, #2
 8006ff2:	d03d      	beq.n	8007070 <__pow5mult+0xa0>
 8006ff4:	69fc      	ldr	r4, [r7, #28]
 8006ff6:	b97c      	cbnz	r4, 8007018 <__pow5mult+0x48>
 8006ff8:	2010      	movs	r0, #16
 8006ffa:	f7ff fd7f 	bl	8006afc <malloc>
 8006ffe:	4602      	mov	r2, r0
 8007000:	61f8      	str	r0, [r7, #28]
 8007002:	b928      	cbnz	r0, 8007010 <__pow5mult+0x40>
 8007004:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <__pow5mult+0xac>)
 8007006:	481e      	ldr	r0, [pc, #120]	@ (8007080 <__pow5mult+0xb0>)
 8007008:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800700c:	f000 fc4e 	bl	80078ac <__assert_func>
 8007010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007014:	6004      	str	r4, [r0, #0]
 8007016:	60c4      	str	r4, [r0, #12]
 8007018:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800701c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007020:	b94c      	cbnz	r4, 8007036 <__pow5mult+0x66>
 8007022:	f240 2171 	movw	r1, #625	@ 0x271
 8007026:	4638      	mov	r0, r7
 8007028:	f7ff ff12 	bl	8006e50 <__i2b>
 800702c:	2300      	movs	r3, #0
 800702e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007032:	4604      	mov	r4, r0
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	f04f 0900 	mov.w	r9, #0
 800703a:	07eb      	lsls	r3, r5, #31
 800703c:	d50a      	bpl.n	8007054 <__pow5mult+0x84>
 800703e:	4631      	mov	r1, r6
 8007040:	4622      	mov	r2, r4
 8007042:	4638      	mov	r0, r7
 8007044:	f7ff ff1a 	bl	8006e7c <__multiply>
 8007048:	4631      	mov	r1, r6
 800704a:	4680      	mov	r8, r0
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff fe4b 	bl	8006ce8 <_Bfree>
 8007052:	4646      	mov	r6, r8
 8007054:	106d      	asrs	r5, r5, #1
 8007056:	d00b      	beq.n	8007070 <__pow5mult+0xa0>
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	b938      	cbnz	r0, 800706c <__pow5mult+0x9c>
 800705c:	4622      	mov	r2, r4
 800705e:	4621      	mov	r1, r4
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff ff0b 	bl	8006e7c <__multiply>
 8007066:	6020      	str	r0, [r4, #0]
 8007068:	f8c0 9000 	str.w	r9, [r0]
 800706c:	4604      	mov	r4, r0
 800706e:	e7e4      	b.n	800703a <__pow5mult+0x6a>
 8007070:	4630      	mov	r0, r6
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	bf00      	nop
 8007078:	08007c78 	.word	0x08007c78
 800707c:	08007b9d 	.word	0x08007b9d
 8007080:	08007c1d 	.word	0x08007c1d

08007084 <__lshift>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	460c      	mov	r4, r1
 800708a:	6849      	ldr	r1, [r1, #4]
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	4607      	mov	r7, r0
 8007096:	4691      	mov	r9, r2
 8007098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800709c:	f108 0601 	add.w	r6, r8, #1
 80070a0:	42b3      	cmp	r3, r6
 80070a2:	db0b      	blt.n	80070bc <__lshift+0x38>
 80070a4:	4638      	mov	r0, r7
 80070a6:	f7ff fddf 	bl	8006c68 <_Balloc>
 80070aa:	4605      	mov	r5, r0
 80070ac:	b948      	cbnz	r0, 80070c2 <__lshift+0x3e>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b28      	ldr	r3, [pc, #160]	@ (8007154 <__lshift+0xd0>)
 80070b2:	4829      	ldr	r0, [pc, #164]	@ (8007158 <__lshift+0xd4>)
 80070b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070b8:	f000 fbf8 	bl	80078ac <__assert_func>
 80070bc:	3101      	adds	r1, #1
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	e7ee      	b.n	80070a0 <__lshift+0x1c>
 80070c2:	2300      	movs	r3, #0
 80070c4:	f100 0114 	add.w	r1, r0, #20
 80070c8:	f100 0210 	add.w	r2, r0, #16
 80070cc:	4618      	mov	r0, r3
 80070ce:	4553      	cmp	r3, sl
 80070d0:	db33      	blt.n	800713a <__lshift+0xb6>
 80070d2:	6920      	ldr	r0, [r4, #16]
 80070d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d8:	f104 0314 	add.w	r3, r4, #20
 80070dc:	f019 091f 	ands.w	r9, r9, #31
 80070e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e8:	d02b      	beq.n	8007142 <__lshift+0xbe>
 80070ea:	f1c9 0e20 	rsb	lr, r9, #32
 80070ee:	468a      	mov	sl, r1
 80070f0:	2200      	movs	r2, #0
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	fa00 f009 	lsl.w	r0, r0, r9
 80070f8:	4310      	orrs	r0, r2
 80070fa:	f84a 0b04 	str.w	r0, [sl], #4
 80070fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007102:	459c      	cmp	ip, r3
 8007104:	fa22 f20e 	lsr.w	r2, r2, lr
 8007108:	d8f3      	bhi.n	80070f2 <__lshift+0x6e>
 800710a:	ebac 0304 	sub.w	r3, ip, r4
 800710e:	3b15      	subs	r3, #21
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	3304      	adds	r3, #4
 8007116:	f104 0015 	add.w	r0, r4, #21
 800711a:	4584      	cmp	ip, r0
 800711c:	bf38      	it	cc
 800711e:	2304      	movcc	r3, #4
 8007120:	50ca      	str	r2, [r1, r3]
 8007122:	b10a      	cbz	r2, 8007128 <__lshift+0xa4>
 8007124:	f108 0602 	add.w	r6, r8, #2
 8007128:	3e01      	subs	r6, #1
 800712a:	4638      	mov	r0, r7
 800712c:	612e      	str	r6, [r5, #16]
 800712e:	4621      	mov	r1, r4
 8007130:	f7ff fdda 	bl	8006ce8 <_Bfree>
 8007134:	4628      	mov	r0, r5
 8007136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713a:	f842 0f04 	str.w	r0, [r2, #4]!
 800713e:	3301      	adds	r3, #1
 8007140:	e7c5      	b.n	80070ce <__lshift+0x4a>
 8007142:	3904      	subs	r1, #4
 8007144:	f853 2b04 	ldr.w	r2, [r3], #4
 8007148:	f841 2f04 	str.w	r2, [r1, #4]!
 800714c:	459c      	cmp	ip, r3
 800714e:	d8f9      	bhi.n	8007144 <__lshift+0xc0>
 8007150:	e7ea      	b.n	8007128 <__lshift+0xa4>
 8007152:	bf00      	nop
 8007154:	08007c0c 	.word	0x08007c0c
 8007158:	08007c1d 	.word	0x08007c1d

0800715c <__mcmp>:
 800715c:	690a      	ldr	r2, [r1, #16]
 800715e:	4603      	mov	r3, r0
 8007160:	6900      	ldr	r0, [r0, #16]
 8007162:	1a80      	subs	r0, r0, r2
 8007164:	b530      	push	{r4, r5, lr}
 8007166:	d10e      	bne.n	8007186 <__mcmp+0x2a>
 8007168:	3314      	adds	r3, #20
 800716a:	3114      	adds	r1, #20
 800716c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800717c:	4295      	cmp	r5, r2
 800717e:	d003      	beq.n	8007188 <__mcmp+0x2c>
 8007180:	d205      	bcs.n	800718e <__mcmp+0x32>
 8007182:	f04f 30ff 	mov.w	r0, #4294967295
 8007186:	bd30      	pop	{r4, r5, pc}
 8007188:	42a3      	cmp	r3, r4
 800718a:	d3f3      	bcc.n	8007174 <__mcmp+0x18>
 800718c:	e7fb      	b.n	8007186 <__mcmp+0x2a>
 800718e:	2001      	movs	r0, #1
 8007190:	e7f9      	b.n	8007186 <__mcmp+0x2a>
	...

08007194 <__mdiff>:
 8007194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	4689      	mov	r9, r1
 800719a:	4606      	mov	r6, r0
 800719c:	4611      	mov	r1, r2
 800719e:	4648      	mov	r0, r9
 80071a0:	4614      	mov	r4, r2
 80071a2:	f7ff ffdb 	bl	800715c <__mcmp>
 80071a6:	1e05      	subs	r5, r0, #0
 80071a8:	d112      	bne.n	80071d0 <__mdiff+0x3c>
 80071aa:	4629      	mov	r1, r5
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff fd5b 	bl	8006c68 <_Balloc>
 80071b2:	4602      	mov	r2, r0
 80071b4:	b928      	cbnz	r0, 80071c2 <__mdiff+0x2e>
 80071b6:	4b3f      	ldr	r3, [pc, #252]	@ (80072b4 <__mdiff+0x120>)
 80071b8:	f240 2137 	movw	r1, #567	@ 0x237
 80071bc:	483e      	ldr	r0, [pc, #248]	@ (80072b8 <__mdiff+0x124>)
 80071be:	f000 fb75 	bl	80078ac <__assert_func>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c8:	4610      	mov	r0, r2
 80071ca:	b003      	add	sp, #12
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d0:	bfbc      	itt	lt
 80071d2:	464b      	movlt	r3, r9
 80071d4:	46a1      	movlt	r9, r4
 80071d6:	4630      	mov	r0, r6
 80071d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071dc:	bfba      	itte	lt
 80071de:	461c      	movlt	r4, r3
 80071e0:	2501      	movlt	r5, #1
 80071e2:	2500      	movge	r5, #0
 80071e4:	f7ff fd40 	bl	8006c68 <_Balloc>
 80071e8:	4602      	mov	r2, r0
 80071ea:	b918      	cbnz	r0, 80071f4 <__mdiff+0x60>
 80071ec:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <__mdiff+0x120>)
 80071ee:	f240 2145 	movw	r1, #581	@ 0x245
 80071f2:	e7e3      	b.n	80071bc <__mdiff+0x28>
 80071f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071f8:	6926      	ldr	r6, [r4, #16]
 80071fa:	60c5      	str	r5, [r0, #12]
 80071fc:	f109 0310 	add.w	r3, r9, #16
 8007200:	f109 0514 	add.w	r5, r9, #20
 8007204:	f104 0e14 	add.w	lr, r4, #20
 8007208:	f100 0b14 	add.w	fp, r0, #20
 800720c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007210:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	46d9      	mov	r9, fp
 8007218:	f04f 0c00 	mov.w	ip, #0
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007222:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	fa1f f38a 	uxth.w	r3, sl
 800722c:	4619      	mov	r1, r3
 800722e:	b283      	uxth	r3, r0
 8007230:	1acb      	subs	r3, r1, r3
 8007232:	0c00      	lsrs	r0, r0, #16
 8007234:	4463      	add	r3, ip
 8007236:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800723a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007244:	4576      	cmp	r6, lr
 8007246:	f849 3b04 	str.w	r3, [r9], #4
 800724a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800724e:	d8e5      	bhi.n	800721c <__mdiff+0x88>
 8007250:	1b33      	subs	r3, r6, r4
 8007252:	3b15      	subs	r3, #21
 8007254:	f023 0303 	bic.w	r3, r3, #3
 8007258:	3415      	adds	r4, #21
 800725a:	3304      	adds	r3, #4
 800725c:	42a6      	cmp	r6, r4
 800725e:	bf38      	it	cc
 8007260:	2304      	movcc	r3, #4
 8007262:	441d      	add	r5, r3
 8007264:	445b      	add	r3, fp
 8007266:	461e      	mov	r6, r3
 8007268:	462c      	mov	r4, r5
 800726a:	4544      	cmp	r4, r8
 800726c:	d30e      	bcc.n	800728c <__mdiff+0xf8>
 800726e:	f108 0103 	add.w	r1, r8, #3
 8007272:	1b49      	subs	r1, r1, r5
 8007274:	f021 0103 	bic.w	r1, r1, #3
 8007278:	3d03      	subs	r5, #3
 800727a:	45a8      	cmp	r8, r5
 800727c:	bf38      	it	cc
 800727e:	2100      	movcc	r1, #0
 8007280:	440b      	add	r3, r1
 8007282:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007286:	b191      	cbz	r1, 80072ae <__mdiff+0x11a>
 8007288:	6117      	str	r7, [r2, #16]
 800728a:	e79d      	b.n	80071c8 <__mdiff+0x34>
 800728c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007290:	46e6      	mov	lr, ip
 8007292:	0c08      	lsrs	r0, r1, #16
 8007294:	fa1c fc81 	uxtah	ip, ip, r1
 8007298:	4471      	add	r1, lr
 800729a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800729e:	b289      	uxth	r1, r1
 80072a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072a4:	f846 1b04 	str.w	r1, [r6], #4
 80072a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072ac:	e7dd      	b.n	800726a <__mdiff+0xd6>
 80072ae:	3f01      	subs	r7, #1
 80072b0:	e7e7      	b.n	8007282 <__mdiff+0xee>
 80072b2:	bf00      	nop
 80072b4:	08007c0c 	.word	0x08007c0c
 80072b8:	08007c1d 	.word	0x08007c1d

080072bc <__d2b>:
 80072bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072c0:	460f      	mov	r7, r1
 80072c2:	2101      	movs	r1, #1
 80072c4:	ec59 8b10 	vmov	r8, r9, d0
 80072c8:	4616      	mov	r6, r2
 80072ca:	f7ff fccd 	bl	8006c68 <_Balloc>
 80072ce:	4604      	mov	r4, r0
 80072d0:	b930      	cbnz	r0, 80072e0 <__d2b+0x24>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b23      	ldr	r3, [pc, #140]	@ (8007364 <__d2b+0xa8>)
 80072d6:	4824      	ldr	r0, [pc, #144]	@ (8007368 <__d2b+0xac>)
 80072d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80072dc:	f000 fae6 	bl	80078ac <__assert_func>
 80072e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072e8:	b10d      	cbz	r5, 80072ee <__d2b+0x32>
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	f1b8 0300 	subs.w	r3, r8, #0
 80072f4:	d023      	beq.n	800733e <__d2b+0x82>
 80072f6:	4668      	mov	r0, sp
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	f7ff fd7c 	bl	8006df6 <__lo0bits>
 80072fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007302:	b1d0      	cbz	r0, 800733a <__d2b+0x7e>
 8007304:	f1c0 0320 	rsb	r3, r0, #32
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	430b      	orrs	r3, r1
 800730e:	40c2      	lsrs	r2, r0
 8007310:	6163      	str	r3, [r4, #20]
 8007312:	9201      	str	r2, [sp, #4]
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	61a3      	str	r3, [r4, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	bf0c      	ite	eq
 800731c:	2201      	moveq	r2, #1
 800731e:	2202      	movne	r2, #2
 8007320:	6122      	str	r2, [r4, #16]
 8007322:	b1a5      	cbz	r5, 800734e <__d2b+0x92>
 8007324:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007328:	4405      	add	r5, r0
 800732a:	603d      	str	r5, [r7, #0]
 800732c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007330:	6030      	str	r0, [r6, #0]
 8007332:	4620      	mov	r0, r4
 8007334:	b003      	add	sp, #12
 8007336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800733a:	6161      	str	r1, [r4, #20]
 800733c:	e7ea      	b.n	8007314 <__d2b+0x58>
 800733e:	a801      	add	r0, sp, #4
 8007340:	f7ff fd59 	bl	8006df6 <__lo0bits>
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	6163      	str	r3, [r4, #20]
 8007348:	3020      	adds	r0, #32
 800734a:	2201      	movs	r2, #1
 800734c:	e7e8      	b.n	8007320 <__d2b+0x64>
 800734e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007352:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007356:	6038      	str	r0, [r7, #0]
 8007358:	6918      	ldr	r0, [r3, #16]
 800735a:	f7ff fd2d 	bl	8006db8 <__hi0bits>
 800735e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007362:	e7e5      	b.n	8007330 <__d2b+0x74>
 8007364:	08007c0c 	.word	0x08007c0c
 8007368:	08007c1d 	.word	0x08007c1d

0800736c <__sfputc_r>:
 800736c:	6893      	ldr	r3, [r2, #8]
 800736e:	3b01      	subs	r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	b410      	push	{r4}
 8007374:	6093      	str	r3, [r2, #8]
 8007376:	da08      	bge.n	800738a <__sfputc_r+0x1e>
 8007378:	6994      	ldr	r4, [r2, #24]
 800737a:	42a3      	cmp	r3, r4
 800737c:	db01      	blt.n	8007382 <__sfputc_r+0x16>
 800737e:	290a      	cmp	r1, #10
 8007380:	d103      	bne.n	800738a <__sfputc_r+0x1e>
 8007382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007386:	f000 b9df 	b.w	8007748 <__swbuf_r>
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	1c58      	adds	r0, r3, #1
 800738e:	6010      	str	r0, [r2, #0]
 8007390:	7019      	strb	r1, [r3, #0]
 8007392:	4608      	mov	r0, r1
 8007394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007398:	4770      	bx	lr

0800739a <__sfputs_r>:
 800739a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	4614      	mov	r4, r2
 80073a2:	18d5      	adds	r5, r2, r3
 80073a4:	42ac      	cmp	r4, r5
 80073a6:	d101      	bne.n	80073ac <__sfputs_r+0x12>
 80073a8:	2000      	movs	r0, #0
 80073aa:	e007      	b.n	80073bc <__sfputs_r+0x22>
 80073ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b0:	463a      	mov	r2, r7
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ffda 	bl	800736c <__sfputc_r>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d1f3      	bne.n	80073a4 <__sfputs_r+0xa>
 80073bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073c0 <_vfiprintf_r>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	460d      	mov	r5, r1
 80073c6:	b09d      	sub	sp, #116	@ 0x74
 80073c8:	4614      	mov	r4, r2
 80073ca:	4698      	mov	r8, r3
 80073cc:	4606      	mov	r6, r0
 80073ce:	b118      	cbz	r0, 80073d8 <_vfiprintf_r+0x18>
 80073d0:	6a03      	ldr	r3, [r0, #32]
 80073d2:	b90b      	cbnz	r3, 80073d8 <_vfiprintf_r+0x18>
 80073d4:	f7fe fbf0 	bl	8005bb8 <__sinit>
 80073d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d405      	bmi.n	80073ea <_vfiprintf_r+0x2a>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_vfiprintf_r+0x2a>
 80073e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073e6:	f7fe fcf0 	bl	8005dca <__retarget_lock_acquire_recursive>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	071b      	lsls	r3, r3, #28
 80073ee:	d501      	bpl.n	80073f4 <_vfiprintf_r+0x34>
 80073f0:	692b      	ldr	r3, [r5, #16]
 80073f2:	b99b      	cbnz	r3, 800741c <_vfiprintf_r+0x5c>
 80073f4:	4629      	mov	r1, r5
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 f9e4 	bl	80077c4 <__swsetup_r>
 80073fc:	b170      	cbz	r0, 800741c <_vfiprintf_r+0x5c>
 80073fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007400:	07dc      	lsls	r4, r3, #31
 8007402:	d504      	bpl.n	800740e <_vfiprintf_r+0x4e>
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	b01d      	add	sp, #116	@ 0x74
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	0598      	lsls	r0, r3, #22
 8007412:	d4f7      	bmi.n	8007404 <_vfiprintf_r+0x44>
 8007414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007416:	f7fe fcd9 	bl	8005dcc <__retarget_lock_release_recursive>
 800741a:	e7f3      	b.n	8007404 <_vfiprintf_r+0x44>
 800741c:	2300      	movs	r3, #0
 800741e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007420:	2320      	movs	r3, #32
 8007422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007426:	f8cd 800c 	str.w	r8, [sp, #12]
 800742a:	2330      	movs	r3, #48	@ 0x30
 800742c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075dc <_vfiprintf_r+0x21c>
 8007430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007434:	f04f 0901 	mov.w	r9, #1
 8007438:	4623      	mov	r3, r4
 800743a:	469a      	mov	sl, r3
 800743c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007440:	b10a      	cbz	r2, 8007446 <_vfiprintf_r+0x86>
 8007442:	2a25      	cmp	r2, #37	@ 0x25
 8007444:	d1f9      	bne.n	800743a <_vfiprintf_r+0x7a>
 8007446:	ebba 0b04 	subs.w	fp, sl, r4
 800744a:	d00b      	beq.n	8007464 <_vfiprintf_r+0xa4>
 800744c:	465b      	mov	r3, fp
 800744e:	4622      	mov	r2, r4
 8007450:	4629      	mov	r1, r5
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff ffa1 	bl	800739a <__sfputs_r>
 8007458:	3001      	adds	r0, #1
 800745a:	f000 80a7 	beq.w	80075ac <_vfiprintf_r+0x1ec>
 800745e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007460:	445a      	add	r2, fp
 8007462:	9209      	str	r2, [sp, #36]	@ 0x24
 8007464:	f89a 3000 	ldrb.w	r3, [sl]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 809f 	beq.w	80075ac <_vfiprintf_r+0x1ec>
 800746e:	2300      	movs	r3, #0
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	9304      	str	r3, [sp, #16]
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007484:	931a      	str	r3, [sp, #104]	@ 0x68
 8007486:	4654      	mov	r4, sl
 8007488:	2205      	movs	r2, #5
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	4853      	ldr	r0, [pc, #332]	@ (80075dc <_vfiprintf_r+0x21c>)
 8007490:	f7f8 fea6 	bl	80001e0 <memchr>
 8007494:	9a04      	ldr	r2, [sp, #16]
 8007496:	b9d8      	cbnz	r0, 80074d0 <_vfiprintf_r+0x110>
 8007498:	06d1      	lsls	r1, r2, #27
 800749a:	bf44      	itt	mi
 800749c:	2320      	movmi	r3, #32
 800749e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a2:	0713      	lsls	r3, r2, #28
 80074a4:	bf44      	itt	mi
 80074a6:	232b      	movmi	r3, #43	@ 0x2b
 80074a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ac:	f89a 3000 	ldrb.w	r3, [sl]
 80074b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b2:	d015      	beq.n	80074e0 <_vfiprintf_r+0x120>
 80074b4:	9a07      	ldr	r2, [sp, #28]
 80074b6:	4654      	mov	r4, sl
 80074b8:	2000      	movs	r0, #0
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	4621      	mov	r1, r4
 80074c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074c4:	3b30      	subs	r3, #48	@ 0x30
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d94b      	bls.n	8007562 <_vfiprintf_r+0x1a2>
 80074ca:	b1b0      	cbz	r0, 80074fa <_vfiprintf_r+0x13a>
 80074cc:	9207      	str	r2, [sp, #28]
 80074ce:	e014      	b.n	80074fa <_vfiprintf_r+0x13a>
 80074d0:	eba0 0308 	sub.w	r3, r0, r8
 80074d4:	fa09 f303 	lsl.w	r3, r9, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	46a2      	mov	sl, r4
 80074de:	e7d2      	b.n	8007486 <_vfiprintf_r+0xc6>
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	1d19      	adds	r1, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	9103      	str	r1, [sp, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfbb      	ittet	lt
 80074ec:	425b      	neglt	r3, r3
 80074ee:	f042 0202 	orrlt.w	r2, r2, #2
 80074f2:	9307      	strge	r3, [sp, #28]
 80074f4:	9307      	strlt	r3, [sp, #28]
 80074f6:	bfb8      	it	lt
 80074f8:	9204      	strlt	r2, [sp, #16]
 80074fa:	7823      	ldrb	r3, [r4, #0]
 80074fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80074fe:	d10a      	bne.n	8007516 <_vfiprintf_r+0x156>
 8007500:	7863      	ldrb	r3, [r4, #1]
 8007502:	2b2a      	cmp	r3, #42	@ 0x2a
 8007504:	d132      	bne.n	800756c <_vfiprintf_r+0x1ac>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	9203      	str	r2, [sp, #12]
 800750e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007512:	3402      	adds	r4, #2
 8007514:	9305      	str	r3, [sp, #20]
 8007516:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075ec <_vfiprintf_r+0x22c>
 800751a:	7821      	ldrb	r1, [r4, #0]
 800751c:	2203      	movs	r2, #3
 800751e:	4650      	mov	r0, sl
 8007520:	f7f8 fe5e 	bl	80001e0 <memchr>
 8007524:	b138      	cbz	r0, 8007536 <_vfiprintf_r+0x176>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	eba0 000a 	sub.w	r0, r0, sl
 800752c:	2240      	movs	r2, #64	@ 0x40
 800752e:	4082      	lsls	r2, r0
 8007530:	4313      	orrs	r3, r2
 8007532:	3401      	adds	r4, #1
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753a:	4829      	ldr	r0, [pc, #164]	@ (80075e0 <_vfiprintf_r+0x220>)
 800753c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007540:	2206      	movs	r2, #6
 8007542:	f7f8 fe4d 	bl	80001e0 <memchr>
 8007546:	2800      	cmp	r0, #0
 8007548:	d03f      	beq.n	80075ca <_vfiprintf_r+0x20a>
 800754a:	4b26      	ldr	r3, [pc, #152]	@ (80075e4 <_vfiprintf_r+0x224>)
 800754c:	bb1b      	cbnz	r3, 8007596 <_vfiprintf_r+0x1d6>
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	3307      	adds	r3, #7
 8007552:	f023 0307 	bic.w	r3, r3, #7
 8007556:	3308      	adds	r3, #8
 8007558:	9303      	str	r3, [sp, #12]
 800755a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800755c:	443b      	add	r3, r7
 800755e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007560:	e76a      	b.n	8007438 <_vfiprintf_r+0x78>
 8007562:	fb0c 3202 	mla	r2, ip, r2, r3
 8007566:	460c      	mov	r4, r1
 8007568:	2001      	movs	r0, #1
 800756a:	e7a8      	b.n	80074be <_vfiprintf_r+0xfe>
 800756c:	2300      	movs	r3, #0
 800756e:	3401      	adds	r4, #1
 8007570:	9305      	str	r3, [sp, #20]
 8007572:	4619      	mov	r1, r3
 8007574:	f04f 0c0a 	mov.w	ip, #10
 8007578:	4620      	mov	r0, r4
 800757a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800757e:	3a30      	subs	r2, #48	@ 0x30
 8007580:	2a09      	cmp	r2, #9
 8007582:	d903      	bls.n	800758c <_vfiprintf_r+0x1cc>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0c6      	beq.n	8007516 <_vfiprintf_r+0x156>
 8007588:	9105      	str	r1, [sp, #20]
 800758a:	e7c4      	b.n	8007516 <_vfiprintf_r+0x156>
 800758c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007590:	4604      	mov	r4, r0
 8007592:	2301      	movs	r3, #1
 8007594:	e7f0      	b.n	8007578 <_vfiprintf_r+0x1b8>
 8007596:	ab03      	add	r3, sp, #12
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	462a      	mov	r2, r5
 800759c:	4b12      	ldr	r3, [pc, #72]	@ (80075e8 <_vfiprintf_r+0x228>)
 800759e:	a904      	add	r1, sp, #16
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7fd fec5 	bl	8005330 <_printf_float>
 80075a6:	4607      	mov	r7, r0
 80075a8:	1c78      	adds	r0, r7, #1
 80075aa:	d1d6      	bne.n	800755a <_vfiprintf_r+0x19a>
 80075ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ae:	07d9      	lsls	r1, r3, #31
 80075b0:	d405      	bmi.n	80075be <_vfiprintf_r+0x1fe>
 80075b2:	89ab      	ldrh	r3, [r5, #12]
 80075b4:	059a      	lsls	r2, r3, #22
 80075b6:	d402      	bmi.n	80075be <_vfiprintf_r+0x1fe>
 80075b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ba:	f7fe fc07 	bl	8005dcc <__retarget_lock_release_recursive>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	065b      	lsls	r3, r3, #25
 80075c2:	f53f af1f 	bmi.w	8007404 <_vfiprintf_r+0x44>
 80075c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075c8:	e71e      	b.n	8007408 <_vfiprintf_r+0x48>
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	462a      	mov	r2, r5
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <_vfiprintf_r+0x228>)
 80075d2:	a904      	add	r1, sp, #16
 80075d4:	4630      	mov	r0, r6
 80075d6:	f7fe f943 	bl	8005860 <_printf_i>
 80075da:	e7e4      	b.n	80075a6 <_vfiprintf_r+0x1e6>
 80075dc:	08007d78 	.word	0x08007d78
 80075e0:	08007d82 	.word	0x08007d82
 80075e4:	08005331 	.word	0x08005331
 80075e8:	0800739b 	.word	0x0800739b
 80075ec:	08007d7e 	.word	0x08007d7e

080075f0 <__sflush_r>:
 80075f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f8:	0716      	lsls	r6, r2, #28
 80075fa:	4605      	mov	r5, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	d454      	bmi.n	80076aa <__sflush_r+0xba>
 8007600:	684b      	ldr	r3, [r1, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc02      	bgt.n	800760c <__sflush_r+0x1c>
 8007606:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	dd48      	ble.n	800769e <__sflush_r+0xae>
 800760c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800760e:	2e00      	cmp	r6, #0
 8007610:	d045      	beq.n	800769e <__sflush_r+0xae>
 8007612:	2300      	movs	r3, #0
 8007614:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007618:	682f      	ldr	r7, [r5, #0]
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	d030      	beq.n	8007682 <__sflush_r+0x92>
 8007620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	0759      	lsls	r1, r3, #29
 8007626:	d505      	bpl.n	8007634 <__sflush_r+0x44>
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	1ad2      	subs	r2, r2, r3
 800762c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800762e:	b10b      	cbz	r3, 8007634 <__sflush_r+0x44>
 8007630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	2300      	movs	r3, #0
 8007636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007638:	6a21      	ldr	r1, [r4, #32]
 800763a:	4628      	mov	r0, r5
 800763c:	47b0      	blx	r6
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	d106      	bne.n	8007652 <__sflush_r+0x62>
 8007644:	6829      	ldr	r1, [r5, #0]
 8007646:	291d      	cmp	r1, #29
 8007648:	d82b      	bhi.n	80076a2 <__sflush_r+0xb2>
 800764a:	4a2a      	ldr	r2, [pc, #168]	@ (80076f4 <__sflush_r+0x104>)
 800764c:	410a      	asrs	r2, r1
 800764e:	07d6      	lsls	r6, r2, #31
 8007650:	d427      	bmi.n	80076a2 <__sflush_r+0xb2>
 8007652:	2200      	movs	r2, #0
 8007654:	6062      	str	r2, [r4, #4]
 8007656:	04d9      	lsls	r1, r3, #19
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	d504      	bpl.n	8007668 <__sflush_r+0x78>
 800765e:	1c42      	adds	r2, r0, #1
 8007660:	d101      	bne.n	8007666 <__sflush_r+0x76>
 8007662:	682b      	ldr	r3, [r5, #0]
 8007664:	b903      	cbnz	r3, 8007668 <__sflush_r+0x78>
 8007666:	6560      	str	r0, [r4, #84]	@ 0x54
 8007668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800766a:	602f      	str	r7, [r5, #0]
 800766c:	b1b9      	cbz	r1, 800769e <__sflush_r+0xae>
 800766e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007672:	4299      	cmp	r1, r3
 8007674:	d002      	beq.n	800767c <__sflush_r+0x8c>
 8007676:	4628      	mov	r0, r5
 8007678:	f7ff f9f6 	bl	8006a68 <_free_r>
 800767c:	2300      	movs	r3, #0
 800767e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007680:	e00d      	b.n	800769e <__sflush_r+0xae>
 8007682:	2301      	movs	r3, #1
 8007684:	4628      	mov	r0, r5
 8007686:	47b0      	blx	r6
 8007688:	4602      	mov	r2, r0
 800768a:	1c50      	adds	r0, r2, #1
 800768c:	d1c9      	bne.n	8007622 <__sflush_r+0x32>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0c6      	beq.n	8007622 <__sflush_r+0x32>
 8007694:	2b1d      	cmp	r3, #29
 8007696:	d001      	beq.n	800769c <__sflush_r+0xac>
 8007698:	2b16      	cmp	r3, #22
 800769a:	d11e      	bne.n	80076da <__sflush_r+0xea>
 800769c:	602f      	str	r7, [r5, #0]
 800769e:	2000      	movs	r0, #0
 80076a0:	e022      	b.n	80076e8 <__sflush_r+0xf8>
 80076a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a6:	b21b      	sxth	r3, r3
 80076a8:	e01b      	b.n	80076e2 <__sflush_r+0xf2>
 80076aa:	690f      	ldr	r7, [r1, #16]
 80076ac:	2f00      	cmp	r7, #0
 80076ae:	d0f6      	beq.n	800769e <__sflush_r+0xae>
 80076b0:	0793      	lsls	r3, r2, #30
 80076b2:	680e      	ldr	r6, [r1, #0]
 80076b4:	bf08      	it	eq
 80076b6:	694b      	ldreq	r3, [r1, #20]
 80076b8:	600f      	str	r7, [r1, #0]
 80076ba:	bf18      	it	ne
 80076bc:	2300      	movne	r3, #0
 80076be:	eba6 0807 	sub.w	r8, r6, r7
 80076c2:	608b      	str	r3, [r1, #8]
 80076c4:	f1b8 0f00 	cmp.w	r8, #0
 80076c8:	dde9      	ble.n	800769e <__sflush_r+0xae>
 80076ca:	6a21      	ldr	r1, [r4, #32]
 80076cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076ce:	4643      	mov	r3, r8
 80076d0:	463a      	mov	r2, r7
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b0      	blx	r6
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dc08      	bgt.n	80076ec <__sflush_r+0xfc>
 80076da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	4407      	add	r7, r0
 80076ee:	eba8 0800 	sub.w	r8, r8, r0
 80076f2:	e7e7      	b.n	80076c4 <__sflush_r+0xd4>
 80076f4:	dfbffffe 	.word	0xdfbffffe

080076f8 <_fflush_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	690b      	ldr	r3, [r1, #16]
 80076fc:	4605      	mov	r5, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	b913      	cbnz	r3, 8007708 <_fflush_r+0x10>
 8007702:	2500      	movs	r5, #0
 8007704:	4628      	mov	r0, r5
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	b118      	cbz	r0, 8007712 <_fflush_r+0x1a>
 800770a:	6a03      	ldr	r3, [r0, #32]
 800770c:	b90b      	cbnz	r3, 8007712 <_fflush_r+0x1a>
 800770e:	f7fe fa53 	bl	8005bb8 <__sinit>
 8007712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f3      	beq.n	8007702 <_fflush_r+0xa>
 800771a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800771c:	07d0      	lsls	r0, r2, #31
 800771e:	d404      	bmi.n	800772a <_fflush_r+0x32>
 8007720:	0599      	lsls	r1, r3, #22
 8007722:	d402      	bmi.n	800772a <_fflush_r+0x32>
 8007724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007726:	f7fe fb50 	bl	8005dca <__retarget_lock_acquire_recursive>
 800772a:	4628      	mov	r0, r5
 800772c:	4621      	mov	r1, r4
 800772e:	f7ff ff5f 	bl	80075f0 <__sflush_r>
 8007732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007734:	07da      	lsls	r2, r3, #31
 8007736:	4605      	mov	r5, r0
 8007738:	d4e4      	bmi.n	8007704 <_fflush_r+0xc>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	d4e1      	bmi.n	8007704 <_fflush_r+0xc>
 8007740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007742:	f7fe fb43 	bl	8005dcc <__retarget_lock_release_recursive>
 8007746:	e7dd      	b.n	8007704 <_fflush_r+0xc>

08007748 <__swbuf_r>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4614      	mov	r4, r2
 800774e:	4605      	mov	r5, r0
 8007750:	b118      	cbz	r0, 800775a <__swbuf_r+0x12>
 8007752:	6a03      	ldr	r3, [r0, #32]
 8007754:	b90b      	cbnz	r3, 800775a <__swbuf_r+0x12>
 8007756:	f7fe fa2f 	bl	8005bb8 <__sinit>
 800775a:	69a3      	ldr	r3, [r4, #24]
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	071a      	lsls	r2, r3, #28
 8007762:	d501      	bpl.n	8007768 <__swbuf_r+0x20>
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	b943      	cbnz	r3, 800777a <__swbuf_r+0x32>
 8007768:	4621      	mov	r1, r4
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f82a 	bl	80077c4 <__swsetup_r>
 8007770:	b118      	cbz	r0, 800777a <__swbuf_r+0x32>
 8007772:	f04f 37ff 	mov.w	r7, #4294967295
 8007776:	4638      	mov	r0, r7
 8007778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	1a98      	subs	r0, r3, r2
 8007780:	6963      	ldr	r3, [r4, #20]
 8007782:	b2f6      	uxtb	r6, r6
 8007784:	4283      	cmp	r3, r0
 8007786:	4637      	mov	r7, r6
 8007788:	dc05      	bgt.n	8007796 <__swbuf_r+0x4e>
 800778a:	4621      	mov	r1, r4
 800778c:	4628      	mov	r0, r5
 800778e:	f7ff ffb3 	bl	80076f8 <_fflush_r>
 8007792:	2800      	cmp	r0, #0
 8007794:	d1ed      	bne.n	8007772 <__swbuf_r+0x2a>
 8007796:	68a3      	ldr	r3, [r4, #8]
 8007798:	3b01      	subs	r3, #1
 800779a:	60a3      	str	r3, [r4, #8]
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	6022      	str	r2, [r4, #0]
 80077a2:	701e      	strb	r6, [r3, #0]
 80077a4:	6962      	ldr	r2, [r4, #20]
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d004      	beq.n	80077b6 <__swbuf_r+0x6e>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	07db      	lsls	r3, r3, #31
 80077b0:	d5e1      	bpl.n	8007776 <__swbuf_r+0x2e>
 80077b2:	2e0a      	cmp	r6, #10
 80077b4:	d1df      	bne.n	8007776 <__swbuf_r+0x2e>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f7ff ff9d 	bl	80076f8 <_fflush_r>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0d9      	beq.n	8007776 <__swbuf_r+0x2e>
 80077c2:	e7d6      	b.n	8007772 <__swbuf_r+0x2a>

080077c4 <__swsetup_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4b29      	ldr	r3, [pc, #164]	@ (800786c <__swsetup_r+0xa8>)
 80077c8:	4605      	mov	r5, r0
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	460c      	mov	r4, r1
 80077ce:	b118      	cbz	r0, 80077d8 <__swsetup_r+0x14>
 80077d0:	6a03      	ldr	r3, [r0, #32]
 80077d2:	b90b      	cbnz	r3, 80077d8 <__swsetup_r+0x14>
 80077d4:	f7fe f9f0 	bl	8005bb8 <__sinit>
 80077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077dc:	0719      	lsls	r1, r3, #28
 80077de:	d422      	bmi.n	8007826 <__swsetup_r+0x62>
 80077e0:	06da      	lsls	r2, r3, #27
 80077e2:	d407      	bmi.n	80077f4 <__swsetup_r+0x30>
 80077e4:	2209      	movs	r2, #9
 80077e6:	602a      	str	r2, [r5, #0]
 80077e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	e033      	b.n	800785c <__swsetup_r+0x98>
 80077f4:	0758      	lsls	r0, r3, #29
 80077f6:	d512      	bpl.n	800781e <__swsetup_r+0x5a>
 80077f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077fa:	b141      	cbz	r1, 800780e <__swsetup_r+0x4a>
 80077fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <__swsetup_r+0x46>
 8007804:	4628      	mov	r0, r5
 8007806:	f7ff f92f 	bl	8006a68 <_free_r>
 800780a:	2300      	movs	r3, #0
 800780c:	6363      	str	r3, [r4, #52]	@ 0x34
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	2300      	movs	r3, #0
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0308 	orr.w	r3, r3, #8
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	b94b      	cbnz	r3, 800783e <__swsetup_r+0x7a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007834:	d003      	beq.n	800783e <__swsetup_r+0x7a>
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f000 f8c1 	bl	80079c0 <__smakebuf_r>
 800783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007842:	f013 0201 	ands.w	r2, r3, #1
 8007846:	d00a      	beq.n	800785e <__swsetup_r+0x9a>
 8007848:	2200      	movs	r2, #0
 800784a:	60a2      	str	r2, [r4, #8]
 800784c:	6962      	ldr	r2, [r4, #20]
 800784e:	4252      	negs	r2, r2
 8007850:	61a2      	str	r2, [r4, #24]
 8007852:	6922      	ldr	r2, [r4, #16]
 8007854:	b942      	cbnz	r2, 8007868 <__swsetup_r+0xa4>
 8007856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800785a:	d1c5      	bne.n	80077e8 <__swsetup_r+0x24>
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	0799      	lsls	r1, r3, #30
 8007860:	bf58      	it	pl
 8007862:	6962      	ldrpl	r2, [r4, #20]
 8007864:	60a2      	str	r2, [r4, #8]
 8007866:	e7f4      	b.n	8007852 <__swsetup_r+0x8e>
 8007868:	2000      	movs	r0, #0
 800786a:	e7f7      	b.n	800785c <__swsetup_r+0x98>
 800786c:	2000002c 	.word	0x2000002c

08007870 <_sbrk_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4d06      	ldr	r5, [pc, #24]	@ (800788c <_sbrk_r+0x1c>)
 8007874:	2300      	movs	r3, #0
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	f7fa f9c4 	bl	8001c08 <_sbrk>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_sbrk_r+0x1a>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_sbrk_r+0x1a>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	200004b8 	.word	0x200004b8

08007890 <memcpy>:
 8007890:	440a      	add	r2, r1
 8007892:	4291      	cmp	r1, r2
 8007894:	f100 33ff 	add.w	r3, r0, #4294967295
 8007898:	d100      	bne.n	800789c <memcpy+0xc>
 800789a:	4770      	bx	lr
 800789c:	b510      	push	{r4, lr}
 800789e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a6:	4291      	cmp	r1, r2
 80078a8:	d1f9      	bne.n	800789e <memcpy+0xe>
 80078aa:	bd10      	pop	{r4, pc}

080078ac <__assert_func>:
 80078ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ae:	4614      	mov	r4, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	4b09      	ldr	r3, [pc, #36]	@ (80078d8 <__assert_func+0x2c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4605      	mov	r5, r0
 80078b8:	68d8      	ldr	r0, [r3, #12]
 80078ba:	b954      	cbnz	r4, 80078d2 <__assert_func+0x26>
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <__assert_func+0x30>)
 80078be:	461c      	mov	r4, r3
 80078c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078c4:	9100      	str	r1, [sp, #0]
 80078c6:	462b      	mov	r3, r5
 80078c8:	4905      	ldr	r1, [pc, #20]	@ (80078e0 <__assert_func+0x34>)
 80078ca:	f000 f841 	bl	8007950 <fiprintf>
 80078ce:	f000 f8d5 	bl	8007a7c <abort>
 80078d2:	4b04      	ldr	r3, [pc, #16]	@ (80078e4 <__assert_func+0x38>)
 80078d4:	e7f4      	b.n	80078c0 <__assert_func+0x14>
 80078d6:	bf00      	nop
 80078d8:	2000002c 	.word	0x2000002c
 80078dc:	08007dce 	.word	0x08007dce
 80078e0:	08007da0 	.word	0x08007da0
 80078e4:	08007d93 	.word	0x08007d93

080078e8 <_calloc_r>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	fba1 5402 	umull	r5, r4, r1, r2
 80078ee:	b93c      	cbnz	r4, 8007900 <_calloc_r+0x18>
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7ff f92d 	bl	8006b50 <_malloc_r>
 80078f6:	4606      	mov	r6, r0
 80078f8:	b928      	cbnz	r0, 8007906 <_calloc_r+0x1e>
 80078fa:	2600      	movs	r6, #0
 80078fc:	4630      	mov	r0, r6
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	220c      	movs	r2, #12
 8007902:	6002      	str	r2, [r0, #0]
 8007904:	e7f9      	b.n	80078fa <_calloc_r+0x12>
 8007906:	462a      	mov	r2, r5
 8007908:	4621      	mov	r1, r4
 800790a:	f7fe f9e0 	bl	8005cce <memset>
 800790e:	e7f5      	b.n	80078fc <_calloc_r+0x14>

08007910 <__ascii_mbtowc>:
 8007910:	b082      	sub	sp, #8
 8007912:	b901      	cbnz	r1, 8007916 <__ascii_mbtowc+0x6>
 8007914:	a901      	add	r1, sp, #4
 8007916:	b142      	cbz	r2, 800792a <__ascii_mbtowc+0x1a>
 8007918:	b14b      	cbz	r3, 800792e <__ascii_mbtowc+0x1e>
 800791a:	7813      	ldrb	r3, [r2, #0]
 800791c:	600b      	str	r3, [r1, #0]
 800791e:	7812      	ldrb	r2, [r2, #0]
 8007920:	1e10      	subs	r0, r2, #0
 8007922:	bf18      	it	ne
 8007924:	2001      	movne	r0, #1
 8007926:	b002      	add	sp, #8
 8007928:	4770      	bx	lr
 800792a:	4610      	mov	r0, r2
 800792c:	e7fb      	b.n	8007926 <__ascii_mbtowc+0x16>
 800792e:	f06f 0001 	mvn.w	r0, #1
 8007932:	e7f8      	b.n	8007926 <__ascii_mbtowc+0x16>

08007934 <__ascii_wctomb>:
 8007934:	4603      	mov	r3, r0
 8007936:	4608      	mov	r0, r1
 8007938:	b141      	cbz	r1, 800794c <__ascii_wctomb+0x18>
 800793a:	2aff      	cmp	r2, #255	@ 0xff
 800793c:	d904      	bls.n	8007948 <__ascii_wctomb+0x14>
 800793e:	228a      	movs	r2, #138	@ 0x8a
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	f04f 30ff 	mov.w	r0, #4294967295
 8007946:	4770      	bx	lr
 8007948:	700a      	strb	r2, [r1, #0]
 800794a:	2001      	movs	r0, #1
 800794c:	4770      	bx	lr
	...

08007950 <fiprintf>:
 8007950:	b40e      	push	{r1, r2, r3}
 8007952:	b503      	push	{r0, r1, lr}
 8007954:	4601      	mov	r1, r0
 8007956:	ab03      	add	r3, sp, #12
 8007958:	4805      	ldr	r0, [pc, #20]	@ (8007970 <fiprintf+0x20>)
 800795a:	f853 2b04 	ldr.w	r2, [r3], #4
 800795e:	6800      	ldr	r0, [r0, #0]
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	f7ff fd2d 	bl	80073c0 <_vfiprintf_r>
 8007966:	b002      	add	sp, #8
 8007968:	f85d eb04 	ldr.w	lr, [sp], #4
 800796c:	b003      	add	sp, #12
 800796e:	4770      	bx	lr
 8007970:	2000002c 	.word	0x2000002c

08007974 <__swhatbuf_r>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	2900      	cmp	r1, #0
 800797e:	b096      	sub	sp, #88	@ 0x58
 8007980:	4615      	mov	r5, r2
 8007982:	461e      	mov	r6, r3
 8007984:	da0d      	bge.n	80079a2 <__swhatbuf_r+0x2e>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	bf14      	ite	ne
 8007992:	2340      	movne	r3, #64	@ 0x40
 8007994:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007998:	2000      	movs	r0, #0
 800799a:	6031      	str	r1, [r6, #0]
 800799c:	602b      	str	r3, [r5, #0]
 800799e:	b016      	add	sp, #88	@ 0x58
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	466a      	mov	r2, sp
 80079a4:	f000 f848 	bl	8007a38 <_fstat_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dbec      	blt.n	8007986 <__swhatbuf_r+0x12>
 80079ac:	9901      	ldr	r1, [sp, #4]
 80079ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079b6:	4259      	negs	r1, r3
 80079b8:	4159      	adcs	r1, r3
 80079ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079be:	e7eb      	b.n	8007998 <__swhatbuf_r+0x24>

080079c0 <__smakebuf_r>:
 80079c0:	898b      	ldrh	r3, [r1, #12]
 80079c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079c4:	079d      	lsls	r5, r3, #30
 80079c6:	4606      	mov	r6, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	d507      	bpl.n	80079dc <__smakebuf_r+0x1c>
 80079cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	2301      	movs	r3, #1
 80079d6:	6163      	str	r3, [r4, #20]
 80079d8:	b003      	add	sp, #12
 80079da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079dc:	ab01      	add	r3, sp, #4
 80079de:	466a      	mov	r2, sp
 80079e0:	f7ff ffc8 	bl	8007974 <__swhatbuf_r>
 80079e4:	9f00      	ldr	r7, [sp, #0]
 80079e6:	4605      	mov	r5, r0
 80079e8:	4639      	mov	r1, r7
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff f8b0 	bl	8006b50 <_malloc_r>
 80079f0:	b948      	cbnz	r0, 8007a06 <__smakebuf_r+0x46>
 80079f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f6:	059a      	lsls	r2, r3, #22
 80079f8:	d4ee      	bmi.n	80079d8 <__smakebuf_r+0x18>
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	f043 0302 	orr.w	r3, r3, #2
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	e7e2      	b.n	80079cc <__smakebuf_r+0xc>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	6020      	str	r0, [r4, #0]
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a16:	b15b      	cbz	r3, 8007a30 <__smakebuf_r+0x70>
 8007a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f000 f81d 	bl	8007a5c <_isatty_r>
 8007a22:	b128      	cbz	r0, 8007a30 <__smakebuf_r+0x70>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	431d      	orrs	r5, r3
 8007a34:	81a5      	strh	r5, [r4, #12]
 8007a36:	e7cf      	b.n	80079d8 <__smakebuf_r+0x18>

08007a38 <_fstat_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	@ (8007a58 <_fstat_r+0x20>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f7fa f8b7 	bl	8001bb8 <_fstat>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d102      	bne.n	8007a54 <_fstat_r+0x1c>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b103      	cbz	r3, 8007a54 <_fstat_r+0x1c>
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	200004b8 	.word	0x200004b8

08007a5c <_isatty_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d06      	ldr	r5, [pc, #24]	@ (8007a78 <_isatty_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7fa f8b6 	bl	8001bd8 <_isatty>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_isatty_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_isatty_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	200004b8 	.word	0x200004b8

08007a7c <abort>:
 8007a7c:	b508      	push	{r3, lr}
 8007a7e:	2006      	movs	r0, #6
 8007a80:	f000 f82c 	bl	8007adc <raise>
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7fa f847 	bl	8001b18 <_exit>

08007a8a <_raise_r>:
 8007a8a:	291f      	cmp	r1, #31
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4605      	mov	r5, r0
 8007a90:	460c      	mov	r4, r1
 8007a92:	d904      	bls.n	8007a9e <_raise_r+0x14>
 8007a94:	2316      	movs	r3, #22
 8007a96:	6003      	str	r3, [r0, #0]
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007aa0:	b112      	cbz	r2, 8007aa8 <_raise_r+0x1e>
 8007aa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aa6:	b94b      	cbnz	r3, 8007abc <_raise_r+0x32>
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f000 f831 	bl	8007b10 <_getpid_r>
 8007aae:	4622      	mov	r2, r4
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab8:	f000 b818 	b.w	8007aec <_kill_r>
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d00a      	beq.n	8007ad6 <_raise_r+0x4c>
 8007ac0:	1c59      	adds	r1, r3, #1
 8007ac2:	d103      	bne.n	8007acc <_raise_r+0x42>
 8007ac4:	2316      	movs	r3, #22
 8007ac6:	6003      	str	r3, [r0, #0]
 8007ac8:	2001      	movs	r0, #1
 8007aca:	e7e7      	b.n	8007a9c <_raise_r+0x12>
 8007acc:	2100      	movs	r1, #0
 8007ace:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4798      	blx	r3
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e7e0      	b.n	8007a9c <_raise_r+0x12>
	...

08007adc <raise>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	@ (8007ae8 <raise+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f7ff bfd2 	b.w	8007a8a <_raise_r>
 8007ae6:	bf00      	nop
 8007ae8:	2000002c 	.word	0x2000002c

08007aec <_kill_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	@ (8007b0c <_kill_r+0x20>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f7f9 fffd 	bl	8001af8 <_kill>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d102      	bne.n	8007b08 <_kill_r+0x1c>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	b103      	cbz	r3, 8007b08 <_kill_r+0x1c>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200004b8 	.word	0x200004b8

08007b10 <_getpid_r>:
 8007b10:	f7f9 bfea 	b.w	8001ae8 <_getpid>

08007b14 <_init>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr

08007b20 <_fini>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr
